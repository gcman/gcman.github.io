'1': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"c1\"># Implement eq. (1)</span>\n<span class=\"k\">def</span> <span\
    \ class=\"nf\">triangular</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\"\
    >n</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"\
    p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n\n\n<span\
    \ class=\"c1\"># These are the terms in eq. (3)</span>\n<span class=\"k\">def</span>\
    \ <span class=\"nf\">sum_under</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"\
    p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">m</span><span\
    \ class=\"o\">*</span><span class=\"n\">triangular</span><span class=\"p\">((</span><span\
    \ class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span\
    \ class=\"p\">)</span><span class=\"o\">//</span><span class=\"n\">m</span><span\
    \ class=\"p\">)</span>\n\n\n<span class=\"n\">T</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_under</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span\
    \ class=\"n\">sum_under</span><span class=\"p\">(</span><span class=\"n\">N</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span\
    \ class=\"o\">-</span> <span class=\"n\">sum_under</span><span class=\"p\">(</span><span\
    \ class=\"n\">N</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span\
    \ class=\"p\">))</span>\n</pre></div>\n</td></tr></table>", comments: '2', difficulty: '5',
  empty: '4', hrdifficulty: Easy, memory: '8716', name: Multiples of 3 and 5, num: '1',
  path: 1-Multiples-of-3-and-5, runtime: '10'}
'10': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"\
    highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\"\
    >bs</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"\
    p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"\
    n\">r</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Binary Search arr from\
    \ index l to r for x&quot;&quot;&quot;</span>\n    <span class=\"k\">while</span>\
    \ <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\"\
    >r</span><span class=\"p\">:</span>\n        <span class=\"n\">mid</span> <span\
    \ class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span\
    \ class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span\
    \ class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">//</span><span\
    \ class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"\
    p\">]</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"\
    p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">mid</span>\n\
    \        <span class=\"k\">elif</span> <span class=\"n\">arr</span><span class=\"\
    p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"\
    o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n       \
    \     <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\"\
    >mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span\
    \ class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"\
    o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"k\">return</span>\
    \ <span class=\"n\">r</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sieve of Eratosthenes&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"\
    p\">[]</span>\n    <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span\
    \ class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span>\
    \ <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span>\
    \ <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\
    \    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span\
    \ class=\"n\">p</span><span class=\"p\">]:</span>\n            <span class=\"\
    n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n \
    \           <span class=\"c1\"># Cross out all multiples of p</span>\n       \
    \     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"\
    p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"\
    p\">):</span>\n                <span class=\"n\">sieve</span><span class=\"p\"\
    >[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\"\
    >=</span> <span class=\"bp\">False</span>\n                <span class=\"k\">return</span>\
    \ <span class=\"n\">primes</span>\n\n\n<span class=\"n\">PRIMES</span> <span class=\"\
    o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"mf\">2e6</span><span class=\"\
    p\">))</span>\n<span class=\"c1\"># Construct the prefix sum array</span>\n<span\
    \ class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">count</span>\
    \ <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">PRIMES</span><span\
    \ class=\"p\">:</span>\n    <span class=\"n\">count</span> <span class=\"o\">+=</span>\
    \ <span class=\"n\">p</span>\n    <span class=\"n\">P</span><span class=\"o\"\
    >.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"\
    n\">count</span><span class=\"p\">)</span>\n<span class=\"k\">del</span> <span\
    \ class=\"n\">P</span><span class=\"p\">[</span><span class=\"mi\">0</span><span\
    \ class=\"p\">]</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span\
    \ class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">bs</span><span\
    \ class=\"p\">(</span><span class=\"n\">PRIMES</span><span class=\"p\">,</span>\
    \ <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span\
    \ class=\"p\">(</span><span class=\"n\">PRIMES</span><span class=\"p\">)</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span\
    \ class=\"n\">N</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span\
    \ class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">[</span><span\
    \ class=\"n\">idx</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></table>",
  comments: '2', difficulty: '5', empty: '5', hrdifficulty: Medium, memory: '29890',
  name: Summation of Primes, num: '10', path: 10-Summation-of-Primes, runtime: '479'}
'100': {difficulty: '30', hrdifficulty: Advanced, name: Arranged probability, num: '100'}
'101': {difficulty: '35', hrdifficulty: Medium, name: Optimum polynomial}
'102': {difficulty: '15', hrdifficulty: Easy, name: Triangle containment}
'103': {difficulty: '45', hrdifficulty: Easy, name: 'Special subset sums: optimum'}
'104': {difficulty: '25', hrdifficulty: Easy, name: Pandigital Fibonacci ends}
'105': {difficulty: '45', hrdifficulty: Easy, name: 'Special subset sums: testing'}
'106': {difficulty: '50', hrdifficulty: Easy, name: 'Special subset sums: meta-testing'}
'107': {difficulty: '35', hrdifficulty: Easy, name: Minimal network}
'108': {difficulty: '30', hrdifficulty: Easy, name: Diophantine reciprocals I}
'109': {difficulty: '45', hrdifficulty: Easy, name: Darts}
'11': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"k\">def</span> <span class=\"nf\">prod</span><span class=\"p\">(</span><span\
    \ class=\"n\">arr</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Compute\
    \ the product of the numbers in arr&quot;&quot;&quot;</span>\n    <span class=\"\
    n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span\
    \ class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span>\
    \ <span class=\"n\">arr</span><span class=\"p\">:</span>\n        <span class=\"\
    n\">ans</span> <span class=\"o\">*=</span> <span class=\"n\">x</span>\n    <span\
    \ class=\"k\">return</span> <span class=\"n\">ans</span>\n\n\n<span class=\"n\"\
    >G</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"\
    nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"\
    p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"\
    nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"\
    n\">split</span><span class=\"p\">()))</span> <span class=\"k\">for</span> <span\
    \ class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)]</span>\n\
    <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >20</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span\
    \ class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n\
    \        <span class=\"c1\"># Read rightwards</span>\n        <span class=\"k\"\
    >if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"\
    mi\">17</span><span class=\"p\">:</span>\n            <span class=\"n\">horiz</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">prod</span><span class=\"p\">([</span><span\
    \ class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">x</span><span\
    \ class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">][</span><span\
    \ class=\"n\">y</span><span class=\"p\">]</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)])</span>\n\
    \        <span class=\"k\">else</span><span class=\"p\">:</span>\n           \
    \ <span class=\"n\">horiz</span> <span class=\"o\">=</span> <span class=\"mi\"\
    >0</span>\n        <span class=\"c1\"># Read downwards</span>\n        <span class=\"\
    k\">if</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"\
    mi\">17</span><span class=\"p\">:</span>\n            <span class=\"n\">vert</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">prod</span><span class=\"p\">([</span><span\
    \ class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">x</span><span\
    \ class=\"p\">][</span><span class=\"n\">y</span><span class=\"o\">+</span><span\
    \ class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)])</span>\n\
    \        <span class=\"k\">else</span><span class=\"p\">:</span>\n           \
    \ <span class=\"n\">vert</span> <span class=\"o\">=</span> <span class=\"mi\"\
    >0</span>\n        <span class=\"c1\"># Read down and to the right</span>\n  \
    \      <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\"\
    >&lt;</span> <span class=\"mi\">17</span> <span class=\"ow\">and</span> <span\
    \ class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">17</span><span\
    \ class=\"p\">:</span>\n            <span class=\"n\">ldiag</span> <span class=\"\
    o\">=</span> <span class=\"n\">prod</span><span class=\"p\">([</span><span class=\"\
    n\">G</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"\
    o\">+</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"\
    n\">y</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"\
    p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"\
    ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"mi\">4</span><span class=\"p\">)])</span>\n        <span class=\"k\"\
    >else</span><span class=\"p\">:</span>\n            <span class=\"n\">ldiag</span>\
    \ <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"\
    c1\"># Read down and to the left</span>\n        <span class=\"k\">if</span> <span\
    \ class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span>\
    \ <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span>\
    \ <span class=\"mi\">17</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">rdiag</span> <span class=\"o\">=</span> <span class=\"n\">prod</span><span\
    \ class=\"p\">([</span><span class=\"n\">G</span><span class=\"p\">[</span><span\
    \ class=\"n\">x</span><span class=\"o\">-</span><span class=\"n\">i</span><span\
    \ class=\"p\">][</span><span class=\"n\">y</span><span class=\"o\">+</span><span\
    \ class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)])</span>\n\
    \        <span class=\"k\">else</span><span class=\"p\">:</span>\n           \
    \ <span class=\"n\">rdiag</span> <span class=\"o\">=</span> <span class=\"mi\"\
    >0</span>\n        <span class=\"n\">ans</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">ans</span><span\
    \ class=\"p\">,</span> <span class=\"n\">horiz</span><span class=\"p\">,</span>\
    \ <span class=\"n\">vert</span><span class=\"p\">,</span> <span class=\"n\">ldiag</span><span\
    \ class=\"p\">,</span> <span class=\"n\">rdiag</span><span class=\"p\">)</span>\n\
    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span\
    \ class=\"p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '4', difficulty: '5',
  empty: '2', hrdifficulty: Easy, memory: '8854', name: Largest Product in a Grid,
  num: '11', path: 11-Largest-Product-in-a-Grid, runtime: '11'}
'110': {difficulty: '40', hrdifficulty: Easy, name: Diophantine reciprocals II}
'111': {difficulty: '45', hrdifficulty: Easy, name: Primes with runs}
'112': {difficulty: '15', hrdifficulty: Advanced, name: Bouncy numbers}
'113': {difficulty: '30', hrdifficulty: Easy, name: Non-bouncy numbers}
'114': {difficulty: '35', hrdifficulty: Medium, name: Counting block combinations
    I}
'115': {difficulty: '35', hrdifficulty: Medium, name: Counting block combinations
    II}
'116': {difficulty: '30', hrdifficulty: Easy, name: 'Red, green or blue tiles'}
'117': {difficulty: '35', hrdifficulty: Easy, name: 'Red, green, and blue tiles'}
'118': {difficulty: '45', hrdifficulty: Hard, name: Pandigital prime sets}
'119': {difficulty: '30', hrdifficulty: Easy, name: Digit power sum}
'12': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\
    53\n54\n55\n56\n57\n58</pre></div></td><td class=\"code\"><div class=\"highlight\"\
    ><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">primes</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Sieve of Eratosthenes&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"\
    p\">[]</span>\n    <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span\
    \ class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span>\
    \ <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span>\
    \ <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\
    \    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span\
    \ class=\"n\">p</span><span class=\"p\">]:</span>\n            <span class=\"\
    n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n \
    \           <span class=\"c1\"># Cross out all multiples of p</span>\n       \
    \     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"\
    p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"\
    p\">):</span>\n                <span class=\"n\">sieve</span><span class=\"p\"\
    >[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\"\
    >=</span> <span class=\"bp\">False</span>\n                <span class=\"k\">return</span>\
    \ <span class=\"n\">primes</span>\n\n\n<span class=\"n\">P</span> <span class=\"\
    o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"\
    mi\">202</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span\
    \ class=\"nf\">prime_factors</span><span class=\"p\">(</span><span class=\"n\"\
    >n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return\
    \ the prime factorization of n&quot;&quot;&quot;</span>\n    <span class=\"n\"\
    >factors</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span\
    \ class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span>\
    \ <span class=\"n\">P</span><span class=\"p\">:</span>\n        <span class=\"\
    k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"\
    n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"\
    p\">:</span>\n            <span class=\"n\">factors</span><span class=\"p\">[</span><span\
    \ class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span\
    \ class=\"mi\">0</span>\n            <span class=\"k\">while</span> <span class=\"\
    n\">n</span> <span class=\"o\">%</span> <span class=\"n\">p</span> <span class=\"\
    o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        \
    \        <span class=\"n\">n</span> <span class=\"o\">//=</span> <span class=\"\
    n\">p</span>\n                <span class=\"n\">factors</span><span class=\"p\"\
    >[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\"\
    >+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span\
    \ class=\"n\">factors</span>\n\n\n<span class=\"c1\"># Memoize the latest num_of_factors</span>\n\
    <span class=\"n\">LATEST</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span\
    \ class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">factors</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Find the number of factors of n&quot;&quot;&quot;</span>\n\
    \    <span class=\"k\">global</span> <span class=\"n\">LATEST</span>\n    <span\
    \ class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span>\
    \ <span class=\"n\">LATEST</span><span class=\"p\">[</span><span class=\"mi\"\
    >0</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span>\
    \ <span class=\"n\">LATEST</span><span class=\"p\">[</span><span class=\"mi\"\
    >1</span><span class=\"p\">]</span>\n    <span class=\"n\">P</span> <span class=\"\
    o\">=</span> <span class=\"n\">prime_factors</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"n\">ans</span>\
    \ <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\"\
    >for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"\
    n\">P</span><span class=\"p\">:</span>\n        <span class=\"n\">ans</span> <span\
    \ class=\"o\">*=</span> <span class=\"n\">P</span><span class=\"p\">[</span><span\
    \ class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span\
    \ class=\"mi\">1</span>\n        <span class=\"n\">LATEST</span> <span class=\"\
    o\">=</span> <span class=\"p\">[</span><span class=\"n\">n</span><span class=\"\
    p\">,</span> <span class=\"n\">ans</span><span class=\"p\">]</span>\n    <span\
    \ class=\"k\">return</span> <span class=\"n\">ans</span>\n\n\n<span class=\"k\"\
    >def</span> <span class=\"nf\">triangle_factors</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Find\
    \ the number of factors of T_n&quot;&quot;&quot;</span>\n    <span class=\"n\"\
    >k</span> <span class=\"o\">=</span> <span class=\"n\">prime_factors</span><span\
    \ class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">//</span><span\
    \ class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">n</span>\
    \ <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\
    \ <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)[</span><span\
    \ class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"n\">factors</span><span class=\"p\">(</span><span class=\"n\"\
    >n</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"\
    n\">factors</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"\
    o\">*</span> <span class=\"n\">k</span> <span class=\"o\">//</span> <span class=\"\
    p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"\
    mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">T</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span\
    \ class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\"\
    >triangle_factors</span><span class=\"p\">(</span><span class=\"n\">i</span><span\
    \ class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span\
    \ class=\"p\">:</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span>\
    \ <span class=\"mi\">1</span>\n        <span class=\"k\">print</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"\
    mi\">1</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"\
    mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '2',
  difficulty: '5', empty: '12', hrdifficulty: Easy, memory: '8871', name: Highly Divisible
    Triangular Number, num: '12', path: 12-Highly-Divisible-Triangular-Number, runtime: '106'}
'120': {difficulty: '25', hrdifficulty: Easy, name: Square remainders}
'121': {difficulty: '35', hrdifficulty: Easy, name: Disc game prize fund}
'122': {difficulty: '40', hrdifficulty: Easy, name: Efficient exponentiation}
'123': {difficulty: '30', hrdifficulty: Easy, name: Prime square remainders}
'124': {difficulty: '25', hrdifficulty: Advanced, name: Ordered radicals}
'125': {difficulty: '25', hrdifficulty: Easy, name: Palindromic sums}
'126': {difficulty: '55', hrdifficulty: Advanced, name: Cuboid layers}
'127': {difficulty: '50', hrdifficulty: Advanced, name: abc-hits}
'128': {difficulty: '55', hrdifficulty: Hard, name: Hexagonal tile differences}
'129': {difficulty: '45', hrdifficulty: Hard, name: Repunit divisibility}
'13': {code: !!python/unicode '<table class="highlighttable"><tr><td class="linenos"><div
    class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span
    class="k">print</span><span class="p">(</span><span class="nb">str</span><span
    class="p">(</span><span class="nb">sum</span><span class="p">([</span><span class="nb">int</span><span
    class="p">(</span><span class="nb">input</span><span class="p">())</span> <span
    class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span
    class="nb">range</span><span class="p">(</span><span class="nb">int</span><span
    class="p">(</span><span class="nb">input</span><span class="p">()))]))[:</span><span
    class="mi">10</span><span class="p">])</span>

    </pre></div>

    </td></tr></table>', comments: '0', difficulty: '5', empty: '0', hrdifficulty: Easy,
  memory: '8792', name: Large Sum, num: '13', path: 13-Large-Sum, runtime: '11'}
'130': {difficulty: '45', hrdifficulty: Easy, name: Composites with prime repunit
    property}
'131': {difficulty: '40', hrdifficulty: Hard, name: Prime cube partnership}
'132': {difficulty: '45', hrdifficulty: Advanced, name: Large repunit factors}
'133': {difficulty: '50', hrdifficulty: Medium, name: Repunit nonfactors}
'134': {difficulty: '45', hrdifficulty: Medium, name: Prime pair connection}
'135': {difficulty: '45', hrdifficulty: Medium, name: Same differences}
'136': {difficulty: '50', hrdifficulty: Hard, name: Singleton difference}
'137': {difficulty: '50', hrdifficulty: Easy, name: Fibonacci golden nuggets}
'138': {difficulty: '45', hrdifficulty: Easy, name: Special isosceles triangles}
'139': {difficulty: '50', hrdifficulty: Easy, name: Pythagorean tiles}
'14': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\"\
    >def</span> <span class=\"nf\">bs</span><span class=\"p\">(</span><span class=\"\
    n\">arr</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"\
    p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"\
    n\">x</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Binary\
    \ Search arr from index l to r for x&quot;&quot;&quot;</span>\n    <span class=\"\
    k\">while</span> <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span\
    \ class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"n\">mid</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span>\
    \ <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span>\
    \ <span class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">//</span><span\
    \ class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"\
    p\">]</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"\
    p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">arr</span><span\
    \ class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span>\n\
    \        <span class=\"k\">elif</span> <span class=\"n\">arr</span><span class=\"\
    p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"\
    o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n       \
    \     <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\"\
    >mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span\
    \ class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"\
    o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"k\">return</span>\
    \ <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">r</span><span\
    \ class=\"p\">]</span>\n\n\n<span class=\"c1\"># Initialize the memoization list</span>\n\
    <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"mf\">5e6</span><span class=\"p\">)</span>\n\
    <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span\
    \ class=\"p\">(</span><span class=\"n\">MAX</span> <span class=\"o\">+</span>\
    \ <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">memo</span><span\
    \ class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span\
    \ class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># List\
    \ of indices at which there is a new maximum</span>\n<span class=\"n\">max_list</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span\
    \ class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">collatz</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Generate collatz chain starting with\
    \ n&quot;&quot;&quot;</span>\n    <span class=\"c1\"># Store chain length of small\
    \ n in memory</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span>\
    \ <span class=\"o\">&lt;=</span> <span class=\"n\">MAX</span><span class=\"p\"\
    >:</span>\n        <span class=\"k\">if</span> <span class=\"n\">memo</span><span\
    \ class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span\
    \ class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\
    \            <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"\
    o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"\
    mi\">0</span><span class=\"p\">:</span>\n                <span class=\"c1\">#\
    \ Use bitshift by 1 for speed</span>\n                <span class=\"n\">memo</span><span\
    \ class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span\
    \ class=\"o\">=</span> <span class=\"n\">collatz</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\
    \            <span class=\"k\">else</span><span class=\"p\">:</span>\n       \
    \         <span class=\"n\">memo</span><span class=\"p\">[</span><span class=\"\
    n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"\
    n\">collatz</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"\
    o\">*</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"\
    mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span\
    \ class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n \
    \   <span class=\"c1\"># Otherwise compute on the fly</span>\n    <span class=\"\
    k\">elif</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"\
    mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"\
    p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">collatz</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;&gt;</span>\
    \ <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span>\
    \ <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"\
    n\">collatz</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"\
    o\">*</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"\
    mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span>\n\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span\
    \ class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">MAX</span><span\
    \ class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">collatz</span><span class=\"p\">(</span><span class=\"\
    n\">i</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Track right-maximal\
    \ indices</span>\n    <span class=\"k\">if</span> <span class=\"n\">memo</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span\
    \ class=\"o\">&gt;=</span> <span class=\"n\">memo</span><span class=\"p\">[</span><span\
    \ class=\"n\">max_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">]]:</span>\n        <span class=\"n\"\
    >max_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n\
    <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\"\
    >(</span><span class=\"n\">bs</span><span class=\"p\">(</span><span class=\"n\"\
    >max_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"\
    p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"\
    n\">max_list</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"\
    p\">))</span>\n</pre></div>\n</td></tr></table>", comments: '6', difficulty: '5',
  empty: '7', hrdifficulty: Easy, memory: '17037', name: Longest Collatz Sequence,
  num: '14', path: 14-Longest-Collatz-Sequence, runtime: '1022'}
'140': {difficulty: '55', hrdifficulty: Easy, name: Modified Fibonacci golden nuggets}
'141': {difficulty: '60', hrdifficulty: Hard, name: 'Investigating progressive numbers,
    n, which are also square'}
'142': {difficulty: '45', hrdifficulty: Easy, name: Perfect Square Collection}
'143': {difficulty: '65', hrdifficulty: Easy, name: Investigating the Torricelli point
    of a triangle}
'144': {difficulty: '50', hrdifficulty: Medium, name: Investigating multiple reflections
    of a laser beam}
'145': {difficulty: '20', hrdifficulty: Hard, name: 'How many reversible numbers are
    there below one-billion?'}
'146': {difficulty: '50', hrdifficulty: Easy, name: Investigating a Prime Pattern}
'147': {difficulty: '65', hrdifficulty: Hard, name: Rectangles in cross-hatched grids}
'148': {difficulty: '50', hrdifficulty: Hard, name: Exploring Pascal's triangle}
'149': {difficulty: '50', hrdifficulty: Hard, name: Searching for a maximum-sum subsequence}
'15': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"\
    ><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">inv</span><span\
    \ class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span\
    \ class=\"n\">p</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Modular\
    \ inverse with Fermat&#39;s Little Theorem&quot;&quot;&quot;</span>\n    <span\
    \ class=\"k\">return</span> <span class=\"nb\">pow</span><span class=\"p\">(</span><span\
    \ class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">p</span><span\
    \ class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span\
    \ class=\"n\">p</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span>\
    \ <span class=\"nf\">choose</span><span class=\"p\">(</span><span class=\"n\"\
    >n</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\"\
    >,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n    <span class=\"\
    sd\">&quot;&quot;&quot;n choose k mod p&quot;&quot;&quot;</span>\n    <span class=\"\
    n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span\
    \ class=\"c1\"># Recurrence in eq. (2)</span>\n    <span class=\"k\">for</span>\
    \ <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">):</span>\n\
    \        <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"\
    p\">(</span><span class=\"n\">ans</span> <span class=\"o\">*</span> <span class=\"\
    p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"\
    n\">i</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"\
    n\">inv</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"\
    o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    n\">p</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"\
    n\">p</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span>\n\
    \n\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span>\n\
    <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">N</span><span class=\"p\">,</span>\
    \ <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span\
    \ class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span>\
    \ <span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\"\
    >.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n    <span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">choose</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">+</span><span\
    \ class=\"n\">M</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span\
    \ class=\"n\">M</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></table>",
  comments: '1', difficulty: '5', empty: '4', hrdifficulty: Easy, memory: '8828',
  name: Lattice Paths, num: '15', path: 15-Lattice-Paths, runtime: '12'}
'150': {difficulty: '55', hrdifficulty: Easy, name: Searching a triangular array for
    a sub-triangle having minimum-sum}
'151': {difficulty: '50', hrdifficulty: Medium, name: 'Paper sheets of standard sizes:
    an expected-value problem'}
'152': {difficulty: '65', hrdifficulty: Advanced, name: Writing 1/2 as a sum of inverse
    squares}
'153': {difficulty: '65', hrdifficulty: Hard, name: Investigating Gaussian Integers}
'154': {difficulty: '65', hrdifficulty: Hard, name: Exploring Pascal's pyramid}
'155': {difficulty: '60', hrdifficulty: Easy, name: Counting Capacitor Circuits}
'156': {difficulty: '70', hrdifficulty: Medium, name: Counting Digits}
'157': {difficulty: '65', hrdifficulty: Hard, name: Solving the diophantine equation
    1/a+1/b= p/10n}
'158': {difficulty: '55', hrdifficulty: Medium, name: Exploring strings for which
    only one character comes lexicographically after its neighbour to the left}
'159': {difficulty: '60', hrdifficulty: Medium, name: Digital root sums of factorisations}
'16': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"k\">def</span> <span class=\"nf\">digit_sum</span><span class=\"p\"\
    >(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"\
    sd\">&quot;&quot;&quot;Sum of digits of n&quot;&quot;&quot;</span>\n    <span\
    \ class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\
    \    <span class=\"k\">while</span> <span class=\"n\">n</span> <span class=\"\
    o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n      \
    \  <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">n</span>\
    \ <span class=\"o\">%</span> <span class=\"mi\">10</span>\n        <span class=\"\
    n\">n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"\
    n\">n</span> <span class=\"o\">-</span> <span class=\"n\">n</span> <span class=\"\
    o\">%</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"\
    o\">//</span> <span class=\"mi\">10</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"n\">s</span>\n\n\n<span class=\"n\">T</span> <span class=\"o\"\
    >=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span\
    \ class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">digit_sum</span><span class=\"p\">(</span><span class=\"nb\">pow</span><span\
    \ class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span\
    \ class=\"n\">N</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></table>",
  comments: '0', difficulty: '5', empty: '2', hrdifficulty: Easy, memory: '8779',
  name: Power Digit Sum, num: '16', path: 16-Power-Digit-Sum, runtime: '11'}
'160': {difficulty: '60', hrdifficulty: Advanced, name: Factorial trailing digits}
'161': {difficulty: '70', hrdifficulty: Hard, name: Triominoes}
'162': {difficulty: '45', hrdifficulty: Medium, name: Hexadecimal numbers}
'163': {difficulty: '70', hrdifficulty: Easy, name: Cross-hatched triangles}
'164': {difficulty: '45', hrdifficulty: Easy, name: Numbers for which no three consecutive
    digits have a sum greater than a given value}
'165': {difficulty: '65', hrdifficulty: Easy, name: Intersections}
'166': {difficulty: '50', hrdifficulty: Easy, name: Criss Cross}
'167': {difficulty: '75', hrdifficulty: Easy, name: Investigating Ulam sequences}
'168': {difficulty: '65', hrdifficulty: Easy, name: Number Rotations}
'169': {difficulty: '50', hrdifficulty: Easy, name: Exploring the number of different
    ways a number can be expressed as a sum of powers of 2}
'17': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\
    53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63</pre></div></td><td class=\"code\"\
    ><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Special names</span>\n\
    <span class=\"n\">NUMS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span\
    \ class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s2\">&quot;zero&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span\
    \ class=\"s2\">&quot;one&quot;</span><span class=\"p\">,</span> <span class=\"\
    mi\">2</span><span class=\"p\">:</span> <span class=\"s2\">&quot;two&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span\
    \ class=\"s2\">&quot;three&quot;</span><span class=\"p\">,</span> <span class=\"\
    mi\">4</span><span class=\"p\">:</span> <span class=\"s2\">&quot;four&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span\
    \ class=\"s2\">&quot;five&quot;</span><span class=\"p\">,</span>\n        <span\
    \ class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"s2\">&quot;six&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">:</span> <span\
    \ class=\"s2\">&quot;seven&quot;</span><span class=\"p\">,</span> <span class=\"\
    mi\">8</span><span class=\"p\">:</span> <span class=\"s2\">&quot;eight&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">:</span> <span\
    \ class=\"s2\">&quot;nine&quot;</span><span class=\"p\">,</span> <span class=\"\
    mi\">10</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ten&quot;</span><span\
    \ class=\"p\">,</span>\n        <span class=\"mi\">11</span><span class=\"p\"\
    >:</span> <span class=\"s2\">&quot;eleven&quot;</span><span class=\"p\">,</span>\
    \ <span class=\"mi\">12</span><span class=\"p\">:</span> <span class=\"s2\">&quot;twelve&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">:</span>\
    \ <span class=\"s2\">&quot;thirteen&quot;</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">14</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fourteen&quot;</span><span\
    \ class=\"p\">,</span>\n        <span class=\"mi\">15</span><span class=\"p\"\
    >:</span> <span class=\"s2\">&quot;fifteen&quot;</span><span class=\"p\">,</span>\
    \ <span class=\"mi\">16</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sixteen&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">:</span>\
    \ <span class=\"s2\">&quot;seventeen&quot;</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">18</span><span class=\"p\">:</span> <span class=\"s2\">&quot;eighteen&quot;</span><span\
    \ class=\"p\">,</span>\n        <span class=\"mi\">19</span><span class=\"p\"\
    >:</span> <span class=\"s2\">&quot;nineteen&quot;</span><span class=\"p\">,</span>\
    \ <span class=\"mi\">20</span><span class=\"p\">:</span> <span class=\"s2\">&quot;twenty&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">:</span>\
    \ <span class=\"s2\">&quot;thirty&quot;</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">40</span><span class=\"p\">:</span> <span class=\"s2\">&quot;forty&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">:</span>\
    \ <span class=\"s2\">&quot;fifty&quot;</span><span class=\"p\">,</span>\n    \
    \    <span class=\"mi\">60</span><span class=\"p\">:</span> <span class=\"s2\"\
    >&quot;sixty&quot;</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span\
    \ class=\"p\">:</span> <span class=\"s2\">&quot;seventy&quot;</span><span class=\"\
    p\">,</span> <span class=\"mi\">80</span><span class=\"p\">:</span> <span class=\"\
    s2\">&quot;eighty&quot;</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span\
    \ class=\"p\">:</span> <span class=\"s2\">&quot;ninety&quot;</span><span class=\"\
    p\">}</span>\n<span class=\"n\">TEN_POW</span> <span class=\"o\">=</span> <span\
    \ class=\"p\">[</span><span class=\"s2\">&quot;one&quot;</span><span class=\"\
    p\">,</span> <span class=\"s2\">&quot;ten&quot;</span><span class=\"p\">,</span>\
    \ <span class=\"s2\">&quot;hundred&quot;</span><span class=\"p\">,</span> <span\
    \ class=\"s2\">&quot;thousand&quot;</span><span class=\"p\">,</span>\n       \
    \    <span class=\"s2\">&quot;million&quot;</span><span class=\"p\">,</span> <span\
    \ class=\"s2\">&quot;billion&quot;</span><span class=\"p\">,</span> <span class=\"\
    s2\">&quot;trillion&quot;</span><span class=\"p\">]</span>\n<span class=\"n\"\
    >UPPERCASE</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n\
    \n<span class=\"k\">def</span> <span class=\"nf\">three_dig_name</span><span class=\"\
    p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"\
    sd\">&quot;&quot;&quot;English name of a three-digit number&quot;&quot;&quot;</span>\n\
    \    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"ow\"\
    >in</span> <span class=\"n\">NUMS</span><span class=\"p\">:</span>\n        <span\
    \ class=\"k\">return</span> <span class=\"n\">NUMS</span><span class=\"p\">[</span><span\
    \ class=\"n\">n</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span\
    \ class=\"p\">:</span>\n        <span class=\"c1\"># Start building name</span>\n\
    \        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"\
    p\">[]</span>\n        <span class=\"c1\"># Check if hundreds digit exists</span>\n\
    \        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"\
    o\">//</span> <span class=\"mi\">100</span> <span class=\"o\">&gt;</span> <span\
    \ class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"\
    c1\"># 342 -&gt; &quot;three hundred&quot;</span>\n            <span class=\"\
    n\">name</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">[</span><span\
    \ class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">100</span><span\
    \ class=\"p\">])</span>\n            <span class=\"n\">name</span><span class=\"\
    o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"\
    n\">TEN_POW</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"\
    p\">])</span>\n        <span class=\"c1\"># Check if we know this number</span>\n\
    \        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"\
    o\">%</span> <span class=\"mi\">100</span> <span class=\"ow\">in</span> <span\
    \ class=\"n\">NUMS</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">name</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">[</span><span\
    \ class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">100</span><span\
    \ class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\"\
    >:</span>\n            <span class=\"c1\"># The tens digit</span>\n          \
    \  <span class=\"c1\"># 342 -&gt; 42 - 2</span>\n            <span class=\"k\"\
    >if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"\
    o\">%</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"\
    o\">-</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"\
    o\">%</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"\
    o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n      \
    \          <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"\
    n\">append</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span\
    \ class=\"p\">[(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span\
    \ class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"o\">-</span>\
    \ <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span>\
    \ <span class=\"mi\">10</span><span class=\"p\">)])</span>\n            <span\
    \ class=\"c1\"># Ones digit</span>\n            <span class=\"k\">if</span> <span\
    \ class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">10</span>\
    \ <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\
    \                <span class=\"n\">name</span><span class=\"o\">.</span><span\
    \ class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span\
    \ class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span\
    \ class=\"mi\">10</span><span class=\"p\">])</span>\n        <span class=\"k\"\
    >return</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span\
    \ class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">name</span><span\
    \ class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">num_name</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;English name of a number&quot;&quot;&quot;</span>\n\
    \    <span class=\"c1\"># Split up into 5 blocks of 3 digits</span>\n    <span\
    \ class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span\
    \ class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"mi\">1000</span><span\
    \ class=\"o\">**</span><span class=\"n\">i</span><span class=\"p\">)</span> <span\
    \ class=\"o\">%</span> <span class=\"mi\">1000</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">5</span><span class=\"p\">)]</span>\n    <span class=\"n\">name</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"\
    ># Start from largest block (it goes first in the name)</span>\n    <span class=\"\
    k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"\
    n\">block</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span\
    \ class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span\
    \ class=\"n\">blocks</span><span class=\"p\">)):</span>\n        <span class=\"\
    k\">if</span> <span class=\"n\">block</span> <span class=\"o\">&gt;</span> <span\
    \ class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"\
    c1\"># Get the three digit name</span>\n            <span class=\"n\">block_name</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">three_dig_name</span><span class=\"\
    p\">(</span><span class=\"n\">block</span><span class=\"p\">)</span>\n       \
    \     <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\"\
    >append</span><span class=\"p\">(</span><span class=\"n\">block_name</span><span\
    \ class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"\
    n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">4</span><span class=\"\
    p\">:</span>\n                <span class=\"c1\"># When i = 4, this is the smallest\
    \ block</span>\n                <span class=\"n\">name</span><span class=\"o\"\
    >.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"\
    n\">TEN_POW</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"\
    n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"\
    p\">])</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot; &quot;</span><span\
    \ class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span\
    \ class=\"n\">name</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">T</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span\
    \ class=\"n\">num_name</span><span class=\"p\">(</span><span class=\"n\">N</span><span\
    \ class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">UPPERCASE</span><span\
    \ class=\"p\">:</span>\n        <span class=\"c1\"># Capitalize first letters</span>\n\
    \        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"\
    n\">name</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"\
    p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">name</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
  comments: '13', difficulty: '5', empty: '6', hrdifficulty: Easy, memory: '8916',
  name: Number Letter Counts, num: '17', path: 17-Number-Letter-Counts, runtime: '22'}
'170': {difficulty: '70', hrdifficulty: Easy, name: Find the largest 0 to 9 pandigital
    that can be formed by concatenating products}
'171': {difficulty: '65', hrdifficulty: Medium, name: Finding numbers for which the
    sum of the squares of the digits is a square}
'172': {difficulty: '55', hrdifficulty: Expert, name: Investigating numbers with few
    repeated digits}
'173': {difficulty: '30', hrdifficulty: Medium, name: 'Using up to one million tiles
    how many different "hollow" square laminae can be formed?'}
'174': {difficulty: '40', hrdifficulty: Easy, name: 'Counting the number of "hollow"
    square laminae that can form one, two, three, ... distinct arrangements'}
'175': {difficulty: '70', hrdifficulty: Medium, name: Fractions involving the number
    of different ways a number can be expressed as a sum of powers of 2}
'176': {difficulty: '70', hrdifficulty: Medium, name: Right-angled triangles that
    share a cathetus}
'177': {difficulty: '80', hrdifficulty: Hard, name: Integer angled Quadrilaterals}
'178': {difficulty: '55', hrdifficulty: Medium, name: Step Numbers}
'179': {difficulty: '25', hrdifficulty: Easy, name: Consecutive positive divisors}
'18': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"k\">def</span> <span class=\"nf\">parents</span><span class=\"p\">(</span><span\
    \ class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Indices of adjacent\
    \ entries to (i,j) in row above&quot;&quot;&quot;</span>\n    <span class=\"n\"\
    >out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span\
    \ class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span>\
    \ <span class=\"n\">i</span><span class=\"p\">:</span>\n        <span class=\"\
    n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"\
    p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span>\
    \ <span class=\"n\">j</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"\
    p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\
    \ <span class=\"n\">out</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">max_sum</span><span class=\"p\">(</span><span class=\"n\">arr</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Maximal path\
    \ sum down triangular array&quot;&quot;&quot;</span>\n    <span class=\"c1\">#\
    \ The previous rows max_sums</span>\n    <span class=\"n\">parent</span> <span\
    \ class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span>\
    \ <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">row</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"\
    p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n        <span\
    \ class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\
    \        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"\
    o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        \
    \    <span class=\"c1\"># Handle the case where there are no parents</span>\n\
    \            <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"\
    p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"\
    mi\">0</span><span class=\"p\">]]</span>\n        <span class=\"k\">else</span><span\
    \ class=\"p\">:</span>\n            <span class=\"c1\"># Get the higher parent\
    \ sum and add the current entry</span>\n            <span class=\"k\">for</span>\
    \ <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">elem</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"\
    p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n        \
    \        <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"\
    n\">append</span><span class=\"p\">(</span><span class=\"n\">elem</span> <span\
    \ class=\"o\">+</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span\
    \ class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">x</span><span\
    \ class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span>\
    \ <span class=\"ow\">in</span> <span class=\"n\">parents</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"\
    n\">j</span><span class=\"p\">)]))</span>\n        <span class=\"c1\"># We&#39;re\
    \ done with the row</span>\n        <span class=\"c1\"># So move it into memory\
    \ for the next row</span>\n        <span class=\"n\">parent</span> <span class=\"\
    o\">=</span> <span class=\"n\">curr</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">parent</span><span\
    \ class=\"p\">)</span>\n\n\n<span class=\"n\">T</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span\
    \ class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span\
    \ class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span>\
    \ <span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\"\
    >.</span><span class=\"n\">split</span><span class=\"p\">()))</span> <span class=\"\
    k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"\
    nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"\
    p\">)]</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span> <span\
    \ class=\"n\">max_sum</span><span class=\"p\">(</span><span class=\"n\">rows</span><span\
    \ class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
  comments: '5', difficulty: '5', empty: '4', hrdifficulty: Easy, memory: '8745',
  name: Maximum Path Sum I, num: '18', path: 18-Maximum-Path-Sum-I, runtime: '10'}
'180': {difficulty: '75', hrdifficulty: Medium, name: Rational zeros of a function
    of three variables}
'181': {difficulty: '70', hrdifficulty: Easy, name: Investigating in how many ways
    objects of two different colours can be grouped}
'182': {difficulty: '60', hrdifficulty: Expert, name: RSA encryption}
'183': {difficulty: '45', hrdifficulty: Easy, name: Maximum product of parts}
'184': {difficulty: '75', hrdifficulty: Hard, name: Triangles containing the origin}
'185': {difficulty: '55', hrdifficulty: Medium, name: Number Mind}
'186': {difficulty: '60', hrdifficulty: Easy, name: Connectedness of a network}
'187': {difficulty: '25', hrdifficulty: Medium, name: Semiprimes}
'188': {difficulty: '35', hrdifficulty: Expert, name: The hyperexponentiation of a
    number}
'189': {difficulty: '70', hrdifficulty: Easy, name: Tri-colouring a triangular grid}
'19': {difficulty: '5', hrdifficulty: Easy, name: Counting Sundays, num: '19'}
'190': {difficulty: '50', hrdifficulty: Hard, name: Maximising a weighted product}
'191': {difficulty: '35', hrdifficulty: Easy, name: Prize Strings}
'192': {difficulty: '75', hrdifficulty: Hard, name: Best Approximations}
'193': {difficulty: '55', hrdifficulty: Medium, name: Squarefree Numbers}
'194': {difficulty: '75', hrdifficulty: Expert, name: Coloured Configurations}
'195': {difficulty: '75', hrdifficulty: Hard, name: Inscribed circles of triangles
    with one angle of 60 degrees}
'196': {difficulty: '65', hrdifficulty: Medium, name: Prime triplets}
'197': {difficulty: '45', hrdifficulty: Easy, name: Investigating the behaviour of
    a recursively defined sequence}
'198': {difficulty: '80', hrdifficulty: Expert, name: Ambiguous Numbers}
'199': {difficulty: '70', hrdifficulty: Easy, name: Iterative Circle Packing}
'2': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td><td class=\"code\"\
    ><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span\
    \ class=\"nf\">next_even</span><span class=\"p\">(</span><span class=\"n\">f</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Implement eq.\
    \ (5)&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"\
    mi\">4</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"\
    p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"\
    o\">+</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"\
    mi\">0</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span\
    \ class=\"nf\">even_fib_sum</span><span class=\"p\">(</span><span class=\"n\"\
    >n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Find\
    \ the sum of even Fibonacci numbers up to n&quot;&quot;&quot;</span>\n    <span\
    \ class=\"n\">fib</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span\
    \ class=\"p\">]</span>  <span class=\"c1\"># Start with first two evens</span>\n\
    \    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\"\
    >&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span\
    \ class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\
    \    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"\
    n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span\
    \ class=\"c1\"># Go up to the maximum</span>\n    <span class=\"k\">while</span>\
    \ <span class=\"n\">next_even</span><span class=\"p\">(</span><span class=\"n\"\
    >fib</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"\
    n\">n</span><span class=\"p\">:</span>\n        <span class=\"n\">count</span>\
    \ <span class=\"o\">+=</span> <span class=\"n\">next_even</span><span class=\"\
    p\">(</span><span class=\"n\">fib</span><span class=\"p\">)</span>\n        <span\
    \ class=\"c1\"># Keep track of last two evens</span>\n        <span class=\"n\"\
    >fib</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"\
    n\">fib</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"\
    p\">],</span> <span class=\"n\">next_even</span><span class=\"p\">(</span><span\
    \ class=\"n\">fib</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"n\">count</span>\n\n\n<span class=\"n\">T</span> <span class=\"\
    o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span\
    \ class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">even_fib_sum</span><span class=\"p\">(</span><span class=\"n\">N</span><span\
    \ class=\"p\">))</span>\n</pre></div>\n</td></tr></table>", comments: '3', difficulty: '5',
  empty: '4', hrdifficulty: Easy, memory: '8783', name: Even Fibonacci Numbers, num: '2',
  path: 2-Even-Fibonacci-Numbers, runtime: '13'}
'20': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\"\
    >from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span\
    \ class=\"n\">factorial</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">digit_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\"\
    >sum</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"\
    k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"\
    nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">)])</span>\n\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">digit_sum</span><span\
    \ class=\"p\">(</span><span class=\"n\">factorial</span><span class=\"p\">(</span><span\
    \ class=\"n\">N</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></table>",
  comments: '0', difficulty: '5', empty: '4', hrdifficulty: Easy, memory: '8803',
  name: Factorial Digit Sum, num: '20', path: 20-Factorial-Digit-Sum, runtime: '10'}
'200': {difficulty: '65', hrdifficulty: Medium, name: Find the 200th prime-proof sqube
    containing the contiguous sub-string "200"}
'201': {difficulty: '65', hrdifficulty: Easy, name: Subsets with a unique sum}
'202': {difficulty: '60', hrdifficulty: Hard, name: Laserbeam}
'203': {difficulty: '25', hrdifficulty: Medium, name: Squarefree Binomial Coefficients}
'204': {difficulty: '30', hrdifficulty: Medium, name: Generalised Hamming Numbers}
'205': {difficulty: '15', hrdifficulty: Hard, name: Dice Game}
'206': {difficulty: '5', hrdifficulty: Easy, name: Concealed Square}
'207': {difficulty: '40', hrdifficulty: Easy, name: Integer partition equations}
'208': {difficulty: '70', hrdifficulty: Expert, name: Robot Walks}
'209': {difficulty: '60', hrdifficulty: Hard, name: Circular Logic}
'21': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\"\
    >from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span\
    \ class=\"n\">sqrt</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\"\
    >divisor_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sum of divisors of n&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\"\
    >0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"\
    ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">+</span><span\
    \ class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\"\
    >if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"\
    n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"\
    p\">:</span>\n            <span class=\"n\">s</span> <span class=\"o\">+=</span>\
    \ <span class=\"n\">i</span>\n            <span class=\"k\">if</span> <span class=\"\
    n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">n</span><span class=\"\
    o\">//</span><span class=\"n\">i</span><span class=\"p\">:</span>\n          \
    \      <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\"\
    >n</span><span class=\"o\">//</span><span class=\"n\">i</span>\n    <span class=\"\
    k\">return</span> <span class=\"n\">s</span> <span class=\"o\">-</span> <span\
    \ class=\"n\">n</span>\n\n\n<span class=\"n\">MAX</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">1e5</span><span\
    \ class=\"p\">)</span>\n<span class=\"c1\"># Precompute all amicable numbers</span>\n\
    <span class=\"n\">AMICABLE</span> <span class=\"o\">=</span> <span class=\"p\"\
    >[]</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"\
    ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">MAX</span><span\
    \ class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">friend</span> <span class=\"o\">=</span> <span class=\"\
    n\">divisor_sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span\
    \ class=\"p\">)</span>\n    <span class=\"c1\"># Check if x = d(d(x)) and x !=\
    \ d(x)</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span\
    \ class=\"o\">==</span> <span class=\"n\">divisor_sum</span><span class=\"p\"\
    >(</span><span class=\"n\">friend</span><span class=\"p\">)</span> <span class=\"\
    ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"\
    n\">friend</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Avoid\
    \ duplicates</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span>\
    \ <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\"\
    >AMICABLE</span><span class=\"p\">:</span>\n            <span class=\"n\">AMICABLE</span><span\
    \ class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span\
    \ class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">T</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"n\">S</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">x</span>\
    \ <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span>\
    \ <span class=\"n\">AMICABLE</span> <span class=\"k\">if</span> <span class=\"\
    n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"\
    p\">])</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">S</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
  comments: '3', difficulty: '5', empty: '5', hrdifficulty: Easy, memory: '8801',
  name: Amicable Numbers, num: '21', path: 21-Amicable-Numbers, runtime: '2038'}
'210': {difficulty: '70', hrdifficulty: Medium, name: Obtuse Angled Triangles}
'211': {difficulty: '50', hrdifficulty: Hard, name: Divisor Square Sum}
'212': {difficulty: '70', hrdifficulty: Expert, name: Combined Volume of Cuboids}
'213': {difficulty: '60', hrdifficulty: Medium, name: Flea Circus}
'214': {difficulty: '40', hrdifficulty: Hard, name: Totient Chains}
'215': {difficulty: '50', name: Crack-free Walls}
'216': {difficulty: '45', name: Investigating the primality of numbers of the form
    2n2-1}
'217': {difficulty: '70', name: Balanced Numbers}
'218': {difficulty: '55', name: Perfect right-angled triangles}
'219': {difficulty: '70', name: Skew-cost coding}
'22': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"\
    code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span>\
    \ <span class=\"nn\">sys</span>\n<span class=\"c1\"># We use this to speed up\
    \ reading stdin</span>\n<span class=\"c1\"># Because we have a lot of names to\
    \ read</span>\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span\
    \ class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span\
    \ class=\"o\">.</span><span class=\"n\">readline</span>\n\n<span class=\"c1\"\
    ># Reference alphabet</span>\n<span class=\"n\">ALPH</span> <span class=\"o\"\
    >=</span> <span class=\"s2\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\n\n\
    \n<span class=\"k\">def</span> <span class=\"nf\">score</span><span class=\"p\"\
    >(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"\
    sd\">&quot;&quot;&quot;Name score of string s&quot;&quot;&quot;</span>\n    <span\
    \ class=\"c1\"># index starts at 0</span>\n    <span class=\"c1\"># So score is\
    \ the sum of (index + 1) for each letter</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">ALPH</span><span\
    \ class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span\
    \ class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span\
    \ class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span\
    \ class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n\
    \n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span\
    \ class=\"p\">([</span><span class=\"nb\">input</span><span class=\"p\">()</span><span\
    \ class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\
    \ <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span\
    \ class=\"p\">)])</span>\n<span class=\"n\">Q</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">Q</span><span class=\"p\">):</span>\n    <span class=\"\
    c1\"># Remove any possible whitespace</span>\n    <span class=\"n\">name</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\"\
    >()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"\
    p\">()</span>\n    <span class=\"c1\"># Index starts at 0</span>\n    <span class=\"\
    n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">score</span><span\
    \ class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span><span\
    \ class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">names</span><span\
    \ class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span\
    \ class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">+</span>\
    \ <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\"\
    >print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"\
    p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '7', difficulty: '5',
  empty: '5', hrdifficulty: Easy, memory: '9288', name: Names Scores, num: '22', path: 22-Names-Scores,
  runtime: '254'}
'220': {difficulty: '55', name: Heighway Dragon}
'221': {difficulty: '65', name: Alexandrian Integers}
'222': {difficulty: '60', name: Sphere Packing}
'223': {difficulty: '70', name: Almost right-angled triangles I}
'224': {difficulty: '75', name: Almost right-angled triangles II}
'225': {difficulty: '45', name: Tribonacci non-divisors}
'226': {difficulty: '65', name: A Scoop of Blancmange}
'227': {difficulty: '65', name: The Chase}
'228': {difficulty: '70', name: Minkowski Sums}
'229': {difficulty: '70', name: Four Representations using Squares}
'23': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"\
    ><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">divisor_sum</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Sum of divisors of n&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\"\
    >0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"\
    ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span\
    \ class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">+</span><span\
    \ class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\"\
    >if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"\
    n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"\
    p\">:</span>\n            <span class=\"n\">s</span> <span class=\"o\">+=</span>\
    \ <span class=\"n\">i</span>\n            <span class=\"k\">if</span> <span class=\"\
    n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">n</span><span class=\"\
    o\">//</span><span class=\"n\">i</span><span class=\"p\">:</span>\n          \
    \      <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\"\
    >n</span><span class=\"o\">//</span><span class=\"n\">i</span>\n    <span class=\"\
    k\">return</span> <span class=\"n\">s</span> <span class=\"o\">-</span> <span\
    \ class=\"n\">n</span>\n\n\n<span class=\"c1\"># We don&#39;t need to go past\
    \ this</span>\n<span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"\
    mi\">28123</span>\n<span class=\"n\">ABUNDANT</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">set</span><span class=\"p\">()</span>\n<span class=\"k\"\
    >for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"\
    nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"\
    p\">,</span> <span class=\"n\">MAX</span><span class=\"o\">+</span><span class=\"\
    mi\">1</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span\
    \ class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">divisor_sum</span><span\
    \ class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n\
    \        <span class=\"n\">ABUNDANT</span><span class=\"o\">.</span><span class=\"\
    n\">add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"\
    p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">abundant_sum</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Can n be written as the sum of abundant\
    \ numbers?&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"\
    n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">28123</span><span\
    \ class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"\
    bp\">True</span>\n    <span class=\"c1\"># Find all the differences</span>\n \
    \   <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >set</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"\
    o\">-</span> <span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"\
    n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ABUNDANT</span><span\
    \ class=\"p\">)</span>\n    <span class=\"c1\"># Check if any of these differences\
    \ are abundant</span>\n    <span class=\"k\">if</span> <span class=\"n\">diff</span>\
    \ <span class=\"o\">&amp;</span> <span class=\"n\">ABUNDANT</span><span class=\"\
    p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\
    \    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n\n<span\
    \ class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n    <span class=\"k\">if</span> <span class=\"n\">abundant_sum</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n\
    \        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"\
    s2\">&quot;YES&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span\
    \ class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\"\
    >(</span><span class=\"s2\">&quot;NO&quot;</span><span class=\"p\">)</span>\n\
    </pre></div>\n</td></tr></table>", comments: '3', difficulty: '5', empty: '6',
  hrdifficulty: Easy, memory: '10268', name: Non-abundant Sums, num: '23', path: 23-Non-Abundant-Sums,
  runtime: '2980'}
'230': {difficulty: '50', name: Fibonacci Words}
'231': {difficulty: '40', name: The prime factorisation of binomial coefficients}
'232': {difficulty: '65', name: The Race}
'233': {difficulty: '70', name: Lattice points on a circle}
'234': {difficulty: '50', name: Semidivisible numbers}
'235': {difficulty: '40', name: An Arithmetic Geometric sequence}
'236': {difficulty: '80', name: Luxury Hampers}
'237': {difficulty: '70', name: Tours on a 4 x n playing board}
'238': {difficulty: '75', name: Infinite string tour}
'239': {difficulty: '65', name: Twenty-two Foolish Primes}
'24': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\"\
    >from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span\
    \ class=\"n\">factorial</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">lex_perm</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Find n-th lexicographic permutation\
    \ of s&quot;&quot;&quot;</span>\n    <span class=\"c1\"># Write s in &#39;factorial\
    \ base&#39;</span>\n    <span class=\"n\">n</span> <span class=\"o\">%=</span>\
    \ <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"nb\"\
    >len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"\
    p\">))</span>\n    <span class=\"n\">indices</span> <span class=\"o\">=</span>\
    \ <span class=\"p\">[]</span>\n    <span class=\"c1\"># Start with big factorials\
    \ and subtract</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"\
    n\">s</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">elem</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">//</span>\
    \ <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\"\
    >x</span><span class=\"p\">)</span>\n        <span class=\"n\">indices</span><span\
    \ class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span\
    \ class=\"n\">elem</span><span class=\"p\">)</span>\n        <span class=\"n\"\
    >n</span> <span class=\"o\">-=</span> <span class=\"n\">elem</span> <span class=\"\
    o\">*</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span\
    \ class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\"\
    >(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"\
    n\">s</span><span class=\"p\">))</span>\n    <span class=\"n\">out</span> <span\
    \ class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"\
    k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"\
    n\">indices</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Remove\
    \ the i-th remaining element</span>\n        <span class=\"c1\"># i is the coeffcient\
    \ in the</span>\n        <span class=\"c1\"># factorial base expansion of n</span>\n\
    \        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"\
    n\">s</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"\
    k\">return</span> <span class=\"n\">out</span>\n\n\n<span class=\"n\">S</span>\
    \ <span class=\"o\">=</span> <span class=\"s2\">&quot;abcdefghijklm&quot;</span>\n\
    <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n\
    \    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\"\
    >lex_perm</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"\
    p\">,</span> <span class=\"n\">S</span><span class=\"p\">))</span>\n</pre></div>\n\
    </td></tr></table>", comments: '5', difficulty: '5', empty: '4', hrdifficulty: Easy,
  memory: '8797', name: Lexicographic Permutations, num: '24', path: 24-Lexicographic-Permutations,
  runtime: '11'}
'240': {difficulty: '60', name: Top Dice}
'241': {difficulty: '80', name: Perfection Quotients}
'242': {difficulty: '75', name: Odd Triplets}
'243': {difficulty: '35', name: Resilience}
'244': {difficulty: '70', name: Sliders}
'245': {difficulty: '80', name: Coresilience}
'246': {difficulty: '80', name: Tangents to an ellipse}
'247': {difficulty: '65', name: Squares under a hyperbola}
'248': {difficulty: '70', name: "Numbers for which Euler\u2019s totient function equals\
    \ 13!"}
'249': {difficulty: '60', name: Prime Subset Sums}
'25': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"\
    ><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span>\
    \ <span class=\"kn\">import</span> <span class=\"n\">ceil</span><span class=\"\
    p\">,</span> <span class=\"n\">log</span>\n\n\n<span class=\"k\">def</span> <span\
    \ class=\"nf\">fib_dig</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;First Fibonacci\
    \ number with n digits&quot;&quot;&quot;</span>\n    <span class=\"c1\"># Implement\
    \ eq. (6)</span>\n    <span class=\"n\">PHI</span> <span class=\"o\">=</span>\
    \ <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span>\
    \ <span class=\"mi\">5</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span\
    \ class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n\
    \    <span class=\"c1\"># Handle the one place our approximation fails</span>\n\
    \    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\"\
    >==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span\
    \ class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\"\
    >return</span> <span class=\"n\">ceil</span><span class=\"p\">((</span><span class=\"\
    n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"\
    o\">+</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"\
    mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"\
    p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"\
    p\">)</span><span class=\"o\">/</span><span class=\"n\">log</span><span class=\"\
    p\">(</span><span class=\"n\">PHI</span><span class=\"p\">,</span> <span class=\"\
    mi\">10</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">T</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">fib_dig</span><span class=\"p\">(</span><span class=\"n\">N</span><span\
    \ class=\"p\">))</span>\n</pre></div>\n</td></tr></table>", comments: '2', difficulty: '5',
  empty: '4', hrdifficulty: Easy, memory: '8770', name: 1000-digit Fibonacci Number,
  num: '25', path: 25-1000-Digit-Fibonacci-Number, runtime: '10'}
'250': {difficulty: '55', name: '250250'}
'251': {difficulty: '70', name: Cardano Triplets}
'252': {difficulty: '80', name: Convex Holes}
'253': {difficulty: '75', name: Tidying up}
'254': {difficulty: '75', name: Sums of Digit Factorials}
'255': {difficulty: '75', name: Rounded Square Roots}
'256': {difficulty: '80', name: Tatami-Free Rooms}
'257': {difficulty: '85', name: Angular Bisectors}
'258': {difficulty: '70', name: A lagged Fibonacci sequence}
'259': {difficulty: '70', name: Reachable Numbers}
'26': {difficulty: '5', hrdifficulty: Easy, name: Reciprocal cycles, num: '26'}
'260': {difficulty: '70', name: Stone Game}
'261': {difficulty: '85', name: Pivotal Square Sums}
'262': {difficulty: '80', name: Mountain Range}
'263': {difficulty: '75', name: An engineers' dream come true}
'264': {difficulty: '85', name: Triangle Centres}
'265': {difficulty: '40', name: Binary Circles}
'266': {difficulty: '65', name: Pseudo Square Root}
'267': {difficulty: '50', name: Billionaire}
'268': {difficulty: '70', name: Counting numbers with at least four distinct prime
    factors less than 100}
'269': {difficulty: '80', name: Polynomials with at least one integer root}
'27': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\"\
    >from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span\
    \ class=\"n\">sqrt</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\"\
    >primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sieve of Eratosthenes&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"\
    p\">[]</span>\n    <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span\
    \ class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span>\
    \ <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span>\
    \ <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\
    \    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span\
    \ class=\"n\">p</span><span class=\"p\">]:</span>\n            <span class=\"\
    n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n \
    \           <span class=\"c1\"># Cross out all multiples of p</span>\n       \
    \     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"\
    p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"\
    p\">):</span>\n                <span class=\"n\">sieve</span><span class=\"p\"\
    >[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\"\
    >=</span> <span class=\"bp\">False</span>\n                <span class=\"k\">return</span>\
    \ <span class=\"n\">primes</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">is_prime</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Trial division\
    \ test: is n prime?&quot;&quot;&quot;</span>\n    <span class=\"c1\"># We don&#39;t\
    \ want negative primes</span>\n    <span class=\"k\">if</span> <span class=\"\
    n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"\
    p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\
    \    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"\
    nb\">any</span><span class=\"p\">([</span><span class=\"n\">n</span> <span class=\"\
    o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"\
    mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"\
    ow\">in</span>\n                    <span class=\"nb\">range</span><span class=\"\
    p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"\
    p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"\
    o\">+</span><span class=\"mi\">1</span><span class=\"p\">)])</span>\n\n\n<span\
    \ class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span\
    \ class=\"c1\"># The maximal no. of primes generated so far</span>\n<span class=\"\
    n\">COUNT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span\
    \ class=\"c1\"># The coefficients that generate COUNT primes</span>\n<span class=\"\
    n\">COEFF</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span\
    \ class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\"\
    >+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    mi\">2</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span\
    \ class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span\
    \ class=\"p\">:</span>\n        <span class=\"c1\"># Iterate over +/- a,b</span>\n\
    \        <span class=\"k\">for</span> <span class=\"n\">sgna</span> <span class=\"\
    ow\">in</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"\
    p\">]:</span>\n            <span class=\"k\">for</span> <span class=\"n\">sgnb</span>\
    \ <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">]:</span>\n                <span class=\"c1\"># No. of primes given\
    \ by a,b</span>\n                <span class=\"n\">count</span> <span class=\"\
    o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"c1\">#\
    \ The quadratic given by a,b</span>\n\n                <span class=\"k\">def</span>\
    \ <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span\
    \ class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">x</span><span\
    \ class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span\
    \ class=\"n\">sgna</span><span class=\"o\">*</span><span class=\"n\">a</span><span\
    \ class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span\
    \ class=\"n\">sgnb</span><span class=\"o\">*</span><span class=\"n\">b</span>\n\
    \                <span class=\"c1\"># Keep going until f(x) is not prime</span>\n\
    \                <span class=\"k\">while</span> <span class=\"n\">f</span><span\
    \ class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\
    \ <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\"\
    >and</span> <span class=\"n\">is_prime</span><span class=\"p\">(</span><span class=\"\
    n\">f</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"\
    p\">)):</span>\n                    <span class=\"n\">count</span> <span class=\"\
    o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"c1\"\
    ># Only keep the maximum so far</span>\n                <span class=\"k\">if</span>\
    \ <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"\
    n\">COUNT</span><span class=\"p\">:</span>\n                    <span class=\"\
    n\">COUNT</span> <span class=\"o\">=</span> <span class=\"n\">count</span>\n \
    \                   <span class=\"c1\"># Update coefficients</span>\n        \
    \            <span class=\"n\">COEFF</span> <span class=\"o\">=</span> <span class=\"\
    p\">[</span><span class=\"n\">sgna</span><span class=\"o\">*</span><span class=\"\
    n\">a</span><span class=\"p\">,</span> <span class=\"n\">sgnb</span><span class=\"\
    o\">*</span><span class=\"n\">b</span><span class=\"p\">]</span>\n<span class=\"\
    k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;{} {}&quot;</span><span\
    \ class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span\
    \ class=\"n\">COEFF</span><span class=\"p\">[</span><span class=\"mi\">0</span><span\
    \ class=\"p\">],</span> <span class=\"n\">COEFF</span><span class=\"p\">[</span><span\
    \ class=\"mi\">1</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></table>",
  comments: '10', difficulty: '5', empty: '7', hrdifficulty: Easy, memory: '8848',
  name: Quadratic Primes, num: '27', path: 27-Quadratic-Primes, runtime: '1170'}
'270': {difficulty: '80', name: Cutting Squares}
'271': {difficulty: '60', name: 'Modular Cubes, part 1'}
'272': {difficulty: '80', name: 'Modular Cubes, part 2'}
'273': {difficulty: '70', name: Sum of Squares}
'274': {difficulty: '65', name: Divisibility Multipliers}
'275': {difficulty: '85', name: Balanced Sculptures}
'276': {difficulty: '75', name: Primitive Triangles}
'277': {difficulty: '35', name: A Modified Collatz sequence}
'278': {difficulty: '50', name: Linear Combinations of Semiprimes}
'279': {difficulty: '60', name: Triangles with integral sides and an integral angle}
'28': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"k\">def</span> <span class=\"nf\">inv</span><span class=\"p\">(</span><span\
    \ class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">m</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Modular inverse\
    \ with Fermat&#39;s Little Theorem&quot;&quot;&quot;</span>\n    <span class=\"\
    k\">return</span> <span class=\"nb\">pow</span><span class=\"p\">(</span><span\
    \ class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">m</span><span\
    \ class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span\
    \ class=\"n\">m</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span>\
    \ <span class=\"nf\">diag_sum</span><span class=\"p\">(</span><span class=\"n\"\
    >n</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\"\
    >):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Implement eq. (4), mod p&quot;&quot;&quot;</span>\n\
    \    <span class=\"k\">return</span> <span class=\"p\">((</span><span class=\"\
    mi\">4</span><span class=\"o\">*</span><span class=\"nb\">pow</span><span class=\"\
    p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"\
    mi\">3</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"\
    p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"\
    o\">*</span><span class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"\
    p\">,</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"\
    o\">+</span> <span class=\"mi\">8</span><span class=\"o\">*</span><span class=\"\
    n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">9</span><span class=\"\
    p\">)</span><span class=\"o\">*</span><span class=\"n\">inv</span><span class=\"\
    p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"\
    n\">p</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"\
    n\">p</span>\n\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span>\
    \ <span class=\"mi\">1000000007</span>\n<span class=\"k\">for</span> <span class=\"\
    n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">diag_sum</span><span class=\"p\">(</span><span class=\"n\">N</span><span\
    \ class=\"p\">,</span> <span class=\"n\">P</span><span class=\"p\">))</span>\n\
    </pre></div>\n</td></tr></table>", comments: '0', difficulty: '5', empty: '4',
  hrdifficulty: Easy, memory: '8806', name: Number Spiral Diagonals, num: '28', path: 28-Number-Spiral-Diagonals,
  runtime: '10'}
'280': {difficulty: '65', name: Ant and seeds}
'281': {difficulty: '55', name: Pizza Toppings}
'282': {difficulty: '70', name: The Ackermann function}
'283': {difficulty: '75', name: Integer sided triangles for which the  area/perimeter
    ratio is integral}
'284': {difficulty: '55', name: Steady Squares}
'285': {difficulty: '55', name: Pythagorean odds}
'286': {difficulty: '50', name: Scoring probabilities}
'287': {difficulty: '40', name: Quadtree encoding (a simple compression algorithm)}
'288': {difficulty: '35', name: An enormous factorial}
'289': {difficulty: '90', name: Eulerian Cycles}
'29': {difficulty: '5', hrdifficulty: Easy, name: Distinct powers, num: '29'}
'290': {difficulty: '50', name: Digital Signature}
'291': {difficulty: '45', name: Panaitopol Primes}
'292': {difficulty: '65', name: Pythagorean Polygons}
'293': {difficulty: '30', name: Pseudo-Fortunate Numbers}
'294': {difficulty: '45', name: 'Sum of digits - experience #23'}
'295': {difficulty: '75', name: Lenticular holes}
'296': {difficulty: '60', name: Angular Bisector and Tangent}
'297': {difficulty: '35', name: Zeckendorf Representation}
'298': {difficulty: '60', name: Selective Amnesia}
'299': {difficulty: '60', name: Three similar triangles}
'3': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sieve\
    \ of Eratosthenes&quot;&quot;&quot;</span>\n    <span class=\"n\">primes</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\"\
    >sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"\
    bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"\
    p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span\
    \ class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span\
    \ class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"\
    p\">]:</span>\n            <span class=\"n\">primes</span><span class=\"o\">.</span><span\
    \ class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span\
    \ class=\"p\">)</span>\n            <span class=\"c1\"># Cross out all multiples\
    \ of p</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"\
    n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    n\">p</span><span class=\"p\">):</span>\n                <span class=\"n\">sieve</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span\
    \ class=\"o\">=</span> <span class=\"bp\">False</span>\n    <span class=\"k\"\
    >return</span> <span class=\"n\">primes</span>\n\n\n<span class=\"k\">def</span>\
    \ <span class=\"nf\">prime_factors</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Finds\
    \ the prime factors of n&quot;&quot;&quot;</span>\n    <span class=\"n\">factors</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\"\
    >P</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"\
    p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"\
    p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">p</span> <span\
    \ class=\"ow\">in</span> <span class=\"n\">P</span><span class=\"p\">:</span>\n\
    \        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"\
    o\">%</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"\
    mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">factors</span><span\
    \ class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span\
    \ class=\"n\">p</span><span class=\"p\">)</span>\n            <span class=\"c1\"\
    ># Divide out all factors of p</span>\n            <span class=\"k\">while</span>\
    \ <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">p</span>\
    \ <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\
    \                <span class=\"n\">n</span> <span class=\"o\">//=</span> <span\
    \ class=\"n\">p</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span>\
    \ <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n\
    \        <span class=\"n\">factors</span><span class=\"o\">.</span><span class=\"\
    n\">append</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">factors</span>\n\
    \n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">prime_factors</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n\
    \    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\"\
    >ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '2',
  difficulty: '5', empty: '4', hrdifficulty: Easy, memory: '17120', name: Largest
    Prime Factor, num: '3', path: 3-Largest-Prime-Factor, runtime: '163'}
'30': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"\
    ><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span\
    \ class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"\
    n\">combinations_with_replacement</span>\n<span class=\"kn\">from</span> <span\
    \ class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"\
    n\">Counter</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n\n<span class=\"n\">DIGITS</span> <span class=\"o\"\
    >=</span> <span class=\"p\">{}</span>\n<span class=\"c1\"># Correspondence from\
    \ x^N -&gt; x</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n\t<span class=\"\
    n\">DIGITS</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"\
    o\">**</span><span class=\"n\">N</span><span class=\"p\">]</span> <span class=\"\
    o\">=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">ans</span> <span\
    \ class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"c1\"># No answer\
    \ has more than 6 digits</span>\n<span class=\"k\">for</span> <span class=\"n\"\
    >k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"\
    p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"\
    mi\">7</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Choose k elements\
    \ from {0^N,...9^N} with replacement</span>\n\t<span class=\"k\">for</span> <span\
    \ class=\"n\">candidate</span> <span class=\"ow\">in</span> <span class=\"n\"\
    >combinations_with_replacement</span><span class=\"p\">(</span><span class=\"\
    n\">DIGITS</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"\
    p\">):</span>\n\t\t<span class=\"c1\"># Get multiset of N-th roots of elements\
    \ of combination</span>\n\t\t<span class=\"n\">digits_used</span> <span class=\"\
    o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"\
    nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span\
    \ class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">DIGITS</span><span\
    \ class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span><span\
    \ class=\"n\">candidate</span><span class=\"p\">))</span>\n\t\t<span class=\"\
    c1\"># Candidate sum</span>\n\t\t<span class=\"n\">S</span> <span class=\"o\"\
    >=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"\
    nb\">sum</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span\
    \ class=\"p\">))</span>\n\t\t<span class=\"c1\"># Get multiset of digits of candidate\
    \ sum</span>\n\t\t<span class=\"n\">powers_used</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"nb\"\
    >map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"\
    p\">,</span><span class=\"n\">S</span><span class=\"p\">))</span>\n\t\t<span class=\"\
    k\">if</span> <span class=\"n\">digits_used</span> <span class=\"o\">==</span>\
    \ <span class=\"n\">powers_used</span><span class=\"p\">:</span>\n\t\t\t<span\
    \ class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n<span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span\
    \ class=\"p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '6', difficulty: '5',
  empty: '2', hrdifficulty: Easy, memory: '9082', name: Digit Fifth Powers, num: '30',
  path: 30-Digit-Fifth-Powers, runtime: '92'}
'300': {difficulty: '50', name: Protein folding}
'301': {difficulty: '15', name: Nim}
'302': {difficulty: '60', name: Strong Achilles Numbers}
'303': {difficulty: '35', name: Multiples with small digits}
'304': {difficulty: '35', name: Primonacci}
'305': {difficulty: '60', name: Reflexive Position}
'306': {difficulty: '55', name: Paper-strip Game}
'307': {difficulty: '35', name: Chip Defects}
'308': {difficulty: '60', name: An amazing Prime-generating Automaton}
'309': {difficulty: '50', name: Integer Ladders}
'31': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"\
    highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\"\
    >count</span><span class=\"p\">(</span><span class=\"n\">coins</span><span class=\"\
    p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span\
    \ class=\"sd\">&quot;&quot;&quot;Number of ways to write each m &lt;= n</span>\n\
    <span class=\"sd\">    as a sum of elements of coins&quot;&quot;&quot;</span>\n\
    \    <span class=\"c1\"># Initialize dp array</span>\n    <span class=\"n\">dp</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span>\
    \ <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n\
    \    <span class=\"c1\"># There is only one way to make nothing</span>\n    <span\
    \ class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span\
    \ class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\
    \    <span class=\"k\">for</span> <span class=\"n\">coin</span> <span class=\"\
    ow\">in</span> <span class=\"n\">coins</span><span class=\"p\">:</span>\n    \
    \    <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"\
    ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"n\">coin</span><span class=\"p\">,</span> <span class=\"n\">n</span><span\
    \ class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\
    \            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"\
    n\">val</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"\
    p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"\
    n\">val</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"\
    n\">dp</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"\
    o\">-</span><span class=\"n\">coin</span><span class=\"p\">])</span> <span class=\"\
    o\">%</span> <span class=\"mi\">1000000007</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"n\">dp</span>\n\n\n<span class=\"n\">COINS</span> <span class=\"\
    o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"\
    p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"\
    mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"\
    p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"\
    mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"\
    p\">,</span> <span class=\"mi\">200</span><span class=\"p\">]</span>\n<span class=\"\
    c1\"># N &lt;= 10^5</span>\n<span class=\"n\">COUNT</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">COINS</span><span\
    \ class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"mf\">1e5</span><span class=\"p\">))</span>\n<span class=\"n\">T</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">COUNT</span><span class=\"p\">[</span><span class=\"n\">N</span><span\
    \ class=\"p\">])</span>\n</pre></div>\n</td></tr></table>", comments: '3', difficulty: '5',
  empty: '2', hrdifficulty: Easy, memory: '12531', name: Coin Sums, num: '31', path: 31-Coin-Sums,
  runtime: '152'}
'310': {difficulty: '40', name: Nim Square}
'311': {difficulty: '70', name: Biclinic Integral Quadrilaterals}
'312': {difficulty: '50', name: "Cyclic paths on Sierpi\u0144ski graphs"}
'313': {difficulty: '30', name: Sliding game}
'314': {difficulty: '80', name: The Mouse on the Moon}
'315': {difficulty: '20', name: Digital root clocks}
'316': {difficulty: '55', name: Numbers in decimal expansions}
'317': {difficulty: '35', name: Firecracker}
'318': {difficulty: '50', name: 2011 nines}
'319': {difficulty: '90', name: Bounded Sequences}
'32': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"\
    ><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">itertools</span>\
    \ <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span\
    \ class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    \n<span class=\"c1\"># Get all pandigital numbers</span>\n<span class=\"n\">PANDIGITAL</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">permutations</span><span class=\"\
    p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span\
    \ class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span\
    \ class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\"\
    >+</span><span class=\"mi\">1</span><span class=\"p\">))))</span>\n<span class=\"\
    c1\"># Use set to avoid duplicates</span>\n<span class=\"n\">PROD</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">perm</span> <span class=\"ow\"\
    >in</span> <span class=\"n\">PANDIGITAL</span><span class=\"p\">:</span>\n   \
    \ <span class=\"c1\"># Split into 3 parts</span>\n    <span class=\"c1\"># Make\
    \ sure end of second part is after beginning</span>\n    <span class=\"c1\">#\
    \ j &gt; i</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    n\">N</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span>\
    \ <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span\
    \ class=\"p\">):</span>\n            <span class=\"n\">x</span> <span class=\"\
    o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span\
    \ class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">perm</span><span\
    \ class=\"p\">)</span>\n            <span class=\"c1\"># Check if three parts\
    \ in order are valid</span>\n            <span class=\"k\">if</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"\
    p\">[:</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"\
    o\">*</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"\
    p\">:</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"\
    o\">==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    n\">x</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"\
    p\">:]):</span>\n                <span class=\"n\">PROD</span><span class=\"o\"\
    >.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"\
    p\">[</span><span class=\"n\">j</span><span class=\"p\">:]))</span>\n<span class=\"\
    k\">print</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"\
    p\">(</span><span class=\"n\">PROD</span><span class=\"p\">))</span>\n</pre></div>\n\
    </td></tr></table>", comments: '6', difficulty: '5', empty: '2', hrdifficulty: Easy,
  memory: '8810', name: Pandigital Products, num: '32', path: 32-Pandigital-Products,
  runtime: '8495'}
'320': {difficulty: '50', name: Factorials divisible by a huge integer}
'321': {difficulty: '30', name: Swapping Counters}
'322': {difficulty: '70', name: Binomial coefficients divisible by 10}
'323': {difficulty: '20', name: Bitwise-OR operations on random integers}
'324': {difficulty: '50', name: Building a tower}
'325': {difficulty: '80', name: Stone Game II}
'326': {difficulty: '55', name: Modulo Summations}
'327': {difficulty: '40', name: Rooms of Doom}
'328': {difficulty: '95', name: Lowest-cost Search}
'329': {difficulty: '25', name: Prime Frog}
'33': {difficulty: '5', hrdifficulty: Hard, name: Digit cancelling fractions, num: '33'}
'330': {difficulty: '70', name: Euler's Number}
'331': {difficulty: '100', name: Cross flips}
'332': {difficulty: '50', name: Spherical triangles}
'333': {difficulty: '35', name: Special partitions}
'334': {difficulty: '65', name: Spilling the beans}
'335': {difficulty: '65', name: Gathering the beans}
'336': {difficulty: '25', name: Maximix Arrangements}
'337': {difficulty: '70', name: Totient Stairstep Sequences}
'338': {difficulty: '95', name: Cutting Rectangular Grid Paper}
'339': {difficulty: '70', name: Peredur fab Efrawg}
'34': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"\
    code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span>\
    \ <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"\
    n\">combinations_with_replacement</span>\n<span class=\"kn\">from</span> <span\
    \ class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"\
    n\">Counter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span>\
    \ <span class=\"kn\">import</span> <span class=\"n\">factorial</span>\n\n<span\
    \ class=\"n\">DIGITS</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\
    <span class=\"c1\"># Correspondence from n! -&gt; n</span>\n<span class=\"c1\"\
    ># Precompute these to save time</span>\n<span class=\"k\">for</span> <span class=\"\
    n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">DIGITS</span><span class=\"p\">[</span><span class=\"n\"\
    >n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"\
    n\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">)</span>\n\n<span class=\"n\">ans</span> <span class=\"o\">=</span>\
    \ <span class=\"mi\">0</span>\n<span class=\"c1\"># Upper bound of 7 digits</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"\
    p\">):</span>\n    <span class=\"c1\"># Choose k elements from {0,...,9} with\
    \ replacement</span>\n    <span class=\"k\">for</span> <span class=\"n\">candidate</span>\
    \ <span class=\"ow\">in</span> <span class=\"n\">combinations_with_replacement</span><span\
    \ class=\"p\">(</span><span class=\"n\">DIGITS</span><span class=\"p\">,</span>\
    \ <span class=\"n\">k</span><span class=\"p\">):</span>\n        <span class=\"\
    c1\"># Get multiset of candidate digits</span>\n        <span class=\"n\">digits_used</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\"\
    >(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"\
    nb\">str</span><span class=\"p\">,</span> <span class=\"n\">candidate</span><span\
    \ class=\"p\">))</span>\n        <span class=\"c1\"># Calculate candidate factorial\
    \ sum</span>\n        <span class=\"n\">S</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">factorial</span><span\
    \ class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span\
    \ class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span>\
    \ <span class=\"n\">candidate</span><span class=\"p\">])</span>\n        <span\
    \ class=\"c1\"># Get multiset of digits in ^</span>\n        <span class=\"c1\"\
    ># Are these digit multisets the same?</span>\n        <span class=\"n\">factorials_used</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\"\
    >(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"\
    n\">S</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span\
    \ class=\"n\">digits_used</span> <span class=\"o\">==</span> <span class=\"n\"\
    >factorials_used</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">S</span>\n<span class=\"\
    k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"\
    p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '8', difficulty: '5',
  empty: '2', hrdifficulty: Easy, memory: '8871', name: Digit Factorials, num: '34',
  path: 34-Digit-Factorials, runtime: '200'}
'340': {difficulty: '30', name: Crazy Function}
'341': {difficulty: '45', name: Golomb's self-describing sequence}
'342': {difficulty: '50', name: The totient of a square is a cube}
'343': {difficulty: '35', name: Fractional Sequences}
'344': {difficulty: '100', name: Silver dollar game}
'345': {difficulty: '15', name: Matrix Sum}
'346': {difficulty: '15', name: Strong Repunits}
'347': {difficulty: '15', name: Largest integer divisible by two primes}
'348': {difficulty: '25', name: Sum of a square and a cube}
'349': {difficulty: '35', name: Langton's ant}
'35': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42</pre></div></td><td class=\"code\"><div\
    \ class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"\
    nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sieve of Eratosthenes&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"\
    p\">[]</span>\n    <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span\
    \ class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span>\
    \ <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span>\
    \ <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\
    \    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span\
    \ class=\"n\">p</span><span class=\"p\">]:</span>\n            <span class=\"\
    n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n \
    \           <span class=\"c1\"># Cross out all multiples of p</span>\n       \
    \     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"\
    p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"\
    p\">):</span>\n                <span class=\"n\">sieve</span><span class=\"p\"\
    >[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\"\
    >=</span> <span class=\"bp\">False</span>\n                <span class=\"k\">return</span>\
    \ <span class=\"n\">primes</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">rotations</span><span class=\"p\">(</span><span class=\"n\">x</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Find all rotations\
    \ of integer x&quot;&quot;&quot;</span>\n    <span class=\"n\">x</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span\
    \ class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">out</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\"\
    >for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"\
    nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span\
    \ class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)):</span>\n\
    \        <span class=\"c1\"># Move last char in x to front</span>\n        <span\
    \ class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span\
    \ class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span\
    \ class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span\
    \ class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span\
    \ class=\"p\">]</span>\n        <span class=\"n\">out</span><span class=\"o\"\
    >.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"\
    p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">out</span>\n\
    \n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span\
    \ class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"mf\">1e6</span><span class=\"p\">))</span>\n<span class=\"n\">CIRCULAR</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\
    <span class=\"c1\"># Make sure we don&#39;t exceed upper bound</span>\n<span class=\"\
    k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"\
    p\">[</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"\
    n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">P</span> <span class=\"\
    k\">if</span> <span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"\
    n\">N</span><span class=\"p\">]:</span>\n    <span class=\"c1\"># Exclude primes\
    \ with even digits or 5; they can&#39;t be circular</span>\n    <span class=\"\
    c1\"># Except when x = 2 or x = 5; include those, because they are circular</span>\n\
    \    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\"\
    >(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"\
    n\">x</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"\
    mi\">1</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span\
    \ class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">d</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\"\
    >(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\"\
    >for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"\
    s2\">&quot;024568&quot;</span><span class=\"p\">]):</span>\n        <span class=\"\
    c1\"># Avoid duplicates</span>\n        <span class=\"k\">if</span> <span class=\"\
    n\">x</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span\
    \ class=\"n\">CIRCULAR</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">ROT</span> <span class=\"o\">=</span> <span class=\"n\">rotations</span><span\
    \ class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n \
    \           <span class=\"c1\"># Make sure all of the rotations are prime</span>\n\
    \            <span class=\"k\">if</span> <span class=\"nb\">all</span><span class=\"\
    p\">([</span><span class=\"n\">rot</span> <span class=\"ow\">in</span> <span class=\"\
    n\">P</span> <span class=\"k\">for</span> <span class=\"n\">rot</span> <span class=\"\
    ow\">in</span> <span class=\"n\">ROT</span><span class=\"p\">]):</span>\n    \
    \            <span class=\"k\">for</span> <span class=\"n\">rot</span> <span class=\"\
    ow\">in</span> <span class=\"n\">ROT</span><span class=\"p\">:</span>\n      \
    \              <span class=\"c1\"># Add the rotations that are less than N</span>\n\
    \                    <span class=\"k\">if</span> <span class=\"n\">rot</span>\
    \ <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">:</span>\n\
    \                        <span class=\"n\">CIRCULAR</span><span class=\"o\">.</span><span\
    \ class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">rot</span><span\
    \ class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">CIRCULAR</span><span\
    \ class=\"p\">))</span>\n</pre></div>\n</td></tr></table>", comments: '8', difficulty: '5',
  empty: '4', hrdifficulty: Easy, memory: '19478', name: Circular Primes, num: '35',
  path: 35-Circular-Primes, runtime: '4753'}
'350': {difficulty: '60', name: Constraining the least greatest and the greatest least}
'351': {difficulty: '25', name: Hexagonal orchards}
'352': {difficulty: '55', name: Blood tests}
'353': {difficulty: '50', name: Risky moon}
'354': {difficulty: '65', name: Distances in a bee's honeycomb}
'355': {difficulty: '70', name: Maximal coprime subset}
'356': {difficulty: '60', name: Largest roots of cubic polynomials}
'357': {difficulty: '10', name: Prime generating integers}
'358': {difficulty: '25', name: Cyclic numbers}
'359': {difficulty: '25', name: Hilbert's New Hotel}
'36': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"\
    highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\"\
    >math</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n\n\
    \n<span class=\"k\">def</span> <span class=\"nf\">base</span><span class=\"p\"\
    >(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\"\
    >b</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Write\
    \ (base 10) integer n in base b&quot;&quot;&quot;</span>\n    <span class=\"n\"\
    >out</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\
    \    <span class=\"c1\"># The maximal place of the first digit</span>\n    <span\
    \ class=\"n\">max_exponent</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"\
    p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"\
    n\">b</span><span class=\"p\">))</span>\n    <span class=\"c1\"># Starting from\
    \ the rightmost place ^</span>\n    <span class=\"k\">for</span> <span class=\"\
    n\">exp</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">max_exponent</span><span class=\"p\">,</span>\
    \ <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\
    \ <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\
    \        <span class=\"c1\"># See how many times b**exp goes into n</span>\n \
    \       <span class=\"c1\"># Subtract it off and keep going</span>\n        <span\
    \ class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"nb\">str</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">//</span> <span\
    \ class=\"n\">b</span><span class=\"o\">**</span><span class=\"n\">exp</span><span\
    \ class=\"p\">)</span>\n        <span class=\"n\">n</span> <span class=\"o\">%=</span>\
    \ <span class=\"n\">b</span><span class=\"o\">**</span><span class=\"n\">exp</span>\n\
    \    <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n\n<span class=\"\
    k\">def</span> <span class=\"nf\">pals</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Palindromes with &lt;=\
    \ n digits &lt; m&quot;&quot;&quot;</span>\n    <span class=\"c1\"># Initialize\
    \ with one digit palindromes</span>\n    <span class=\"c1\"># Note: 0 is not natural\
    \ in this problem</span>\n    <span class=\"n\">PALS</span> <span class=\"o\"\
    >=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"\
    p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"\
    mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"\
    p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"\
    mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"\
    p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"\
    mi\">9</span><span class=\"p\">]</span>\n    <span class=\"c1\"># Get all numbers\
    \ with at most n/2 digits</span>\n    <span class=\"n\">first_half</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span\
    \ class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span\
    \ class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span\
    \ class=\"o\">**</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"o\">//</span><span class=\"mi\">2</span> <span class=\"o\">+</span>\
    \ <span class=\"mi\">1</span><span class=\"p\">))))</span>\n    <span class=\"\
    c1\"># This will be the &#39;middle of the sandwich&#39;</span>\n    <span class=\"\
    n\">mid</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0123456789&quot;</span>\n\
    \    <span class=\"c1\"># Odd-length palindromes</span>\n    <span class=\"c1\"\
    ># Add the first half, sandwich in the middle, reverse the first half</span>\n\
    \    <span class=\"n\">PALS</span> <span class=\"o\">+=</span> <span class=\"\
    p\">[</span><span class=\"n\">first_half</span><span class=\"p\">[</span><span\
    \ class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span\
    \ class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">first_half</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][::</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\
    \             <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"\
    ow\">in</span> <span class=\"n\">mid</span> <span class=\"k\">for</span> <span\
    \ class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span\
    \ class=\"n\">first_half</span><span class=\"p\">))]</span>\n    <span class=\"\
    c1\"># Even length palindromes</span>\n    <span class=\"c1\"># Same as above,\
    \ but without middle</span>\n    <span class=\"n\">PALS</span> <span class=\"\
    o\">+=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"\
    o\">+</span> <span class=\"n\">x</span><span class=\"p\">[::</span><span class=\"\
    o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"\
    k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"\
    n\">first_half</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">PALS</span>\
    \ <span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span>\
    \ <span class=\"n\">m</span><span class=\"p\">]</span>\n\n\n<span class=\"n\"\
    >N</span><span class=\"p\">,</span> <span class=\"n\">K</span> <span class=\"\
    o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"\
    nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span\
    \ class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span\
    \ class=\"p\">())</span>\n<span class=\"c1\"># 10-palindromes with as many digits\
    \ as N less than N</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">pals</span><span class=\"p\">(</span><span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">(</span><span\
    \ class=\"n\">N</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span\
    \ class=\"p\">)),</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n\
    <span class=\"c1\"># Check if 10-palindrome is also k-palindromic</span>\n<span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span\
    \ class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">P</span>\
    \ <span class=\"k\">if</span> <span class=\"n\">base</span><span class=\"p\">(</span><span\
    \ class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">K</span><span\
    \ class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">base</span><span\
    \ class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span\
    \ class=\"n\">K</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">]]))</span>\n</pre></div>\n</td></tr></table>",
  comments: '14', difficulty: '5', empty: '6', hrdifficulty: Easy, memory: '9550',
  name: Double Base Palindromes, num: '36', path: 36-Double-Base-Palindromes, runtime: '70'}
'360': {difficulty: '50', name: Scary Sphere}
'361': {difficulty: '90', name: Subsequence of Thue-Morse sequence}
'362': {difficulty: '70', name: Squarefree factors}
'363': {difficulty: '35', name: "B\xE9zier Curves"}
'364': {difficulty: '50', name: Comfortable distance}
'365': {difficulty: '40', name: A huge binomial coefficient}
'366': {difficulty: '40', name: Stone Game III}
'367': {difficulty: '55', name: Bozo sort}
'368': {difficulty: '45', name: A Kempner-like series}
'369': {difficulty: '60', name: Badugi}
'37': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"\
    highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\"\
    >math</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n\n\
    \n<span class=\"k\">def</span> <span class=\"nf\">truncatable_primes</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Find truncatable prims &lt; n&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"mi\"\
    >0</span>\n    <span class=\"n\">primes</span> <span class=\"o\">=</span> <span\
    \ class=\"p\">[]</span>\n    <span class=\"n\">sieve</span> <span class=\"o\"\
    >=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"\
    p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"\
    n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"\
    p\">)</span>\n    <span class=\"n\">sieve</span><span class=\"p\">[</span><span\
    \ class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span\
    \ class=\"bp\">False</span>\n    <span class=\"k\">for</span> <span class=\"n\"\
    >p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"\
    p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"\
    n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"\
    p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">sieve</span><span\
    \ class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]:</span>\n\
    \            <span class=\"c1\"># When a prime is found, mark all its multiples</span>\n\
    \            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"\
    ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span\
    \ class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span\
    \ class=\"p\">):</span>\n                <span class=\"n\">sieve</span><span class=\"\
    p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"\
    o\">=</span> <span class=\"bp\">False</span>\n            <span class=\"c1\">#\
    \ Make sure it&#39;s truncatable (2,3,5,7 are not)</span>\n            <span class=\"\
    k\">if</span> <span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"\
    mi\">10</span><span class=\"p\">:</span>\n                <span class=\"c1\">#\
    \ Right truncations</span>\n                <span class=\"c1\"># Chop off rightmost\
    \ digit as long as truncation is prime</span>\n                <span class=\"\
    n\">right</span> <span class=\"o\">=</span> <span class=\"n\">p</span>\n     \
    \           <span class=\"k\">while</span> <span class=\"n\">right</span> <span\
    \ class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span>\
    \ <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">right</span><span\
    \ class=\"p\">]:</span>\n                    <span class=\"n\">right</span> <span\
    \ class=\"o\">//=</span> <span class=\"mi\">10</span>\n                <span class=\"\
    c1\"># Left truncations</span>\n                <span class=\"n\">left</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">p</span>\n                <span\
    \ class=\"c1\"># Get leftmost digit</span>\n                <span class=\"n\"\
    >digit</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n       \
    \         <span class=\"k\">while</span> <span class=\"mi\">10</span><span class=\"\
    o\">*</span><span class=\"n\">digit</span> <span class=\"o\">&lt;=</span> <span\
    \ class=\"n\">left</span><span class=\"p\">:</span>\n                    <span\
    \ class=\"n\">digit</span> <span class=\"o\">*=</span> <span class=\"mi\">10</span>\n\
    \                <span class=\"c1\"># Chop off leftmost dig until truncation is\
    \ not prime</span>\n                <span class=\"k\">while</span> <span class=\"\
    n\">left</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span\
    \ class=\"ow\">and</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span\
    \ class=\"n\">left</span><span class=\"p\">]:</span>\n                    <span\
    \ class=\"n\">left</span> <span class=\"o\">%=</span> <span class=\"n\">digit</span>\n\
    \                    <span class=\"n\">digit</span> <span class=\"o\">//=</span>\
    \ <span class=\"mi\">10</span>\n                <span class=\"c1\"># Is nothing\
    \ left after right and left truncations?</span>\n                <span class=\"\
    c1\"># Incomplete truncation -&gt; non-truncatable prime</span>\n            \
    \    <span class=\"k\">if</span> <span class=\"n\">left</span> <span class=\"\
    o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span\
    \ class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span\
    \ class=\"p\">:</span>\n                    <span class=\"n\">S</span> <span class=\"\
    o\">+=</span> <span class=\"n\">p</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"n\">S</span>\n\n\n<span class=\"n\">N</span> <span class=\"o\"\
    >=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span\
    \ class=\"p\">(</span><span class=\"n\">truncatable_primes</span><span class=\"\
    p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n\
    </td></tr></table>", comments: '9', difficulty: '5', empty: '4', hrdifficulty: Easy,
  memory: '16419', name: Truncatable Primes, num: '37', path: 37-Truncatable-Primes,
  runtime: '347'}
'370': {difficulty: '65', name: Geometric triangles}
'371': {difficulty: '30', name: Licence plates}
'372': {difficulty: '60', name: Pencils of rays}
'373': {difficulty: '75', name: Circumscribed Circles}
'374': {difficulty: '40', name: Maximum Integer Partition Product}
'375': {difficulty: '40', name: Minimum of subsequences}
'376': {difficulty: '70', name: Nontransitive sets of dice}
'377': {difficulty: '45', name: 'Sum of digits, experience 13'}
'378': {difficulty: '35', name: Triangle Triples}
'379': {difficulty: '70', name: Least common multiple count}
'38': {difficulty: '5', hrdifficulty: Easy, name: Pandigital multiples, num: '38'}
'380': {difficulty: '60', name: Amazing Mazes!}
'381': {difficulty: '15', name: (prime-k) factorial}
'382': {difficulty: '60', name: Generating polygons}
'383': {difficulty: '50', name: Divisibility comparison between factorials}
'384': {difficulty: '65', name: Rudin-Shapiro sequence}
'385': {difficulty: '70', name: Ellipses inside triangles}
'386': {difficulty: '40', name: Maximum length of an antichain}
'387': {difficulty: '10', name: Harshad Numbers}
'388': {difficulty: '50', name: Distinct Lines}
'389': {difficulty: '30', name: Platonic Dice}
'39': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\
    53\n54\n55\n56</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span>\
    \ <span class=\"n\">sqrt</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"\
    p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span\
    \ class=\"sd\">&quot;&quot;&quot;Euclid&#39;s algorithm&quot;&quot;&quot;</span>\n\
    \    <span class=\"k\">while</span> <span class=\"n\">b</span><span class=\"p\"\
    >:</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span\
    \ class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span\
    \ class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span\
    \ class=\"n\">b</span>\n    <span class=\"k\">return</span> <span class=\"n\"\
    >a</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">bs</span><span\
    \ class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span\
    \ class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span\
    \ class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Binary Search arr from index l to r\
    \ for x&quot;&quot;&quot;</span>\n    <span class=\"k\">while</span> <span class=\"\
    n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"\
    p\">:</span>\n        <span class=\"n\">mid</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span\
    \ class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span\
    \ class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span>\n\
    \        <span class=\"c1\"># Is N in the array?</span>\n        <span class=\"\
    k\">if</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"\
    n\">mid</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"\
    n\">x</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\
    \ <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\
    \        <span class=\"k\">elif</span> <span class=\"n\">arr</span><span class=\"\
    p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"\
    o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n       \
    \     <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\"\
    >mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span\
    \ class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"\
    o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"k\">return</span>\
    \ <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">r</span><span\
    \ class=\"p\">]</span>\n\n\n<span class=\"n\">MAX</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">5e6</span><span\
    \ class=\"p\">)</span>\n<span class=\"n\">maxm</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span\
    \ class=\"p\">(</span><span class=\"n\">MAX</span><span class=\"o\">//</span><span\
    \ class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># pythag[p]\
    \ = no. of sols for perimeter p</span>\n<span class=\"n\">pythag</span> <span\
    \ class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span\
    \ class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span\
    \ class=\"n\">MAX</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">)</span>\n<span class=\"c1\"># Don&#39;t need to search m = 0 or\
    \ n = 0</span>\n<span class=\"c1\"># ^ Isoceles right triangle with hypotenuse\
    \ = k*sqrt(2)</span>\n<span class=\"k\">for</span> <span class=\"n\">m</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    n\">maxm</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"\
    p\">):</span>\n    <span class=\"c1\"># Make sure m &gt; n</span>\n    <span class=\"\
    k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"\
    nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"\
    p\">,</span> <span class=\"n\">m</span><span class=\"p\">):</span>\n        <span\
    \ class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span\
    \ class=\"o\">*</span><span class=\"n\">m</span><span class=\"o\">*</span><span\
    \ class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">+</span><span\
    \ class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"c1\">#\
    \ Check three conditions for primitive pythag trip</span>\n        <span class=\"\
    k\">if</span> <span class=\"n\">P</span> <span class=\"o\">&lt;=</span> <span\
    \ class=\"n\">MAX</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span\
    \ class=\"n\">m</span><span class=\"o\">+</span><span class=\"n\">n</span><span\
    \ class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span>\
    \ <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span>\
    \ <span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"n\">m</span><span\
    \ class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span\
    \ class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n\
    \            <span class=\"c1\"># For each multiple of the PPT, count one more\
    \ sol</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    n\">MAX</span><span class=\"o\">//</span><span class=\"n\">P</span><span class=\"\
    o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n         \
    \       <span class=\"n\">pythag</span><span class=\"p\">[</span><span class=\"\
    n\">k</span><span class=\"o\">*</span><span class=\"n\">P</span><span class=\"\
    p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span\
    \ class=\"c1\"># Compile indices of strictly right maximal vals of pythag</span>\n\
    <span class=\"c1\"># Initialize with placeholder for comparisons</span>\n<span\
    \ class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"\
    p\">(</span><span class=\"n\">pythag</span><span class=\"p\">):</span>\n    <span\
    \ class=\"c1\"># Only store if stricly greater than max val so far</span>\n  \
    \  <span class=\"c1\"># This makes sure the minimal answer is stored</span>\n\
    \    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\"\
    >&gt;</span> <span class=\"n\">pythag</span><span class=\"p\">[</span><span class=\"\
    n\">freq</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">]]:</span>\n        <span class=\"n\">freq</span><span\
    \ class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span\
    \ class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"c1\"># Delete\
    \ placeholder</span>\n<span class=\"k\">del</span> <span class=\"n\">freq</span><span\
    \ class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n\
    <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\"\
    >(</span><span class=\"n\">bs</span><span class=\"p\">(</span><span class=\"n\"\
    >freq</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"\
    p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"\
    n\">freq</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"\
    p\">))</span>\n</pre></div>\n</td></tr></table>", comments: '12', difficulty: '5',
  empty: '9', hrdifficulty: Easy, memory: '8840', name: Integer Right Triangles, num: '39',
  path: 39-Integer-Right-Triangles, runtime: '10'}
'390': {difficulty: '60', name: Triangles with non rational sides and integral area}
'391': {difficulty: '75', name: Hopping Game}
'392': {difficulty: '35', name: Enmeshed unit circle}
'393': {difficulty: '50', name: Migrating ants}
'394': {difficulty: '55', name: Eating pie}
'395': {difficulty: '40', name: Pythagorean tree}
'396': {difficulty: '40', name: Weak Goodstein sequence}
'397': {difficulty: '70', name: Triangle on parabola}
'398': {difficulty: '55', name: Cutting rope}
'399': {difficulty: '45', name: Squarefree Fibonacci Numbers}
'4': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\"\
    >def</span> <span class=\"nf\">bs</span><span class=\"p\">(</span><span class=\"\
    n\">arr</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"\
    p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"\
    n\">x</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Binary\
    \ Search arr from index l to r for x&quot;&quot;&quot;</span>\n    <span class=\"\
    k\">while</span> <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span\
    \ class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"n\">mid</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span>\
    \ <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span>\
    \ <span class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">//</span><span\
    \ class=\"mi\">2</span>\n        <span class=\"c1\"># Is N in the array?</span>\n\
    \        <span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"\
    p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"\
    o\">==</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n         \
    \   <span class=\"c1\"># The answer must be less than N</span>\n            <span\
    \ class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span\
    \ class=\"n\">mid</span><span class=\"o\">-</span><span class=\"mi\">1</span><span\
    \ class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\"\
    >arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"\
    p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"\
    p\">:</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\
    \        <span class=\"k\">else</span><span class=\"p\">:</span>\n           \
    \ <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span>\
    \ <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\"\
    >return</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"\
    n\">r</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">pals</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >100</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"\
    p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span\
    \ class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span\
    \ class=\"p\">):</span>\n        <span class=\"c1\"># Test if palindrome</span>\n\
    \        <span class=\"k\">if</span> <span class=\"nb\">str</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"\
    n\">j</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"\
    nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"\
    o\">*</span><span class=\"n\">j</span><span class=\"p\">)[::</span><span class=\"\
    o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n         \
    \   <span class=\"n\">pals</span><span class=\"o\">.</span><span class=\"n\">add</span><span\
    \ class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span\
    \ class=\"n\">j</span><span class=\"p\">)</span>\n<span class=\"n\">pals</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\"\
    >(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"\
    n\">pals</span><span class=\"p\">))</span>\n\n<span class=\"n\">T</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span> <span\
    \ class=\"n\">bs</span><span class=\"p\">(</span><span class=\"n\">pals</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span\
    \ class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pals</span><span\
    \ class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span\
    \ class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n\
    \    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\"\
    >ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '3',
  difficulty: '5', empty: '3', hrdifficulty: Medium, memory: '8790', name: Largest
    Palindrome Product, num: '4', path: 4-Largest-Palindrome-Product, runtime: '557'}
'40': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\"\
    >MAX</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"\
    o\">**</span><span class=\"mi\">18</span>\n\n\n<span class=\"k\">def</span> <span\
    \ class=\"nf\">loc</span><span class=\"p\">(</span><span class=\"n\">dig</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Find block that\
    \ dig is part of</span>\n<span class=\"sd\">    and its position in the block&quot;&quot;&quot;</span>\n\
    \    <span class=\"c1\"># block in which dig resides</span>\n    <span class=\"\
    n\">block</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span\
    \ class=\"c1\"># no. of integers in block-th block</span>\n    <span class=\"\
    n\">fact</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n    <span\
    \ class=\"c1\"># fact * block represents the length of the block-th block</span>\n\
    \    <span class=\"c1\"># If what&#39;s left of dig is less than fact*block,</span>\n\
    \    <span class=\"c1\"># then dig is partway through &#39;block&#39;; we&#39;ve\
    \ found the right block</span>\n    <span class=\"c1\"># Make sure block is not\
    \ too big, based on input</span>\n    <span class=\"k\">while</span> <span class=\"\
    n\">dig</span> <span class=\"o\">-</span> <span class=\"n\">fact</span><span class=\"\
    o\">*</span><span class=\"n\">block</span> <span class=\"o\">&gt;</span> <span\
    \ class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">fact</span><span\
    \ class=\"o\">*</span><span class=\"n\">block</span> <span class=\"o\">&lt;</span>\
    \ <span class=\"mi\">9</span><span class=\"o\">*</span><span class=\"n\">MAX</span><span\
    \ class=\"p\">:</span>\n        <span class=\"c1\"># subtract away the length\
    \ of the currrent block</span>\n        <span class=\"n\">dig</span> <span class=\"\
    o\">-=</span> <span class=\"n\">fact</span><span class=\"o\">*</span><span class=\"\
    n\">block</span>\n        <span class=\"c1\"># Move to the next block</span>\n\
    \        <span class=\"n\">block</span> <span class=\"o\">+=</span> <span class=\"\
    mi\">1</span>\n        <span class=\"c1\"># The next block contains ten times\
    \ more numbers</span>\n        <span class=\"n\">fact</span> <span class=\"o\"\
    >*=</span> <span class=\"mi\">10</span>\n    <span class=\"c1\"># Subtract 1 to\
    \ zero-index position of dig in block</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"n\">dig</span><span class=\"o\">-</span><span class=\"mi\">1</span><span\
    \ class=\"p\">,</span> <span class=\"n\">block</span>\n\n\n<span class=\"k\">def</span>\
    \ <span class=\"nf\">digit</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;n-th digit of\
    \ Champernowne&#39;s constant&quot;&quot;&quot;</span>\n    <span class=\"n\"\
    >pos</span><span class=\"p\">,</span> <span class=\"n\">block</span> <span class=\"\
    o\">=</span> <span class=\"n\">loc</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">)</span>\n    <span class=\"c1\"># First num in\
    \ block is 10**(block-1)</span>\n    <span class=\"c1\"># pos//block nums precede\
    \ the number that the n-th digit is part of</span>\n    <span class=\"c1\"># So\
    \ the number dig is part of is 10**(block-1) + pos//block</span>\n    <span class=\"\
    c1\"># dig is the pos%block-th digit in its number</span>\n    <span class=\"\
    n\">dig</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"\
    mi\">10</span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"\
    n\">block</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"\
    p\">)</span><span class=\"o\">+</span><span class=\"n\">pos</span><span class=\"\
    o\">//</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"\
    n\">pos</span> <span class=\"o\">%</span> <span class=\"n\">block</span><span\
    \ class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\"\
    >dig</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">dig_prod</span><span\
    \ class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Product of i-th digits of Champ. constant,</span>\n\
    <span class=\"sd\">    where i are the elements of arr&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"mi\"\
    >1</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"\
    ow\">in</span> <span class=\"n\">arr</span><span class=\"p\">:</span>\n      \
    \  <span class=\"n\">out</span> <span class=\"o\">*=</span> <span class=\"n\"\
    >digit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"\
    p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">out</span>\n\
    \n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">D</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span\
    \ class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">()</span><span\
    \ class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n\
    \    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\"\
    >dig_prod</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"\
    p\">))</span>\n</pre></div>\n</td></tr></table>", comments: '14', difficulty: '5',
  empty: '8', hrdifficulty: Medium, memory: '8739', name: Champernowne's Constant,
  num: '40', path: 40-Champernownes-Constant, runtime: '31'}
'400': {difficulty: '55', name: Fibonacci tree game}
'401': {difficulty: '25', name: Sum of squares of divisors}
'402': {difficulty: '55', name: Integer-valued polynomials}
'403': {difficulty: '55', name: Lattice points enclosed by parabola and line}
'404': {difficulty: '60', name: Crisscross Ellipses}
'405': {difficulty: '40', name: A rectangular tiling}
'406': {difficulty: '50', name: Guessing Game}
'407': {difficulty: '20', name: Idempotents}
'408': {difficulty: '50', name: Admissible paths through a grid}
'409': {difficulty: '55', name: Nim Extreme}
'41': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\
    53\n54</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"\
    kn\">import</span> <span class=\"n\">permutations</span>\n<span class=\"kn\">from</span>\
    \ <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"\
    n\">sqrt</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">bs</span><span\
    \ class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span\
    \ class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span\
    \ class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Binary Search arr from index l to r\
    \ for x&quot;&quot;&quot;</span>\n    <span class=\"k\">while</span> <span class=\"\
    n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"\
    p\">:</span>\n        <span class=\"n\">mid</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span\
    \ class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span\
    \ class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span>\n\
    \        <span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"\
    p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"\
    o\">==</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n         \
    \   <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"\
    p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span>\n        <span\
    \ class=\"k\">elif</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span\
    \ class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span>\
    \ <span class=\"n\">x</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span\
    \ class=\"p\">:</span>\n            <span class=\"n\">r</span> <span class=\"\
    o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"\
    mi\">1</span>\n            <span class=\"k\">return</span> <span class=\"n\">arr</span><span\
    \ class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span>\n\n\
    \n<span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"\
    p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"\
    sd\">&quot;&quot;&quot;Sieve of Eratosthenes&quot;&quot;&quot;</span>\n    <span\
    \ class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\
    \    <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"\
    p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"\
    o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span\
    \ class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span\
    \ class=\"n\">p</span><span class=\"p\">]:</span>\n            <span class=\"\
    n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n \
    \           <span class=\"c1\"># Cross out all multiples of p</span>\n       \
    \     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"\
    p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"\
    p\">):</span>\n                <span class=\"n\">sieve</span><span class=\"p\"\
    >[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\"\
    >=</span> <span class=\"bp\">False</span>\n                <span class=\"k\">return</span>\
    \ <span class=\"n\">primes</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">pandigital</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Find all n-digit\
    \ pandigital numbers&quot;&quot;&quot;</span>\n    <span class=\"n\">pan</span>\
    \ <span class=\"o\">=</span> <span class=\"s2\">&quot;123456789&quot;</span>\n\
    \    <span class=\"c1\"># Permute first n characters of pan</span>\n    <span\
    \ class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">permutations</span><span\
    \ class=\"p\">(</span><span class=\"n\">pan</span><span class=\"p\">[:</span><span\
    \ class=\"n\">n</span><span class=\"p\">])</span>\n    <span class=\"c1\"># Join\
    \ each tuple into a str, then an int</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\"\
    >join</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"\
    p\">))</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"\
    ow\">in</span> <span class=\"n\">out</span><span class=\"p\">]</span>\n\n\n<span\
    \ class=\"c1\"># We need primes up to int(sqrt(10**7 - 1)) = 3162</span>\n<span\
    \ class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span\
    \ class=\"p\">(</span><span class=\"mi\">3162</span><span class=\"p\">)</span>\n\
    <span class=\"c1\"># All other pandigitals are divisible by 3</span>\n<span class=\"\
    n\">PAN</span> <span class=\"o\">=</span> <span class=\"n\">pandigital</span><span\
    \ class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span\
    \ class=\"o\">+</span> <span class=\"n\">pandigital</span><span class=\"p\">(</span><span\
    \ class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">PAN_PRIME</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">pan</span> <span class=\"ow\">in</span> <span class=\"n\"\
    >PAN</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Test if pan is\
    \ in our list of primes</span>\n    <span class=\"c1\"># Or it is not divisible\
    \ by any prime &lt;= sqrt(pan)</span>\n    <span class=\"k\">if</span> <span class=\"\
    n\">pan</span> <span class=\"ow\">in</span> <span class=\"n\">P</span> <span class=\"\
    ow\">or</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"\
    n\">pan</span> <span class=\"o\">%</span> <span class=\"n\">p</span> <span class=\"\
    o\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"\
    n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">P</span> <span class=\"\
    k\">if</span> <span class=\"n\">p</span> <span class=\"o\">&lt;=</span> <span\
    \ class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span\
    \ class=\"p\">(</span><span class=\"n\">pan</span><span class=\"p\">))]):</span>\n\
    \        <span class=\"n\">PAN_PRIME</span><span class=\"o\">.</span><span class=\"\
    n\">append</span><span class=\"p\">(</span><span class=\"n\">pan</span><span class=\"\
    p\">)</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bs</span><span\
    \ class=\"p\">(</span><span class=\"n\">PAN_PRIME</span><span class=\"p\">,</span>\
    \ <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span\
    \ class=\"p\">(</span><span class=\"n\">PAN_PRIME</span><span class=\"p\">)</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span\
    \ class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
  comments: '7', difficulty: '5', empty: '9', hrdifficulty: Easy, memory: '9000',
  name: Pandigital Prime, num: '41', path: 41-Pandigital-Prime, runtime: '678'}
'410': {difficulty: '70', name: Circle and tangent line}
'411': {difficulty: '45', name: Uphill paths}
'412': {difficulty: '50', name: Gnomon numbering}
'413': {difficulty: '75', name: One-child Numbers}
'414': {difficulty: '60', name: Kaprekar constant}
'415': {difficulty: '100', name: Titanic sets}
'416': {difficulty: '80', name: A frog's trip}
'417': {difficulty: '35', name: Reciprocal cycles II}
'418': {difficulty: '40', name: Factorisation triples}
'419': {difficulty: '50', name: Look and say sequence}
'42': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\"\
    >def</span> <span class=\"nf\">is_triangular</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Implement\
    \ eq. (2)&quot;&quot;&quot;</span>\n    <span class=\"n\">inv</span> <span class=\"\
    o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"\
    mi\">1</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"\
    o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"\
    o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"\
    o\">/</span><span class=\"mi\">2</span>\n    <span class=\"n\">status</span> <span\
    \ class=\"o\">=</span> <span class=\"n\">inv</span> <span class=\"o\">==</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">inv</span><span\
    \ class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span>\
    \ <span class=\"n\">status</span><span class=\"p\">:</span>\n        <span class=\"\
    n\">inv</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"\
    mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">inv</span>\n\
    \n\n<span class=\"k\">def</span> <span class=\"nf\">score</span><span class=\"\
    p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"\
    sd\">&quot;&quot;&quot;Get word score of string s&quot;&quot;&quot;</span>\n \
    \   <span class=\"c1\"># For each letter, find the position of the letter in ALPH</span>\n\
    \    <span class=\"c1\"># Add one because ALPH is 0-indexed</span>\n    <span\
    \ class=\"n\">ALPH</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\n\
    \    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"\
    p\">([</span><span class=\"n\">ALPH</span><span class=\"o\">.</span><span class=\"\
    n\">index</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"\
    p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"\
    k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"\
    n\">s</span><span class=\"p\">])</span>\n\n\n<span class=\"k\">with</span> <span\
    \ class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;words.txt&quot;</span><span\
    \ class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\"\
    >)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"\
    p\">:</span>\n    <span class=\"c1\"># Remove spaces and quotation marks</span>\n\
    \    <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"\
    n\">f</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"\
    p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"\
    p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)</span>\n\
    \    <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"\
    p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"\
    n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span\
    \ class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\"\
    >)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"\
    ow\">in</span> <span class=\"n\">words</span><span class=\"p\">]</span>\n\n<span\
    \ class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span>\
    \ <span class=\"n\">words</span><span class=\"p\">:</span>\n    <span class=\"\
    c1\"># Check if word score is triangular</span>\n    <span class=\"k\">if</span>\
    \ <span class=\"n\">is_triangular</span><span class=\"p\">(</span><span class=\"\
    n\">score</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"\
    p\">))</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">count</span>\
    \ <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"k\">print</span><span\
    \ class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\n\
    </pre></div>\n</td></tr></table>", comments: '4', difficulty: '5', empty: '5',
  hrdifficulty: Easy, memory: '8792', name: Coded Triangle Numbers, num: '42', path: 42-Coded-Triangle-Numbers,
  runtime: '30'}
'420': {difficulty: '60', name: 2x2 positive integer matrix}
'421': {difficulty: '50', name: Prime factors of n15+1}
'422': {difficulty: '75', name: Sequence of points on a hyperbola}
'423': {difficulty: '45', name: Consecutive die throws}
'424': {difficulty: '60', name: Kakuro}
'425': {difficulty: '25', name: Prime connection}
'426': {difficulty: '75', name: Box-ball system}
'427': {difficulty: '95', name: n-sequences}
'428': {difficulty: '90', name: Necklace of circles}
'429': {difficulty: '20', name: Sum of squares of unitary divisors}
'43': {difficulty: '5', hrdifficulty: Easy, name: Sub-string divisibility, num: '43'}
'430': {difficulty: '35', name: Range flips}
'431': {difficulty: '40', name: Square Space Silo}
'432': {difficulty: '70', name: Totient sum}
'433': {difficulty: '65', name: Steps in Euclid's algorithm}
'434': {difficulty: '75', name: Rigid graphs}
'435': {difficulty: '30', name: Polynomials of Fibonacci numbers}
'436': {difficulty: '55', name: Unfair wager}
'437': {difficulty: '35', name: Fibonacci primitive roots}
'438': {difficulty: '95', name: Integer part of polynomial equation's solutions}
'439': {difficulty: '100', name: Sum of sum of divisors}
'44': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"\
    code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span>\
    \ <span class=\"nf\">pent</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;n-th pentagonal\
    \ number&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"\
    p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"\
    n\">n</span><span class=\"o\">*</span><span class=\"n\">n</span> <span class=\"\
    o\">-</span> <span class=\"n\">n</span><span class=\"p\">)</span><span class=\"\
    o\">//</span><span class=\"mi\">2</span>\n\n\n<span class=\"k\">def</span> <span\
    \ class=\"nf\">is_pent</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;is n a pentagonal\
    \ number?&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"\
    n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"\
    p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\
    \    <span class=\"c1\"># Implement eq. (3)</span>\n    <span class=\"n\">inv</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span\
    \ class=\"o\">+</span><span class=\"p\">(</span><span class=\"mi\">24</span><span\
    \ class=\"o\">*</span><span class=\"n\">n</span><span class=\"o\">+</span><span\
    \ class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">**</span><span\
    \ class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">/</span><span\
    \ class=\"mi\">6</span>\n    <span class=\"k\">return</span> <span class=\"n\"\
    >inv</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"n\">inv</span><span class=\"p\">)</span>\n\n\n<span\
    \ class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span\
    \ class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span\
    \ class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span\
    \ class=\"p\">())</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n<span class=\"c1\"\
    ># Try everything up to max</span>\n<span class=\"k\">for</span> <span class=\"\
    n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">K</span><span class=\"o\">+</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span>\
    \ <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pent</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span\
    \ class=\"n\">pent</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"o\">-</span><span class=\"n\">K</span><span class=\"p\">)</span>\n \
    \   <span class=\"c1\"># Do we have a pent no.?</span>\n    <span class=\"k\"\
    >if</span> <span class=\"n\">is_pent</span><span class=\"p\">(</span><span class=\"\
    n\">a</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"\
    p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">is_pent</span><span\
    \ class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">+</span><span\
    \ class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"n\">out</span><span\
    \ class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span\
    \ class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span\
    \ class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">):</span>\n\
    \    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\"\
    >x</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '3',
  difficulty: '5', empty: '5', hrdifficulty: Easy, memory: '8716', name: Pentagon
    Numbers, num: '44', path: 44-Pentagon-Numbers, runtime: '2128'}
'440': {difficulty: '60', name: GCD and Tiling}
'441': {difficulty: '65', name: The inverse summation of coprime couples}
'442': {difficulty: '60', name: Eleven-free integers}
'443': {difficulty: '30', name: GCD sequence}
'444': {difficulty: '60', name: The Roundtable Lottery}
'445': {difficulty: '50', name: Retractions A}
'446': {difficulty: '60', name: Retractions B}
'447': {difficulty: '95', name: Retractions C}
'448': {difficulty: '80', name: Average least common multiple}
'449': {difficulty: '35', name: Chocolate covered candy}
'45': {difficulty: '5', hrdifficulty: Easy, name: 'Triangular, pentagonal, and hexagonal',
  num: '45'}
'450': {difficulty: '100', name: Hypocycloid and Lattice points}
'451': {difficulty: '30', name: Modular inverses}
'452': {difficulty: '45', name: Long Products}
'453': {difficulty: '95', name: Lattice Quadrilaterals}
'454': {difficulty: '50', name: Diophantine reciprocals III}
'455': {difficulty: '40', name: Powers With Trailing Digits}
'456': {difficulty: '50', name: Triangles containing the origin II}
'457': {difficulty: '35', name: A polynomial modulo the square of a prime}
'458': {difficulty: '30', name: Permutations of Project}
'459': {difficulty: '100', name: Flipping game}
'46': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\"\
    >def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sieve\
    \ of Eratosthenes&quot;&quot;&quot;</span>\n    <span class=\"n\">primes</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\"\
    >sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"\
    bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"\
    p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span\
    \ class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span\
    \ class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"\
    p\">]:</span>\n            <span class=\"n\">primes</span><span class=\"o\">.</span><span\
    \ class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span\
    \ class=\"p\">)</span>\n            <span class=\"c1\"># Cross out all multiples\
    \ of p</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"\
    n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    n\">p</span><span class=\"p\">):</span>\n                <span class=\"n\">sieve</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span\
    \ class=\"o\">=</span> <span class=\"bp\">False</span>\n                <span\
    \ class=\"k\">return</span> <span class=\"n\">primes</span>\n\n\n<span class=\"\
    c1\"># MAX input is 5*10^5</span>\n<span class=\"n\">P</span> <span class=\"o\"\
    >=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"mf\">5e5</span><span class=\"\
    p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">ways</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;No. of ways n can be written as p +\
    \ 2k^2</span>\n<span class=\"sd\">    for prime p and integer k&quot;&quot;&quot;</span>\n\
    \    <span class=\"c1\"># Implement eq. (1)</span>\n    <span class=\"k\">def</span>\
    \ <span class=\"nf\">cand</span><span class=\"p\">(</span><span class=\"n\">p</span><span\
    \ class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"p\">((</span><span\
    \ class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">p</span><span\
    \ class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span\
    \ class=\"p\">)</span><span class=\"o\">**</span><span class=\"mf\">0.5</span>\n\
    \    <span class=\"c1\"># Get no. of primes less than n which produce a valid\
    \ candidate</span>\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span\
    \ class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span\
    \ class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span>\
    \ <span class=\"ow\">in</span> <span class=\"n\">P</span> <span class=\"k\">if</span>\
    \ <span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span>\
    \ <span class=\"ow\">and</span> <span class=\"n\">cand</span><span class=\"p\"\
    >(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"o\"\
    >==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    n\">cand</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"\
    p\">))))</span>\n\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ways</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n\
    </pre></div>\n</td></tr></table>", comments: '4', difficulty: '5', empty: '6',
  hrdifficulty: Easy, memory: '13929', name: Goldbach's Other Conjecture, num: '46',
  path: 46-Goldbachs-Other-Conjecture, runtime: '114'}
'460': {difficulty: '55', name: An ant on the move}
'461': {difficulty: '30', name: Almost Pi}
'462': {difficulty: '60', name: Permutation of 3-smooth numbers}
'463': {difficulty: '35', name: A weird recurrence relation}
'464': {difficulty: '60', name: "M\xF6bius function and intervals"}
'465': {difficulty: '85', name: Polar polygons}
'466': {difficulty: '65', name: Distinct terms in a multiplication table}
'467': {difficulty: '50', name: Superinteger}
'468': {difficulty: '70', name: Smooth divisors of binomial coefficients}
'469': {difficulty: '40', name: Empty chairs}
'47': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\"\
    >def</span> <span class=\"nf\">omega</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;No.\
    \ of distinct prime factors of all m &lt; n&quot;&quot;&quot;</span>\n    <span\
    \ class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span\
    \ class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span\
    \ class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span>\
    \ <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span\
    \ class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"\
    p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"\
    p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\"\
    >n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"\
    p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n         \
    \       <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"\
    n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"\
    mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">sieve</span>\n\
    \n<span class=\"c1\"># Find all consec. sets of size k</span>\n<span class=\"\
    c1\"># k distinct prime factors each</span>\n\n\n<span class=\"k\">def</span>\
    \ <span class=\"nf\">consecutive</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Find all consec. sets\
    \ of size k where</span>\n<span class=\"sd\">    each element has exactly k distinct\
    \ prime factors&quot;&quot;&quot;</span>\n    <span class=\"n\">FACTORS</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">omega</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"o\">+</span><span class=\"n\">k</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\
    \    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\"\
    >[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span\
    \ class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span\
    \ class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\"\
    >all</span><span class=\"p\">([</span><span class=\"n\">FACTORS</span><span class=\"\
    p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"\
    n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"\
    n\">k</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"\
    ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"n\">k</span><span class=\"p\">)]):</span>\n            <span class=\"\
    n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"\
    k\">return</span> <span class=\"n\">out</span>\n\n\n<span class=\"n\">N</span><span\
    \ class=\"p\">,</span> <span class=\"n\">K</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span\
    \ class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">()</span><span\
    \ class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span>\
    \ <span class=\"n\">consecutive</span><span class=\"p\">(</span><span class=\"\
    n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"\
    p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">x</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
  comments: '2', difficulty: '5', empty: '5', hrdifficulty: Easy, memory: '9474',
  name: Distinct Primes Factors, num: '47', path: 47-Distinct-Primes-Factors, runtime: '176'}
'470': {difficulty: '65', name: Super Ramvok}
'471': {difficulty: '75', name: Triangle inscribed in ellipse}
'472': {difficulty: '60', name: Comfortable Distance II}
'473': {difficulty: '35', name: Phigital number base}
'474': {difficulty: '50', name: Last digits of divisors}
'475': {difficulty: '50', name: Music festival}
'476': {difficulty: '45', name: Circle Packing II}
'477': {difficulty: '65', name: Number Sequence Game}
'478': {difficulty: '100', name: Mixtures}
'479': {difficulty: '25', name: Roots on the Rise}
'48': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td><td class=\"\
    code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">N</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"n\">M</span>\
    \ <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span\
    \ class=\"mi\">10</span>\n<span class=\"n\">S</span> <span class=\"o\">=</span>\
    \ <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\"\
    >n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"\
    p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"\
    n\">N</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"\
    p\">):</span>\n\t<span class=\"c1\"># Take powers mod 10^10</span>\n\t<span class=\"\
    c1\"># Mod 10^10 at the end</span>\n\t<span class=\"n\">S</span> <span class=\"\
    o\">=</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"\
    o\">+</span> <span class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"\
    p\">,</span><span class=\"n\">M</span><span class=\"p\">))</span><span class=\"\
    o\">%</span><span class=\"n\">M</span>\n<span class=\"k\">print</span><span class=\"\
    p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n</pre></div>\n\
    </td></tr></table>", comments: '2', difficulty: '5', empty: '0', hrdifficulty: Easy,
  memory: '8630', name: Self Powers, num: '48', path: 48-Self-Powers, runtime: '11'}
'480': {difficulty: '45', name: The Last Question}
'481': {difficulty: '70', name: Chef Showdown}
'482': {difficulty: '85', name: The incenter of a triangle}
'483': {difficulty: '100', name: Repeated permutation}
'484': {difficulty: '100', name: Arithmetic Derivative}
'485': {difficulty: '30', name: Maximum number of divisors}
'486': {difficulty: '70', name: Palindrome-containing strings}
'487': {difficulty: '40', name: Sums of power sums}
'488': {difficulty: '80', name: Unbalanced Nim}
'489': {difficulty: '100', name: Common factors between two sequences}
'49': {difficulty: '5', hrdifficulty: Hard, name: Prime permutations, num: '49'}
'490': {difficulty: '90', name: Jumping frog}
'491': {difficulty: '20', name: Double pandigital number divisible by 11}
'492': {difficulty: '60', name: Exploding sequence}
'493': {difficulty: '10', name: Under The Rainbow}
'494': {difficulty: '100', name: Collatz prefix families}
'495': {difficulty: '100', name: Writing n as the product of k distinct positive integers}
'496': {difficulty: '50', name: Incenter and circumcenter of triangle}
'497': {difficulty: '40', name: Drunken Tower of Hanoi}
'498': {difficulty: '40', name: Remainder of polynomial division}
'499': {difficulty: '100', name: St. Petersburg Lottery}
'5': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\"\
    >from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span\
    \ class=\"n\">log</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\"\
    >primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sieve of Eratosthenes&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"\
    p\">[]</span>\n    <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span\
    \ class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span>\
    \ <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span>\
    \ <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\
    \    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span\
    \ class=\"n\">p</span><span class=\"p\">]:</span>\n            <span class=\"\
    n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n \
    \           <span class=\"c1\"># Cross out all multiples of p</span>\n       \
    \     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"\
    p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"\
    p\">):</span>\n                <span class=\"n\">sieve</span><span class=\"p\"\
    >[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\"\
    >=</span> <span class=\"bp\">False</span>\n                <span class=\"k\">return</span>\
    \ <span class=\"n\">primes</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">min_mult</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Implement eq.\
    \ (1)&quot;&quot;&quot;</span>\n    <span class=\"n\">P</span> <span class=\"\
    o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">)</span>\n    <span class=\"n\">ans</span> <span\
    \ class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span>\
    \ <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span\
    \ class=\"p\">:</span>\n        <span class=\"n\">ans</span> <span class=\"o\"\
    >*=</span> <span class=\"n\">p</span><span class=\"o\">**</span><span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"\
    p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"\
    n\">p</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span\
    \ class=\"n\">ans</span>\n\n\n<span class=\"n\">T</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_mult</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n\
    </pre></div>\n</td></tr></table>", comments: '1', difficulty: '5', empty: '6',
  hrdifficulty: Medium, memory: '8794', name: Smallest Multiple, num: '5', path: 5-Smallest-Multiple,
  runtime: '12'}
'50': {difficulty: '5', hrdifficulty: Hard, name: Consecutive prime sum, num: '50'}
'500': {difficulty: '15', name: Problem 500!!!}
'501': {difficulty: '40', name: Eight Divisors}
'502': {difficulty: '100', name: Counting Castles}
'503': {difficulty: '60', name: Compromise or persist}
'504': {difficulty: '15', name: Square on the Inside}
'505': {difficulty: '90', name: Bidirectional Recurrence}
'506': {difficulty: '30', name: Clock sequence}
'507': {difficulty: '90', name: Shortest Lattice Vector}
'508': {difficulty: '85', name: Integers in base i-1}
'509': {difficulty: '40', name: Divisor Nim}
'51': {difficulty: '15', hrdifficulty: Advanced, name: Prime digit replacements, num: '51'}
'510': {difficulty: '30', name: Tangent Circles}
'511': {difficulty: '55', name: Sequences with nice divisibility properties}
'512': {difficulty: '25', name: Sums of totients of powers}
'513': {difficulty: '60', name: Integral median}
'514': {difficulty: '90', name: Geoboard Shapes}
'515': {difficulty: '40', name: Dissonant Numbers}
'516': {difficulty: '20', name: 5-smooth totients}
'517': {difficulty: '45', name: A real recursion}
'518': {difficulty: '20', name: Prime triples and geometric sequences}
'519': {difficulty: '50', name: Tricolored Coin Fountains}
'52': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"k\">def</span> <span class=\"nf\">is_perm</span><span class=\"p\">(</span><span\
    \ class=\"n\">arr</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Does\
    \ arr consist of permutations of some string&quot;&quot;&quot;</span>\n    <span\
    \ class=\"k\">return</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span\
    \ class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">arr</span><span\
    \ class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span\
    \ class=\"o\">==</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span\
    \ class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">arr</span><span\
    \ class=\"p\">])</span>\n\n\n<span class=\"n\">N</span><span class=\"p\">,</span>\
    \ <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span\
    \ class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span>\
    \ <span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\"\
    >.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n<span class=\"\
    c1\"># We are given N &gt;= 125874</span>\n<span class=\"k\">for</span> <span\
    \ class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">125874</span><span class=\"p\">,</span>\
    \ <span class=\"n\">N</span><span class=\"o\">+</span><span class=\"mi\">1</span><span\
    \ class=\"p\">):</span>\n    <span class=\"c1\"># First check that all digits\
    \ are unique</span>\n    <span class=\"c1\"># Then check that Ki is not too long</span>\n\
    \    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\"\
    >(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"\
    n\">i</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"\
    nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"\
    p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"\
    n\">i</span><span class=\"p\">)))</span> <span class=\"ow\">and</span> <span class=\"\
    nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"\
    n\">K</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"\
    nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"p\">)):</span>\n        <span\
    \ class=\"c1\"># Generate multiples</span>\n        <span class=\"n\">S</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span\
    \ class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span\
    \ class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span\
    \ class=\"n\">K</span><span class=\"o\">+</span><span class=\"mi\">1</span><span\
    \ class=\"p\">)]</span>\n        <span class=\"c1\"># Check that all multiples\
    \ are permutations</span>\n        <span class=\"k\">if</span> <span class=\"\
    n\">is_perm</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"\
    p\">):</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\"\
    >join</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"\
    p\">))</span>\n</pre></div>\n</td></tr></table>", comments: '5', difficulty: '5',
  empty: '2', hrdifficulty: Easy, memory: '8734', name: Permuted Multiples, num: '52',
  path: 52-Permuted-Multiples, runtime: '60'}
'520': {difficulty: '45', name: Simbers}
'521': {difficulty: '45', name: Smallest prime factor}
'522': {difficulty: '85', name: Hilbert's Blackout}
'523': {difficulty: '30', name: First Sort I}
'524': {difficulty: '70', name: First Sort II}
'525': {difficulty: '45', name: Rolling Ellipse}
'526': {difficulty: '60', name: Largest prime factors of consecutive numbers}
'527': {difficulty: '30', name: Randomized Binary Search}
'528': {difficulty: '55', name: Constrained Sums}
'529': {difficulty: '80', name: 10-substrings}
'53': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20</pre></div></td><td class=\"code\"><div class=\"\
    highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\"\
    >choose_max</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span\
    \ class=\"sd\">&quot;&quot;&quot;No. of entries in n-th row of Pascal&#39;s triangle</span>\n\
    <span class=\"sd\">    less than k&quot;&quot;&quot;</span>\n    <span class=\"\
    c1\"># The current binomial coefficient</span>\n    <span class=\"n\">curr</span>\
    \ <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"c1\"\
    ># Go up to the central coefficient</span>\n    <span class=\"k\">for</span> <span\
    \ class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">//</span><span\
    \ class=\"mi\">2</span><span class=\"o\">+</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span\
    \ class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span\
    \ class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >curr</span> <span class=\"o\">&gt;</span> <span class=\"n\">k</span><span class=\"\
    p\">:</span>\n            <span class=\"c1\"># Count all the entries from i to\
    \ n-i</span>\n            <span class=\"k\">return</span> <span class=\"n\">n</span>\
    \ <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">-</span>\
    \ <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span>\n\
    \        <span class=\"c1\"># Recurrence relation for next coeff</span>\n    \
    \    <span class=\"n\">curr</span> <span class=\"o\">*=</span> <span class=\"\
    n\">n</span> <span class=\"o\">-</span> <span class=\"n\">i</span>\n        <span\
    \ class=\"n\">curr</span> <span class=\"o\">//=</span> <span class=\"n\">i</span>\
    \ <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"c1\"\
    ># No entries &gt; K were found</span>\n    <span class=\"k\">return</span> <span\
    \ class=\"mi\">0</span>\n\n\n<span class=\"n\">N</span><span class=\"p\">,</span>\
    \ <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span\
    \ class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span>\
    \ <span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\"\
    >.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n<span class=\"\
    c1\"># Add up all the rows up to N</span>\n<span class=\"k\">print</span><span\
    \ class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">([</span><span\
    \ class=\"n\">choose_max</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">)</span> <span\
    \ class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\"\
    >+</span><span class=\"mi\">1</span><span class=\"p\">)]))</span>\n</pre></div>\n\
    </td></tr></table>", comments: '6', difficulty: '5', empty: '2', hrdifficulty: Easy,
  memory: '8719', name: Combinatoric Selections, num: '53', path: 53-Combinatoric-Selections,
  runtime: '10'}
'530': {difficulty: '55', name: GCD of Divisors}
'531': {difficulty: '25', name: Chinese leftovers}
'532': {difficulty: '55', name: Nanobots on Geodesics}
'533': {difficulty: '50', name: Minimum values of the Carmichael function}
'534': {difficulty: '55', name: Weak Queens}
'535': {difficulty: '55', name: Fractal Sequence}
'536': {difficulty: '55', name: Modulo power identity}
'537': {difficulty: '35', name: Counting tuples}
'538': {difficulty: '40', name: Maximum quadrilaterals}
'539': {difficulty: '30', name: Odd elimination}
'54': {difficulty: '10', hrdifficulty: Easy, name: Poker hands, num: '54'}
'540': {difficulty: '30', name: Counting primitive Pythagorean triples}
'541': {difficulty: '90', name: Divisibility of Harmonic Number Denominators}
'542': {difficulty: '65', name: Geometric Progression with Maximum Sum}
'543': {difficulty: '30', name: Prime-Sum Numbers}
'544': {difficulty: '85', name: Chromatic Conundrum}
'545': {difficulty: '35', name: Faulhaber's Formulas}
'546': {difficulty: '80', name: The Floor's Revenge}
'547': {difficulty: '70', name: Distance of random points within hollow square laminae}
'548': {difficulty: '35', name: Gozinta Chains}
'549': {difficulty: '10', name: Divisibility of factorials}
'55': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td><td class=\"code\"><div class=\"\
    highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\"\
    >is_pal</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Is n a palindrome?&quot;&quot;&quot;</span>\n\
    \    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"\
    p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"\
    o\">==</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span\
    \ class=\"nf\">pal_result</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;What number\
    \ does n converge to?&quot;&quot;&quot;</span>\n    <span class=\"c1\"># palindromes\
    \ covnerge to themselves</span>\n    <span class=\"k\">if</span> <span class=\"\
    n\">is_pal</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span>\n\
    \    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\"\
    >0</span>\n    <span class=\"c1\"># Iterate at most 60 times</span>\n    <span\
    \ class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span>\
    \ <span class=\"mi\">60</span><span class=\"p\">:</span>\n        <span class=\"\
    n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n       \
    \ <span class=\"n\">n</span> <span class=\"o\">+=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"c1\"\
    ># Return the palindrome, if found</span>\n        <span class=\"k\">if</span>\
    \ <span class=\"n\">is_pal</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"\
    n\">n</span>\n    <span class=\"c1\"># Return 0 if we use 60 iterations</span>\n\
    \    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n\n<span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span\
    \ class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\
    \n<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\"\
    >+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">res</span> <span class=\"o\">=</span> <span class=\"n\">pal_result</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n \
    \   <span class=\"k\">if</span> <span class=\"n\">res</span> <span class=\"ow\"\
    >not</span> <span class=\"ow\">in</span> <span class=\"n\">freq</span><span class=\"\
    p\">:</span>\n        <span class=\"n\">freq</span><span class=\"p\">[</span><span\
    \ class=\"n\">res</span><span class=\"p\">]</span> <span class=\"o\">=</span>\
    \ <span class=\"mi\">0</span>\n    <span class=\"c1\"># For each k that converges\
    \ to n,</span>\n    <span class=\"c1\"># add 1 to the entry corresponding to n</span>\n\
    \    <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\"\
    >res</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"\
    mi\">1</span>\n<span class=\"c1\"># Remove all suspected Lychrel numbers from\
    \ count</span>\n<span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"\
    mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"\
    mi\">0</span>\n\n<span class=\"c1\"># Get (pal, count) pairs</span>\n<span class=\"\
    c1\"># Sort pairs by count in decreasing order</span>\n<span class=\"c1\"># Get\
    \ first pair</span>\n<span class=\"n\">pals</span> <span class=\"o\">=</span>\
    \ <span class=\"p\">[(</span><span class=\"n\">x</span><span class=\"p\">,</span>\
    \ <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">x</span><span\
    \ class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">x</span>\
    \ <span class=\"ow\">in</span> <span class=\"n\">freq</span><span class=\"p\"\
    >]</span>\n<span class=\"n\">pals</span> <span class=\"o\">=</span> <span class=\"\
    nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">pals</span><span\
    \ class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span\
    \ class=\"k\">lambda</span> <span class=\"n\">t</span><span class=\"p\">:</span>\
    \ <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">1</span><span\
    \ class=\"p\">],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span\
    \ class=\"bp\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span\
    \ class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"s2\">&quot;{} {}&quot;</span><span class=\"o\">.</span><span class=\"\
    n\">format</span><span class=\"p\">(</span><span class=\"n\">pals</span><span\
    \ class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span\
    \ class=\"n\">pals</span><span class=\"p\">[</span><span class=\"mi\">1</span><span\
    \ class=\"p\">]))</span>\n</pre></div>\n</td></tr></table>", comments: '10', difficulty: '5',
  empty: '6', hrdifficulty: Easy, memory: '8772', name: Lychrel Numbers, num: '55',
  path: 55-Lychrel-Numbers, runtime: '81'}
'550': {difficulty: '55', name: Divisor game}
'551': {difficulty: '50', name: Sum of digits sequence}
'552': {difficulty: '40', name: Chinese leftovers II}
'553': {difficulty: '80', name: Power sets of power sets}
'554': {difficulty: '75', name: Centaurs on a chess board}
'555': {difficulty: '30', name: McCarthy 91 function}
'556': {difficulty: '80', name: Squarefree Gaussian Integers}
'557': {difficulty: '55', name: Cutting triangles}
'558': {difficulty: '60', name: Irrational base}
'559': {difficulty: '95', name: Permuted Matrices}
'56': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"\
    ><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span\
    \ class=\"nf\">dig_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\"\
    >sum</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"\
    k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"\
    nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">)])</span>\n\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"nb\">max</span><span class=\"p\">([</span><span class=\"n\">dig_sum</span><span\
    \ class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">**</span><span\
    \ class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span\
    \ class=\"n\">N</span><span class=\"p\">)</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span\
    \ class=\"n\">N</span><span class=\"p\">)]))</span>\n</pre></div>\n</td></tr></table>",
  comments: '0', difficulty: '5', empty: '2', hrdifficulty: Easy, memory: '8907',
  name: Powerful Digit Sum, num: '56', path: 56-Powerful-Digit-Sum, runtime: '180'}
'560': {difficulty: '70', name: Coprime Nim}
'561': {difficulty: '30', name: Divisor Pairs}
'562': {difficulty: '75', name: Maximal perimeter}
'563': {difficulty: '45', name: Robot Welders}
'564': {difficulty: '55', name: Maximal polygons}
'565': {difficulty: '35', name: Divisibility of sum of divisors}
'566': {difficulty: '100', name: Cake Icing Puzzle}
'567': {difficulty: '50', name: Reciprocal games I}
'568': {difficulty: '55', name: Reciprocal games II}
'569': {difficulty: '45', name: Prime Mountain Range}
'57': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\"\
    >def</span> <span class=\"nf\">next_convergent</span><span class=\"p\">(</span><span\
    \ class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Implement eq.\
    \ (2)&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"\
    n\">p</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"\
    o\">*</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"\
    n\">p</span><span class=\"o\">+</span><span class=\"n\">q</span>\n\n\n<span class=\"\
    n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span> <span class=\"\
    o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    mi\">1</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    n\">N</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"\
    p\">):</span>\n    <span class=\"n\">p</span><span class=\"p\">,</span> <span\
    \ class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">next_convergent</span><span\
    \ class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span\
    \ class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Does\
    \ num have more digits than den?</span>\n    <span class=\"k\">if</span> <span\
    \ class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span\
    \ class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span> <span\
    \ class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span\
    \ class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">q</span><span\
    \ class=\"p\">)):</span>\n        <span class=\"k\">print</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre></div>\n\
    </td></tr></table>", comments: '1', difficulty: '5', empty: '2', hrdifficulty: Easy,
  memory: '8775', name: Square Root Convergents, num: '57', path: 57-Square-Root-Convergents,
  runtime: '15'}
'570': {difficulty: '50', name: Snowflakes}
'571': {difficulty: '25', name: Super Pandigital Numbers}
'572': {difficulty: '50', name: Idempotent matrices}
'573': {difficulty: '80', name: Unfair race}
'574': {difficulty: '50', name: Verifying Primes}
'575': {difficulty: '35', name: Wandering Robots}
'576': {difficulty: '55', name: Irrational jumps}
'577': {difficulty: '20', name: Counting hexagons}
'578': {difficulty: '80', name: Integers with decreasing prime powers}
'579': {difficulty: '100', name: Lattice points in lattice cubes}
'58': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\
    53\n54\n55</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"k\">def</span> <span class=\"nf\">try_composite</span><span class=\"\
    p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"\
    n\">d</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"\
    p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n    <span\
    \ class=\"sd\">&quot;&quot;&quot;Helper function for Miller-Rabin</span>\n<span\
    \ class=\"sd\">    Test if n is definitely composite&quot;&quot;&quot;</span>\n\
    \    <span class=\"k\">if</span> <span class=\"nb\">pow</span><span class=\"p\"\
    >(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\"\
    >d</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\"\
    >)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"\
    p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\
    \    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    n\">s</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span\
    \ class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"n\">a</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span\
    \ class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">d</span><span\
    \ class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span\
    \ class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"\
    k\">return</span> <span class=\"bp\">False</span>\n        <span class=\"k\">return</span>\
    \ <span class=\"bp\">True</span>\n\n\n<span class=\"n\">known_primes</span> <span\
    \ class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\
    \n\n<span class=\"k\">def</span> <span class=\"nf\">is_prime</span><span class=\"\
    p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"\
    n\">precision</span><span class=\"o\">=</span><span class=\"mi\">16</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Miller-Rabin\
    \ primality test&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span\
    \ class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">known_primes</span>\
    \ <span class=\"ow\">or</span> <span class=\"n\">n</span> <span class=\"ow\">in</span>\
    \ <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span>\
    \ <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"\
    k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">if</span>\
    \ <span class=\"nb\">any</span><span class=\"p\">((</span><span class=\"n\">n</span>\
    \ <span class=\"o\">%</span> <span class=\"n\">p</span><span class=\"p\">)</span>\
    \ <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">known_primes</span><span\
    \ class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"\
    bp\">False</span>\n    <span class=\"n\">d</span><span class=\"p\">,</span> <span\
    \ class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span\
    \ class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"ow\"\
    >not</span> <span class=\"n\">d</span> <span class=\"o\">%</span> <span class=\"\
    mi\">2</span><span class=\"p\">:</span>\n        <span class=\"n\">d</span><span\
    \ class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span\
    \ class=\"n\">d</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span\
    \ class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1373653</span><span\
    \ class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"\
    ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"\
    n\">try_composite</span><span class=\"p\">(</span><span class=\"n\">a</span><span\
    \ class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span\
    \ class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">s</span><span\
    \ class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span>\
    \ <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n\
    \        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"\
    o\">&lt;</span> <span class=\"mi\">25326001</span><span class=\"p\">:</span>\n\
    \            <span class=\"k\">return</span> <span class=\"ow\">not</span> <span\
    \ class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">try_composite</span><span\
    \ class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span\
    \ class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">n</span><span\
    \ class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span\
    \ class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span>\
    \ <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span>\
    \ <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span\
    \ class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">118670087467</span><span\
    \ class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"\
    n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">3215031751</span><span\
    \ class=\"p\">:</span>\n                <span class=\"k\">return</span> <span\
    \ class=\"bp\">False</span>\n            <span class=\"k\">return</span> <span\
    \ class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span\
    \ class=\"n\">try_composite</span><span class=\"p\">(</span><span class=\"n\"\
    >a</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\"\
    >,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"\
    n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"\
    n\">a</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"\
    mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"\
    p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"\
    mi\">7</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span>\
    \ <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\"\
    >2152302898747</span><span class=\"p\">:</span>\n            <span class=\"k\"\
    >return</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span\
    \ class=\"p\">(</span><span class=\"n\">try_composite</span><span class=\"p\"\
    >(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\"\
    >d</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\"\
    >,</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"\
    k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"\
    p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"\
    mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"\
    p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"\
    mi\">11</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span>\
    \ <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\"\
    >3474749660383</span><span class=\"p\">:</span>\n            <span class=\"k\"\
    >return</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span\
    \ class=\"p\">(</span><span class=\"n\">try_composite</span><span class=\"p\"\
    >(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\"\
    >d</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\"\
    >,</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"\
    k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"\
    p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"\
    mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"\
    p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"\
    mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"\
    p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">n</span>\
    \ <span class=\"o\">&lt;</span> <span class=\"mi\">341550071728321</span><span\
    \ class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"\
    ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"\
    n\">try_composite</span><span class=\"p\">(</span><span class=\"n\">a</span><span\
    \ class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span\
    \ class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">s</span><span\
    \ class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span>\
    \ <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\
    \ <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span\
    \ class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"\
    ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"\
    n\">try_composite</span><span class=\"p\">(</span><span class=\"n\">a</span><span\
    \ class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span\
    \ class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">s</span><span\
    \ class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span>\
    \ <span class=\"ow\">in</span> <span class=\"n\">known_primes</span><span class=\"\
    p\">[:</span><span class=\"n\">precision</span><span class=\"p\">])</span>\n\n\
    \n<span class=\"n\">known_primes</span> <span class=\"o\">+=</span> <span class=\"\
    p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"\
    n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span\
    \ class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">is_prime</span><span\
    \ class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span>\n\n\
    <span class=\"c1\"># Side length of square</span>\n<span class=\"n\">n</span>\
    \ <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"c1\">#\
    \ No. of primes found</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span>\
    \ <span class=\"mi\">0</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span\
    \ class=\"p\">:</span>\n    <span class=\"c1\"># Go to next odd number</span>\n\
    \    <span class=\"n\">n</span> <span class=\"o\">+=</span> <span class=\"mi\"\
    >2</span>\n    <span class=\"c1\"># Add all the primes of the form n^2 - i(n-1),\
    \ i in {1,2,3}</span>\n    <span class=\"n\">p</span> <span class=\"o\">+=</span>\
    \ <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">is_prime</span><span\
    \ class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span\
    \ class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span>\
    \ <span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">**</span><span\
    \ class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span\
    \ class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span\
    \ class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"\
    p\">)]])</span>\n    <span class=\"k\">if</span> <span class=\"mi\">100</span><span\
    \ class=\"o\">*</span><span class=\"n\">p</span><span class=\"o\">/</span><span\
    \ class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span\
    \ class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span\
    \ class=\"p\">:</span>\n        <span class=\"k\">break</span>\n<span class=\"\
    k\">print</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '4', difficulty: '5',
  empty: '7', hrdifficulty: Easy, memory: '8879', name: Spiral Primes, num: '58',
  path: 58-Spiral-Primes, runtime: '492'}
'580': {difficulty: '70', name: Squarefree Hilbert numbers}
'581': {difficulty: '30', name: 47-smooth triangular numbers}
'582': {difficulty: '45', name: Nearly isosceles 120 degree triangles}
'583': {difficulty: '45', name: Heron Envelopes}
'584': {difficulty: '95', name: Birthday Problem Revisited}
'585': {difficulty: '100', name: Nested square roots}
'586': {difficulty: '70', name: Binary Quadratic Form}
'587': {difficulty: '20', name: Concave triangle}
'588': {difficulty: '35', name: Quintinomial coefficients}
'589': {difficulty: '90', name: Poohsticks Marathon}
'59': {difficulty: '5', hrdifficulty: Easy, name: XOR decryption, num: '59'}
'590': {difficulty: '60', name: Sets with a given Least Common Multiple}
'591': {difficulty: '95', name: Best Approximations by Quadratic Integers}
'592': {difficulty: '60', name: Factorial trailing digits 2}
'593': {difficulty: '35', name: Fleeting Medians}
'594': {difficulty: '85', name: Rhombus Tilings}
'595': {difficulty: '35', name: Incremental Random Sort}
'596': {difficulty: '50', name: Number of lattice points in a hyperball}
'597': {difficulty: '100', name: Torpids}
'598': {difficulty: '40', name: Split Divisibilities}
'599': {difficulty: '60', name: Distinct Colourings of a Rubik's Cube}
'6': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5</pre></div></td><td class=\"code\"\
    ><div class=\"highlight\"><pre><span></span><span class=\"n\">T</span> <span class=\"\
    o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span\
    \ class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span> <span\
    \ class=\"nb\">abs</span><span class=\"p\">((</span><span class=\"mi\">3</span><span\
    \ class=\"o\">*</span><span class=\"n\">N</span><span class=\"o\">**</span><span\
    \ class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span\
    \ class=\"o\">*</span><span class=\"n\">N</span><span class=\"o\">**</span><span\
    \ class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span\
    \ class=\"o\">*</span><span class=\"n\">N</span><span class=\"o\">**</span><span\
    \ class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span\
    \ class=\"o\">*</span><span class=\"n\">N</span><span class=\"p\">)</span><span\
    \ class=\"o\">//</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n\
    \    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\"\
    >ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '0',
  difficulty: '5', empty: '0', hrdifficulty: Easy, memory: '8754', name: Sum Square
    Difference, num: '6', path: 6-Sum-Square-Difference, runtime: '12'}
'60': {difficulty: '20', hrdifficulty: Hard, name: Prime pair sets, num: '60'}
'600': {difficulty: '35', name: Integer sided equiangular hexagons}
'601': {difficulty: '20', name: Divisibility streaks}
'602': {difficulty: '35', name: Product of Head Counts}
'603': {difficulty: '45', name: Substring sums of prime concatenations}
'604': {difficulty: '40', name: Convex path in square}
'605': {difficulty: '25', name: Pairwise Coin-Tossing Game}
'606': {difficulty: '50', name: Gozinta Chains II}
'607': {difficulty: '20', name: Marsh Crossing}
'608': {difficulty: '80', name: Divisor Sums}
'609': {difficulty: '20', name: "\u03C0 sequences"}
'61': {difficulty: '20', hrdifficulty: Easy, name: Cyclical figurate numbers, num: '61'}
'610': {difficulty: '35', name: Roman Numerals II}
'611': {difficulty: '55', name: Hallway of square steps}
'612': {difficulty: '30', name: Friend numbers}
'613': {difficulty: '20', name: Pythagorean Ant}
'614': {difficulty: '55', name: Special partitions 2}
'615': {difficulty: '35', name: The millionth number with at least one million prime
    factors}
'616': {difficulty: '40', name: Creative numbers}
'617': {difficulty: '35', name: Mirror Power Sequence}
'618': {difficulty: '20', name: Numbers with a given prime factor sum}
'619': {name: Square subsets}
'62': {difficulty: '15', hrdifficulty: Easy, name: Cubic permutations, num: '62'}
'620': {name: Planetary Gears}
'621': {name: Expressing an integer as the sum of triangular numbers}
'622': {name: Riffle Shuffles}
'623': {name: Lambda Count}
'624': {name: Two heads are better than one}
'625': {name: Gcd sum}
'63': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5</pre></div></td><td class=\"code\"\
    ><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span\
    \ class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\"\
    >ceil</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"n\">lo</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"mi\">10</span><span\
    \ class=\"o\">**</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span\
    \ class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span\
    \ class=\"n\">N</span><span class=\"p\">))</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span\
    \ class=\"n\">N</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
  comments: '0', difficulty: '5', empty: '0', hrdifficulty: Easy, memory: '8700',
  name: Powerful Digit Counts, num: '63', path: 63-Powerful-Digit-Counts, runtime: '10'}
'64': {difficulty: '20', hrdifficulty: Easy, name: Odd period square roots, num: '64'}
'65': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"\
    ><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">coeff</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Implement eq. (7)&quot;&quot;&quot;</span>\n\
    \    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\"\
    >==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span\
    \ class=\"k\">return</span> <span class=\"mi\">2</span>\n    <span class=\"k\"\
    >elif</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"\
    mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"\
    p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">2</span><span\
    \ class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span\
    \ class=\"o\">//</span><span class=\"mi\">3</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"mi\">1</span>\n\n\n<span class=\"c1\"># Cache P(n-1) and P(n-2)</span>\n\
    <span class=\"n\">CONV</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">coeff</span><span\
    \ class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n\
    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >2</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\"\
    >+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">next_term</span> <span class=\"o\">=</span> <span class=\"n\">coeff</span><span\
    \ class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span\
    \ class=\"n\">CONV</span><span class=\"p\">[</span><span class=\"mi\">1</span><span\
    \ class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">CONV</span><span\
    \ class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\
    \    <span class=\"n\">CONV</span><span class=\"o\">.</span><span class=\"n\"\
    >append</span><span class=\"p\">(</span><span class=\"n\">next_term</span><span\
    \ class=\"p\">)</span>\n    <span class=\"k\">del</span> <span class=\"n\">CONV</span><span\
    \ class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\
    <span class=\"c1\"># Take digital sum</span>\n<span class=\"k\">print</span><span\
    \ class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">([</span><span\
    \ class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span\
    \ class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\"\
    >(</span><span class=\"n\">CONV</span><span class=\"p\">[</span><span class=\"\
    mi\">1</span><span class=\"p\">])]))</span>\n</pre></div>\n</td></tr></table>",
  comments: '2', difficulty: '15', empty: '2', hrdifficulty: Easy, memory: '8731',
  name: Convergents of $e$, num: '65', path: 65-Convergents-of-e, runtime: '10'}
'66': {difficulty: '25', hrdifficulty: Hard, name: Diophantine equation, num: '66'}
'67': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"k\">def</span> <span class=\"nf\">parents</span><span class=\"p\">(</span><span\
    \ class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Get indices\
    \ of entries adjacent to (i,j) in row j-i&quot;&quot;&quot;</span>\n    <span\
    \ class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\
    \    <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\"\
    >&lt;</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n        <span\
    \ class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span>\n \
    \   <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\"\
    >&lt;</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n        <span\
    \ class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span>\
    \ <span class=\"n\">out</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">max_sum</span><span class=\"p\">(</span><span class=\"n\">arr</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Find maximum\
    \ path sum&quot;&quot;&quot;</span>\n    <span class=\"c1\"># The previous rows\
    \ max_sums</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span>\
    \ <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"\
    n\">i</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"\
    ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span\
    \ class=\"n\">arr</span><span class=\"p\">):</span>\n        <span class=\"n\"\
    >curr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span>\
    \ <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"\
    c1\"># Handle the case where there are no parents</span>\n            <span class=\"\
    n\">curr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"\
    n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"\
    p\">]]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n\
    \            <span class=\"c1\"># Get the higher parent sum and add the current\
    \ entry</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span><span\
    \ class=\"p\">,</span> <span class=\"n\">elem</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"\
    n\">row</span><span class=\"p\">):</span>\n                <span class=\"n\">curr</span><span\
    \ class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span\
    \ class=\"n\">elem</span> <span class=\"o\">+</span> <span class=\"nb\">max</span><span\
    \ class=\"p\">([</span><span class=\"n\">parent</span><span class=\"p\">[</span><span\
    \ class=\"n\">x</span><span class=\"p\">]</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">parents</span><span\
    \ class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span\
    \ class=\"n\">j</span><span class=\"p\">)]))</span>\n        <span class=\"c1\"\
    ># We&#39;re done with the row</span>\n        <span class=\"c1\"># So move it\
    \ into memory for the next row</span>\n        <span class=\"n\">parent</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">curr</span>\n    <span class=\"\
    k\">return</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span\
    \ class=\"n\">parent</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">T</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span\
    \ class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span\
    \ class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span\
    \ class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">()</span><span\
    \ class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()))</span>\
    \ <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span\
    \ class=\"p\">)]</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">max_sum</span><span class=\"p\">(</span><span class=\"n\"\
    >rows</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span\
    \ class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n\
    </pre></div>\n</td></tr></table>", comments: '5', difficulty: '5', empty: '4',
  hrdifficulty: Medium, memory: '9726', name: Maximum Path Sum II, num: '67', path: 67-Maximum-Path-Sum-II,
  runtime: '105'}
'68': {difficulty: '25', hrdifficulty: Hard, name: Magic 5-gon ring, num: '68'}
'69': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\"\
    >def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sieve\
    \ of Eratosthenes&quot;&quot;&quot;</span>\n    <span class=\"n\">primes</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\"\
    >sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"\
    bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"\
    p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span\
    \ class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span\
    \ class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"\
    p\">]:</span>\n            <span class=\"n\">primes</span><span class=\"o\">.</span><span\
    \ class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span\
    \ class=\"p\">)</span>\n            <span class=\"c1\"># Cross out all multiples\
    \ of p</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"\
    n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    n\">p</span><span class=\"p\">):</span>\n                <span class=\"n\">sieve</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span\
    \ class=\"o\">=</span> <span class=\"bp\">False</span>\n                <span\
    \ class=\"k\">return</span> <span class=\"n\">primes</span>\n\n\n<span class=\"\
    c1\"># Get primes up to 41</span>\n<span class=\"n\">P</span> <span class=\"o\"\
    >=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"\
    mi\">41</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span\
    \ class=\"nf\">max_ratio</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Maximize k/phi(k),\
    \ where k &lt; n&quot;&quot;&quot;</span>\n    <span class=\"n\">out</span> <span\
    \ class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">i</span>\
    \ <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"c1\"\
    ># Multiply primes until upper bound</span>\n    <span class=\"k\">while</span>\
    \ <span class=\"n\">out</span><span class=\"o\">*</span><span class=\"n\">P</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span\
    \ class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n\
    \        <span class=\"n\">out</span> <span class=\"o\">*=</span> <span class=\"\
    n\">P</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"\
    p\">]</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span\
    \ class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\"\
    >out</span>\n\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_ratio</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n\
    </pre></div>\n</td></tr></table>", comments: '3', difficulty: '10', empty: '6',
  hrdifficulty: Easy, memory: '8718', name: Totient Maximum, num: '69', path: 69-Totient-Maximum,
  runtime: '10'}
'7': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\"\
    >from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span\
    \ class=\"n\">log</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\"\
    >primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sieve of Eratosthenes&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"\
    p\">[]</span>\n    <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span\
    \ class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span>\
    \ <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span>\
    \ <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\
    \    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span\
    \ class=\"n\">p</span><span class=\"p\">]:</span>\n            <span class=\"\
    n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n \
    \           <span class=\"c1\"># Cross out all multiples of p</span>\n       \
    \     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\"\
    >in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"\
    n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"\
    p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"\
    p\">):</span>\n                <span class=\"n\">sieve</span><span class=\"p\"\
    >[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\"\
    >=</span> <span class=\"bp\">False</span>\n                <span class=\"k\">return</span>\
    \ <span class=\"n\">primes</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">n_primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Generate more\
    \ than n primes with eq. (1)&quot;&quot;&quot;</span>\n    <span class=\"n\">upper</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">log</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span\
    \ class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">*</span><span\
    \ class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">log</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)))</span>\n\
    \    <span class=\"k\">return</span> <span class=\"n\">primes</span><span class=\"\
    p\">(</span><span class=\"n\">upper</span><span class=\"p\">)</span>\n\n\n<span\
    \ class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">n_primes</span><span\
    \ class=\"p\">(</span><span class=\"mi\">10001</span><span class=\"p\">)</span>\n\
    <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\"\
    >(</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\"\
    >N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\"\
    >])</span>\n</pre></div>\n</td></tr></table>", comments: '1', difficulty: '5',
  empty: '6', hrdifficulty: Easy, memory: '9966', name: 10001st Prime, num: '7', path: 7-10001-Prime,
  runtime: '41'}
'70': {difficulty: '20', hrdifficulty: Easy, name: Totient permutation, num: '70'}
'71': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"\
    code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span>\
    \ <span class=\"nf\">egcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span\
    \ class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Extended Euclidean Algorithm&quot;&quot;&quot;</span>\n\
    \    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\"\
    >==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span\
    \ class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">b</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span\
    \ class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span\
    \ class=\"p\">:</span>\n        <span class=\"n\">g</span><span class=\"p\">,</span>\
    \ <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">egcd</span><span class=\"p\">(</span><span\
    \ class=\"n\">b</span> <span class=\"o\">%</span> <span class=\"n\">a</span><span\
    \ class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n\
    \        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"\
    n\">g</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"\
    o\">-</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"\
    o\">//</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"\
    o\">*</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"\
    n\">y</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span\
    \ class=\"nf\">inv</span><span class=\"p\">(</span><span class=\"n\">a</span><span\
    \ class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">):</span>\n\
    \    <span class=\"sd\">&quot;&quot;&quot;Modular inverse&quot;&quot;&quot;</span>\n\
    \    <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">x</span><span\
    \ class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span\
    \ class=\"n\">egcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span\
    \ class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n\
    \    <span class=\"k\">if</span> <span class=\"n\">g</span> <span class=\"o\"\
    >!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span\
    \ class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"\
    k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\
    \ <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">m</span>\n\
    \n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span>\
    \ <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">N</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span\
    \ class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span\
    \ class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span\
    \ class=\"p\">())</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">a</span><span\
    \ class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\
    \    <span class=\"c1\"># Implement eq. (9)</span>\n    <span class=\"n\">den</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">*</span><span\
    \ class=\"p\">((</span><span class=\"n\">N</span><span class=\"o\">-</span><span\
    \ class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">//</span><span\
    \ class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span\
    \ class=\"n\">k</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span>\
    \ <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span\
    \ class=\"n\">den</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">)</span><span class=\"o\">//</span><span class=\"n\">b</span>\n\
    \    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\"\
    >num</span><span class=\"p\">,</span> <span class=\"n\">den</span><span class=\"\
    p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '1', difficulty: '10',
  empty: '4', hrdifficulty: Medium, memory: '8720', name: Ordered Fractions, num: '71',
  path: 71-Ordered-Fractions, runtime: '10'}
'72': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\"\
    >def</span> <span class=\"nf\">phi</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;phi(k)\
    \ for all k &lt; n&quot;&quot;&quot;</span>\n    <span class=\"n\">PHI</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span\
    \ class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span\
    \ class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">p</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"\
    n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"\
    p\">):</span>\n        <span class=\"c1\"># If p is prime, set its totient value</span>\n\
    \        <span class=\"c1\"># and that of all its multiples</span>\n        <span\
    \ class=\"k\">if</span> <span class=\"n\">PHI</span><span class=\"p\">[</span><span\
    \ class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span\
    \ class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">PHI</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"\
    p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"\
    o\">-</span><span class=\"mi\">1</span>\n            <span class=\"k\">for</span>\
    \ <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span\
    \ class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span\
    \ class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span\
    \ class=\"n\">p</span><span class=\"p\">):</span>\n                <span class=\"\
    c1\"># Initialize phi(i)</span>\n                <span class=\"k\">if</span> <span\
    \ class=\"n\">PHI</span><span class=\"p\">[</span><span class=\"n\">i</span><span\
    \ class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span\
    \ class=\"p\">:</span>\n                    <span class=\"n\">PHI</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span\
    \ class=\"o\">=</span> <span class=\"n\">i</span>\n                <span class=\"\
    c1\"># Use Euler product formula</span>\n                <span class=\"n\">PHI</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span\
    \ class=\"o\">-=</span> <span class=\"n\">PHI</span><span class=\"p\">[</span><span\
    \ class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">//</span><span\
    \ class=\"n\">p</span>\n    <span class=\"k\">return</span> <span class=\"n\"\
    >PHI</span>\n\n\n<span class=\"c1\"># Create prefix sum array</span>\n<span class=\"\
    n\">S</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"\
    n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span\
    \ class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"mf\">1e6</span><span class=\"p\">)</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span>\
    \ <span class=\"n\">phi</span><span class=\"p\">(</span><span class=\"n\">MAX</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">count</span> <span class=\"o\"\
    >+=</span> <span class=\"n\">n</span>\n    <span class=\"n\">S</span><span class=\"\
    o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"\
    n\">count</span><span class=\"p\">)</span>\n\n<span class=\"n\">T</span> <span\
    \ class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span\
    \ class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span>\
    \ <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span\
    \ class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">N</span><span\
    \ class=\"p\">])</span>\n</pre></div>\n</td></tr></table>", comments: '5', difficulty: '20',
  empty: '3', hrdifficulty: Easy, memory: '102798', name: Counting Fractions, num: '72',
  path: 72-Counting-Fractions, runtime: '1374'}
'73': {difficulty: '15', hrdifficulty: Easy, name: Counting fractions in a range,
  num: '73'}
'74': {difficulty: '15', hrdifficulty: Easy, name: Digit factorial chains, num: '74'}
'75': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\"\
    >from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span\
    \ class=\"n\">sqrt</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\"\
    >bs</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"\
    p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"\
    n\">r</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Binary Search arr from\
    \ index l to r for x&quot;&quot;&quot;</span>\n    <span class=\"k\">while</span>\
    \ <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\"\
    >r</span><span class=\"p\">:</span>\n        <span class=\"n\">mid</span> <span\
    \ class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span\
    \ class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span\
    \ class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">//</span><span\
    \ class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"\
    p\">]</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"\
    p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">mid</span>\n\
    \        <span class=\"k\">elif</span> <span class=\"n\">arr</span><span class=\"\
    p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"\
    o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n       \
    \     <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\"\
    >mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span\
    \ class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"\
    n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"\
    o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"k\">return</span>\
    \ <span class=\"n\">r</span>\n\n\n<span class=\"k\">def</span> <span class=\"\
    nf\">gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"\
    p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span\
    \ class=\"k\">while</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n\
    \        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\"\
    >b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"\
    p\">,</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"\
    n\">b</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span>\n\
    \n\n<span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"mf\">5e6</span><span class=\"\
    p\">)</span>\n<span class=\"n\">maxm</span> <span class=\"o\">=</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"\
    p\">(</span><span class=\"n\">MAX</span><span class=\"o\">//</span><span class=\"\
    mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># pythag[p] = no.\
    \ of sols for perimeter p</span>\n<span class=\"n\">pythag</span> <span class=\"\
    o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"\
    p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"\
    n\">MAX</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"\
    p\">)</span>\n<span class=\"c1\"># Don&#39;t need to search m = 0 or n = 0</span>\n\
    <span class=\"c1\"># ^ Isoceles right triangle with hypotenuse = k*sqrt(2)</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\"\
    >1</span><span class=\"p\">,</span> <span class=\"n\">maxm</span><span class=\"\
    p\">):</span>\n    <span class=\"c1\"># Make sure m &gt; n</span>\n    <span class=\"\
    k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"\
    nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"\
    p\">,</span> <span class=\"n\">m</span><span class=\"o\">+</span><span class=\"\
    mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">P</span> <span\
    \ class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span\
    \ class=\"n\">m</span><span class=\"o\">*</span><span class=\"p\">(</span><span\
    \ class=\"n\">m</span><span class=\"o\">+</span><span class=\"n\">n</span><span\
    \ class=\"p\">)</span>\n        <span class=\"c1\"># Check three conditions for\
    \ primitive pythag trip</span>\n        <span class=\"k\">if</span> <span class=\"\
    n\">P</span> <span class=\"o\">&lt;=</span> <span class=\"n\">MAX</span> <span\
    \ class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">m</span><span\
    \ class=\"o\">+</span><span class=\"n\">n</span><span class=\"p\">)</span> <span\
    \ class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span>\
    \ <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\"\
    >gcd</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"\
    p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"\
    o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        \
    \    <span class=\"c1\"># For each multiple of the PPT, count one more sol</span>\n\
    \            <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"\
    ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">MAX</span><span\
    \ class=\"o\">//</span><span class=\"n\">P</span> <span class=\"o\">+</span> <span\
    \ class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"\
    n\">pythag</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"\
    o\">*</span><span class=\"n\">P</span><span class=\"p\">]</span> <span class=\"\
    o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># Find indices\
    \ of perims with only one sol</span>\n<span class=\"n\">singular</span> <span\
    \ class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span\
    \ class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span\
    \ class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"\
    n\">pythag</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span>\
    \ <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">:</span>\n        <span class=\"n\">singular</span><span class=\"\
    o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"\
    n\">i</span><span class=\"p\">)</span>\n\n<span class=\"n\">T</span> <span class=\"\
    o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span\
    \ class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\"\
    >int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"\
    p\">())</span>\n    <span class=\"c1\"># Binary search for answer.</span>\n  \
    \  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bs</span><span\
    \ class=\"p\">(</span><span class=\"n\">singular</span><span class=\"p\">,</span>\
    \ <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span\
    \ class=\"p\">(</span><span class=\"n\">singular</span><span class=\"p\">)</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span\
    \ class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
  comments: '8', difficulty: '25', empty: '9', hrdifficulty: Easy, memory: '68566',
  name: Singular Integer Right Triangles, num: '75', path: 75-Singular-Integer-Right-Triangles,
  runtime: '2622'}
'76': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"c1\"># Report ans mod 10^9 + 7</span>\n<span class=\"n\">P</span> <span\
    \ class=\"o\">=</span> <span class=\"mi\">1000000007</span>\n<span class=\"c1\"\
    ># Create dp table</span>\n<span class=\"n\">dp</span> <span class=\"o\">=</span>\
    \ <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\
    \ <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1001</span><span\
    \ class=\"p\">)</span>\n<span class=\"c1\"># There is 1 way to partition nothing</span>\n\
    <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span\
    \ class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\
    <span class=\"c1\"># &quot;Coins&quot; are 1...1000</span>\n<span class=\"k\"\
    >for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"\
    nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"\
    p\">,</span> <span class=\"mi\">1001</span><span class=\"p\">):</span>\n    <span\
    \ class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span\
    \ class=\"p\">,</span> <span class=\"mi\">1001</span><span class=\"p\">):</span>\n\
    \        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\"\
    >j</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"\
    n\">dp</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"\
    o\">-</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n<span class=\"\
    n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span\
    \ class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n    <span class=\"c1\"># Exclude case with just N</span>\n\
    \    <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\"\
    >dp</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\"\
    >]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"\
    p\">)</span> <span class=\"o\">%</span> <span class=\"n\">P</span><span class=\"\
    p\">)</span>\n</pre></div>\n</td></tr></table>", comments: '5', difficulty: '10',
  empty: '1', hrdifficulty: Easy, memory: '8685', name: Counting Summations, num: '76',
  path: 76-Counting-Summations, runtime: '111'}
'77': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\
    33</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Sieve\
    \ of Eratosthenes&quot;&quot;&quot;</span>\n    <span class=\"n\">primes</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\"\
    >sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"\
    bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"\
    p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span\
    \ class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span\
    \ class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\"\
    >sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"\
    p\">]:</span>\n            <span class=\"n\">primes</span><span class=\"o\">.</span><span\
    \ class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span\
    \ class=\"p\">)</span>\n            <span class=\"c1\"># Cross out all multiples\
    \ of p</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"\
    n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"\
    o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"\
    n\">p</span><span class=\"p\">):</span>\n                <span class=\"n\">sieve</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span\
    \ class=\"o\">=</span> <span class=\"bp\">False</span>\n                <span\
    \ class=\"k\">return</span> <span class=\"n\">primes</span>\n\n\n<span class=\"\
    k\">def</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span\
    \ class=\"n\">coins</span><span class=\"p\">,</span> <span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;No. of ways\
    \ to write n</span>\n<span class=\"sd\">    as a sum of elements of coins&quot;&quot;&quot;</span>\n\
    \    <span class=\"c1\"># Initialize dp array</span>\n    <span class=\"n\">dp</span>\
    \ <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span\
    \ class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span\
    \ class=\"p\">)</span>\n    <span class=\"c1\"># There is only one way to make\
    \ nothing</span>\n    <span class=\"n\">dp</span><span class=\"p\">[</span><span\
    \ class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span\
    \ class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">coin</span>\
    \ <span class=\"ow\">in</span> <span class=\"n\">coins</span><span class=\"p\"\
    >:</span>\n        <span class=\"k\">for</span> <span class=\"n\">val</span> <span\
    \ class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span\
    \ class=\"n\">coin</span><span class=\"p\">,</span> <span class=\"n\">n</span><span\
    \ class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\
    \            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"\
    n\">val</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"\
    n\">dp</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"\
    o\">-</span><span class=\"n\">coin</span><span class=\"p\">]</span>\n    <span\
    \ class=\"k\">return</span> <span class=\"n\">dp</span>\n\n\n<span class=\"c1\"\
    ># N &lt;= 1000</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"mi\"\
    >1000</span><span class=\"p\">)</span>\n<span class=\"n\">COUNT</span> <span class=\"\
    o\">=</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"\
    n\">P</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"\
    p\">)</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">COUNT</span><span\
    \ class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">])</span>\n\
    </pre></div>\n</td></tr></table>", comments: '4', difficulty: '25', empty: '4',
  hrdifficulty: Easy, memory: '8543', name: Counting Summations, num: '77', path: 77-Prime-Summations,
  runtime: '10'}
'78': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\"\
    >def</span> <span class=\"nf\">sgn</span><span class=\"p\">(</span><span class=\"\
    n\">n</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">return</span> <span\
    \ class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span\
    \ class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">2</span><span\
    \ class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">2</span> <span\
    \ class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span>\
    \ <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n<span class=\"k\">def</span>\
    \ <span class=\"nf\">pent</span><span class=\"p\">(</span><span class=\"n\">n</span><span\
    \ class=\"p\">):</span>\n\t<span class=\"n\">out</span> <span class=\"o\">=</span>\
    \ <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\
    \t<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\
    \t<span class=\"n\">sign</span> <span class=\"o\">=</span> <span class=\"bp\"\
    >True</span>\n\t<span class=\"k\">while</span> <span class=\"n\">out</span><span\
    \ class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span\
    \ class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span\
    \ class=\"p\">:</span>\n\t\t<span class=\"n\">i</span> <span class=\"o\">+=</span>\
    \ <span class=\"mi\">1</span>\n\t\t<span class=\"n\">sign</span> <span class=\"\
    o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">sign</span>\n\t\t\
    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span\
    \ class=\"o\">//</span><span class=\"mi\">2</span><span class=\"o\">*</span><span\
    \ class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span\
    \ class=\"p\">)</span><span class=\"o\">**</span><span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"n\">sign</span><span class=\"p\">)</span>\n\
    \t\t<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span\
    \ class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">*</span><span\
    \ class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span\
    \ class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span><span\
    \ class=\"p\">)</span>\n\t<span class=\"k\">del</span> <span class=\"n\">out</span><span\
    \ class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\t\
    <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"\
    n\">MAX</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"mf\">6e4</span><span class=\"p\">)</span>\n<span class=\"\
    n\">PENT</span> <span class=\"o\">=</span> <span class=\"n\">pent</span><span\
    \ class=\"p\">(</span><span class=\"n\">MAX</span><span class=\"p\">)</span>\n\
    <span class=\"n\">PART</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span\
    \ class=\"p\">(</span><span class=\"n\">MAX</span> <span class=\"o\">+</span><span\
    \ class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">PART</span><span\
    \ class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span\
    \ class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># Report\
    \ ans mod 10^9 + 7</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span>\
    \ <span class=\"mi\">1000000007</span>\n\n<span class=\"k\">for</span> <span class=\"\
    n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">MAX</span><span class=\"o\">+</span><span\
    \ class=\"mi\">1</span><span class=\"p\">):</span>\n\t<span class=\"k\">for</span>\
    \ <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">p</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"\
    p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"\
    n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">PENT</span> <span\
    \ class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span>\
    \ <span class=\"n\">n</span><span class=\"p\">]):</span>\n\t\t<span class=\"n\"\
    >PART</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"\
    p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">sgn</span><span class=\"\
    p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"\
    o\">*</span><span class=\"n\">PART</span><span class=\"p\">[</span><span class=\"\
    n\">n</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"\
    p\">]</span>\n\t<span class=\"n\">PART</span><span class=\"p\">[</span><span class=\"\
    n\">n</span><span class=\"p\">]</span> <span class=\"o\">%=</span> <span class=\"\
    n\">P</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"\
    n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span\
    \ class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">PART</span><span\
    \ class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">])</span>\n\
    </pre></div>\n</td></tr></table>", comments: '1', difficulty: '30', empty: '4',
  hrdifficulty: Medium, memory: '14390', name: Counting Summations, num: '78', path: 78-Coin-Partitions,
  runtime: '9074'}
'79': {difficulty: '5', hrdifficulty: Hard, name: Passcode derivation, num: '79'}
'8': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"\
    code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span>\
    \ <span class=\"nf\">substrings</span><span class=\"p\">(</span><span class=\"\
    n\">s</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Find k-length substrings\
    \ of string s&quot;&quot;&quot;</span>\n    <span class=\"n\">out</span> <span\
    \ class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">n</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span\
    \ class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span>\
    \ <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span\
    \ class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span\
    \ class=\"p\">):</span>\n        <span class=\"n\">out</span><span class=\"o\"\
    >.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"\
    n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"\
    p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"\
    n\">k</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span\
    \ class=\"n\">out</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\"\
    >string_prod</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"\
    p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Find the product of the\
    \ digits of an integer</span>\n<span class=\"sd\">    given its string representation\
    \ s&quot;&quot;&quot;</span>\n    <span class=\"n\">ans</span> <span class=\"\
    o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span\
    \ class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span\
    \ class=\"p\">:</span>\n        <span class=\"n\">ans</span> <span class=\"o\"\
    >*=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    n\">x</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span\
    \ class=\"n\">ans</span>\n\n\n<span class=\"n\">T</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span>\
    \ <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\"\
    >(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"\
    n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span> <span class=\"\
    o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"\
    nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span\
    \ class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span\
    \ class=\"p\">())</span>\n    <span class=\"n\">S</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\"\
    >.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n    <span\
    \ class=\"c1\"># Brute force each substring</span>\n    <span class=\"n\">ans</span>\
    \ <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span\
    \ class=\"n\">string_prod</span><span class=\"p\">(</span><span class=\"n\">x</span><span\
    \ class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span>\
    \ <span class=\"ow\">in</span> <span class=\"n\">substrings</span><span class=\"\
    p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"\
    n\">K</span><span class=\"p\">)])</span>\n    <span class=\"k\">print</span><span\
    \ class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n\
    </pre></div>\n</td></tr></table>", comments: '1', difficulty: '5', empty: '4',
  hrdifficulty: Easy, memory: '8801', name: Largest Product in a Series, num: '8',
  path: 8-Largest-Product-in-a-Series, runtime: '39'}
'80': {difficulty: '20', hrdifficulty: Easy, name: Square root digital expansion,
  num: '80'}
'81': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td\
    \ class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\"\
    >N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"\
    p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span\
    \ class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span\
    \ class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span\
    \ class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span><span\
    \ class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span\
    \ class=\"n\">split</span><span class=\"p\">()))</span> <span class=\"k\">for</span>\
    \ <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n\n\
    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span\
    \ class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\
    \t<span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">N</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span\
    \ class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span\
    \ class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">N</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span\
    \ class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span\
    \ class=\"p\">]</span>\n\t<span class=\"n\">G</span><span class=\"p\">[</span><span\
    \ class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">N</span><span\
    \ class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span\
    \ class=\"o\">+=</span> <span class=\"n\">G</span><span class=\"p\">[</span><span\
    \ class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span\
    \ class=\"p\">][</span><span class=\"n\">N</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span>\
    \ <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">-</span><span\
    \ class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">):</span>\n\t<span class=\"k\">for</span>\
    \ <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span\
    \ class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">-</span><span\
    \ class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span\
    \ class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">G</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span\
    \ class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span\
    \ class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">G</span><span\
    \ class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span\
    \ class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span\
    \ class=\"p\">],</span><span class=\"n\">G</span><span class=\"p\">[</span><span\
    \ class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span\
    \ class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\
    \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">G</span><span\
    \ class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span\
    \ class=\"mi\">0</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></table>",
  comments: '0', difficulty: '10', empty: '3', hrdifficulty: Easy, memory: '8949',
  name: 'Path sum: two ways', num: '81', path: 81-Path-Sum-Two-Ways, runtime: '24'}
'82': {difficulty: '20', hrdifficulty: Easy, name: 'Path sum: three ways', num: '82'}
'83': {difficulty: '25', hrdifficulty: Hard, name: 'Path sum: four ways', num: '83'}
'84': {difficulty: '35', hrdifficulty: Hard, name: Monopoly odds, num: '84'}
'85': {difficulty: '15', hrdifficulty: Medium, name: Counting rectangles, num: '85'}
'86': {difficulty: '35', hrdifficulty: Hard, name: Cuboid route, num: '86'}
'87': {difficulty: '20', hrdifficulty: Easy, name: Prime power triples, num: '87'}
'88': {difficulty: '40', hrdifficulty: Easy, name: Product-sum numbers, num: '88'}
'89': {difficulty: '20', hrdifficulty: Easy, name: Roman numerals, num: '89'}
'9': {code: !!python/unicode "<table class=\"highlighttable\"><tr><td class=\"linenos\"\
    ><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\
    13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span\
    \ class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span\
    \ class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\
    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span>\
    \ <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span\
    \ class=\"p\">):</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span>\
    \ <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span\
    \ class=\"p\">())</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span>\
    \ <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"c1\"\
    ># a can&#39;t be more than a third the perimeter</span>\n    <span class=\"k\"\
    >for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"\
    nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"\
    p\">,</span> <span class=\"n\">N</span><span class=\"o\">//</span><span class=\"\
    mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">b</span> <span\
    \ class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">N</span><span\
    \ class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span>\
    \ <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">a</span><span\
    \ class=\"o\">*</span><span class=\"n\">N</span><span class=\"p\">)</span><span\
    \ class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span\
    \ class=\"o\">*</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span\
    \ class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">a</span><span\
    \ class=\"p\">)</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">a</span>\
    \ <span class=\"o\">-</span> <span class=\"n\">b</span>\n        <span class=\"\
    c1\"># Check that Pythagorean identity holds</span>\n        <span class=\"k\"\
    >if</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"\
    p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">c</span> <span class=\"\
    o\">==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    n\">c</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"\
    n\">c</span><span class=\"o\">*</span><span class=\"n\">c</span> <span class=\"\
    o\">==</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"\
    n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"\
    o\">*</span><span class=\"n\">b</span><span class=\"p\">:</span>\n           \
    \ <span class=\"c1\"># Keep maximal product</span>\n            <span class=\"\
    n\">ans</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"\
    p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"\
    nb\">int</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"\
    o\">*</span><span class=\"n\">b</span><span class=\"o\">*</span><span class=\"\
    n\">c</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span\
    \ class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n\
    </pre></div>\n</td></tr></table>", comments: '3', difficulty: '5', empty: '0',
  hrdifficulty: Easy, memory: '8746', name: Special Pythagorean Triplets, num: '9',
  path: 9-Special-Pythagorean-Triplet, runtime: '32'}
'90': {difficulty: '40', hrdifficulty: Easy, name: Cube digit pairs, num: '90'}
'91': {difficulty: '25', hrdifficulty: Medium, name: Right triangles with integer
    coordinates, num: '91'}
'92': {difficulty: '5', hrdifficulty: Easy, name: Square digit chains, num: '92'}
'93': {difficulty: '35', hrdifficulty: Medium, name: Arithmetic expressions, num: '93'}
'94': {difficulty: '35', hrdifficulty: Hard, name: Almost equilateral triangles, num: '94'}
'95': {difficulty: '30', hrdifficulty: Medium, name: Amicable chains, num: '95'}
'96': {difficulty: '25', hrdifficulty: Hard, name: Su Doku, num: '96'}
'97': {difficulty: '5', hrdifficulty: Hard, name: Large non-Mersenne prime, num: '97'}
'98': {difficulty: '35', hrdifficulty: Easy, name: Anagramic squares, num: '98'}
'99': {difficulty: '10', hrdifficulty: Medium, name: Largest exponential, num: '99'}
