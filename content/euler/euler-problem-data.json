{
    "312": {
        "name": "Cyclic paths on Sierpi≈Ñski graphs",
        "difficulty": "50"
    },
    "298": {
        "name": "Selective Amnesia",
        "difficulty": "60"
    },
    "82": {
        "name": "Path sum: three ways",
        "num": "82",
        "difficulty": "20",
        "hrdifficulty": "Easy"
    },
    "375": {
        "name": "Minimum of subsequences",
        "difficulty": "40"
    },
    "543": {
        "name": "Prime-Sum Numbers",
        "difficulty": "30"
    },
    "490": {
        "name": "Jumping frog",
        "difficulty": "90"
    },
    "172": {
        "name": "Investigating numbers with few repeated digits",
        "difficulty": "55",
        "hrdifficulty": "Expert"
    },
    "617": {
        "name": "Mirror Power Sequence",
        "difficulty": "35"
    },
    "337": {
        "name": "Totient Stairstep Sequences",
        "difficulty": "70"
    },
    "603": {
        "name": "Substring sums of prime concatenations",
        "difficulty": "45"
    },
    "622": {
        "name": "Riffle Shuffles"
    },
    "540": {
        "name": "Counting primitive Pythagorean triples",
        "difficulty": "30"
    },
    "294": {
        "name": "Sum of digits - experience #23",
        "difficulty": "45"
    },
    "34": {
        "name": "Digit factorials",
        "empty": "2",
        "comments": "8",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations_with_replacement</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">factorial</span>\n\n<span class=\"n\">DIGITS</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"c1\"># Correspondence from n! -&gt; n</span>\n<span class=\"c1\"># Precompute these to save time</span>\n<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n\t<span class=\"n\">DIGITS</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"c1\"># Upper bound of 7 digits</span>\n<span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Choose k elements from {0,...,9} with replacement</span>\n\t<span class=\"k\">for</span> <span class=\"n\">candidate</span> <span class=\"ow\">in</span> <span class=\"n\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">DIGITS</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">):</span>\n\t\t<span class=\"c1\"># Get multiset of candidate digits</span>\n\t\t<span class=\"n\">digits_used</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span><span class=\"n\">candidate</span><span class=\"p\">))</span>\n\t\t<span class=\"c1\"># Calculate candidate factorial sum</span>\n\t\t<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">candidate</span><span class=\"p\">])</span>\n\t\t<span class=\"c1\"># Get multiset of digits in ^</span>\n\t\t<span class=\"c1\"># Are these digit multisets the same?</span>\n\t\t<span class=\"n\">factorials_used</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">))</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">digits_used</span> <span class=\"o\">==</span> <span class=\"n\">factorials_used</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">S</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "34",
        "runtime": "200",
        "path": "34-Digit-Factorials",
        "difficulty": "5",
        "memory": "8871",
        "hrdifficulty": "Easy"
    },
    "264": {
        "name": "Triangle Centres",
        "difficulty": "85"
    },
    "585": {
        "name": "Nested square roots",
        "difficulty": "100"
    },
    "365": {
        "name": "A huge binomial coefficient",
        "difficulty": "40"
    },
    "135": {
        "name": "Same differences",
        "difficulty": "45",
        "hrdifficulty": "Medium"
    },
    "470": {
        "name": "Super Ramvok",
        "difficulty": "65"
    },
    "178": {
        "name": "Step Numbers",
        "difficulty": "55",
        "hrdifficulty": "Medium"
    },
    "615": {
        "name": "The millionth number with at least one million prime factors",
        "difficulty": "35"
    },
    "404": {
        "name": "Crisscross Ellipses",
        "difficulty": "60"
    },
    "299": {
        "name": "Three similar triangles",
        "difficulty": "60"
    },
    "594": {
        "name": "Rhombus Tilings",
        "difficulty": "85"
    },
    "296": {
        "name": "Angular Bisector and Tangent",
        "difficulty": "60"
    },
    "215": {
        "name": "Crack-free Walls",
        "difficulty": "50"
    },
    "514": {
        "name": "Geoboard Shapes",
        "difficulty": "90"
    },
    "250": {
        "name": "250250",
        "difficulty": "55"
    },
    "284": {
        "name": "Steady Squares",
        "difficulty": "55"
    },
    "11": {
        "name": "Largest product in a grid",
        "empty": "1",
        "comments": "4",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">prod</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">arr</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">ans</span> <span class=\"o\">*=</span> <span class=\"n\">x</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ans</span>\n\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()))</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)]</span>\n<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n\t<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n\t\t<span class=\"c1\"># Read rightwards</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">17</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">horiz</span> <span class=\"o\">=</span> <span class=\"n\">prod</span><span class=\"p\">([</span><span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)])</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">horiz</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t\t<span class=\"c1\"># Read downwards</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">17</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">vert</span> <span class=\"o\">=</span> <span class=\"n\">prod</span><span class=\"p\">([</span><span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)])</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">vert</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t\t<span class=\"c1\"># Read down and to the right</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">17</span> <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">17</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">ldiag</span> <span class=\"o\">=</span> <span class=\"n\">prod</span><span class=\"p\">([</span><span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)])</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">ldiag</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t\t<span class=\"c1\"># Read down and to the left</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span> <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">17</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">rdiag</span> <span class=\"o\">=</span> <span class=\"n\">prod</span><span class=\"p\">([</span><span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)])</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">rdiag</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span><span class=\"n\">horiz</span><span class=\"p\">,</span><span class=\"n\">vert</span><span class=\"p\">,</span><span class=\"n\">ldiag</span><span class=\"p\">,</span><span class=\"n\">rdiag</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "11",
        "runtime": "11",
        "path": "11-Largest-Product-in-a-Grid",
        "difficulty": "5",
        "memory": "8854",
        "hrdifficulty": "Easy"
    },
    "129": {
        "name": "Repunit divisibility",
        "difficulty": "45",
        "hrdifficulty": "Hard"
    },
    "143": {
        "name": "Investigating the Torricelli point of a triangle",
        "difficulty": "65",
        "hrdifficulty": "Easy"
    },
    "469": {
        "name": "Empty chairs",
        "difficulty": "40"
    },
    "591": {
        "name": "Best Approximations by Quadratic Integers",
        "difficulty": "95"
    },
    "602": {
        "name": "Product of Head Counts",
        "difficulty": "35"
    },
    "400": {
        "name": "Fibonacci tree game",
        "difficulty": "55"
    },
    "131": {
        "name": "Prime cube partnership",
        "difficulty": "40",
        "hrdifficulty": "Hard"
    },
    "440": {
        "name": "GCD and Tiling",
        "difficulty": "60"
    },
    "189": {
        "name": "Tri-colouring a triangular grid",
        "difficulty": "70",
        "hrdifficulty": "Easy"
    },
    "2": {
        "name": "Even Fibonacci numbers",
        "empty": "2",
        "comments": "4",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Implement eq. (5)</span>\n<span class=\"k\">def</span> <span class=\"nf\">next_even</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">even_fib_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Start with first two evens</span>\n\t<span class=\"n\">fib</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"c1\"># Go up to the maximum</span>\n\t<span class=\"k\">while</span> <span class=\"n\">next_even</span><span class=\"p\">(</span><span class=\"n\">fib</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"n\">next_even</span><span class=\"p\">(</span><span class=\"n\">fib</span><span class=\"p\">)</span>\n\t\t<span class=\"c1\"># Keep track of last two evens</span>\n\t\t<span class=\"n\">fib</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">fib</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">next_even</span><span class=\"p\">(</span><span class=\"n\">fib</span><span class=\"p\">)]</span>\n\t<span class=\"k\">return</span> <span class=\"n\">count</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">even_fib_sum</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "2",
        "runtime": "13",
        "path": "2-Even-Fibonacci-Numbers",
        "difficulty": "5",
        "memory": "8783",
        "hrdifficulty": "Easy"
    },
    "367": {
        "name": "Bozo sort",
        "difficulty": "55"
    },
    "537": {
        "name": "Counting tuples",
        "difficulty": "35"
    },
    "266": {
        "name": "Pseudo Square Root",
        "difficulty": "65"
    },
    "566": {
        "name": "Cake Icing Puzzle",
        "difficulty": "100"
    },
    "120": {
        "name": "Square remainders",
        "difficulty": "25",
        "hrdifficulty": "Easy"
    },
    "139": {
        "name": "Pythagorean tiles",
        "difficulty": "50",
        "hrdifficulty": "Easy"
    },
    "195": {
        "name": "Inscribed circles of triangles with one angle of 60 degrees",
        "difficulty": "75",
        "hrdifficulty": "Hard"
    },
    "248": {
        "name": "Numbers for which Euler‚Äôs totient function equals 13!",
        "difficulty": "70"
    },
    "577": {
        "name": "Counting hexagons",
        "difficulty": "20"
    },
    "118": {
        "name": "Pandigital prime sets",
        "difficulty": "45",
        "hrdifficulty": "Hard"
    },
    "598": {
        "name": "Split Divisibilities",
        "difficulty": "40"
    },
    "37": {
        "name": "Truncatable primes",
        "empty": "2",
        "comments": "10",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n\n<span class=\"c1\"># Modified Sieve of Eratosthenes</span>\n<span class=\"k\">def</span> <span class=\"nf\">truncatable_primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"c1\"># When a prime is found, mark all its multiples</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\t\t\t<span class=\"c1\"># Make sure it&#39;s truncatable (2,3,5,7 are not)</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"c1\"># Right truncations</span>\n\t\t\t\t<span class=\"c1\"># Chop off rightmost digit as long as truncation is prime</span>\n\t\t\t\t<span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">p</span>\n\t\t\t\t<span class=\"k\">while</span> <span class=\"n\">right</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]:</span>\n\t\t\t\t\t<span class=\"n\">right</span> <span class=\"o\">//=</span> <span class=\"mi\">10</span>\n\t\t\t\t<span class=\"c1\"># Left truncations</span>\n\t\t\t\t<span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">p</span>\n\t\t\t\t<span class=\"c1\"># Get leftmost digit</span>\n\t\t\t\t<span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\t\t\t\t<span class=\"k\">while</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">digit</span> <span class=\"o\">&lt;=</span> <span class=\"n\">left</span><span class=\"p\">:</span>\n\t\t\t\t\t<span class=\"n\">digit</span> <span class=\"o\">*=</span> <span class=\"mi\">10</span>\n\t\t\t\t<span class=\"c1\"># Chop off leftmost dig until truncation is not prime</span>\n\t\t\t\t<span class=\"k\">while</span> <span class=\"n\">left</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]:</span>\n\t\t\t\t\t<span class=\"n\">left</span> <span class=\"o\">%=</span> <span class=\"n\">digit</span>\n\t\t\t\t\t<span class=\"n\">digit</span> <span class=\"o\">//=</span> <span class=\"mi\">10</span>\n\t\t\t\t<span class=\"c1\"># Is nothing left after right and left truncations?</span>\n\t\t\t\t<span class=\"c1\"># Incomplete truncation -&gt; non-truncatable prime</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t\t\t<span class=\"n\">S</span> <span class=\"o\">+=</span> <span class=\"n\">p</span>\n\t<span class=\"k\">return</span> <span class=\"n\">S</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">truncatable_primes</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "37",
        "runtime": "347",
        "path": "37-Truncatable-Primes",
        "difficulty": "5",
        "memory": "16419",
        "hrdifficulty": "Easy"
    },
    "491": {
        "name": "Double pandigital number divisible by 11",
        "difficulty": "20"
    },
    "285": {
        "name": "Pythagorean odds",
        "difficulty": "55"
    },
    "157": {
        "name": "Solving the diophantine equation 1/a+1/b= p/10n",
        "difficulty": "65",
        "hrdifficulty": "Hard"
    },
    "53": {
        "name": "Combinatoric selections",
        "num": "53",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "450": {
        "name": "Hypocycloid and Lattice points",
        "difficulty": "100"
    },
    "309": {
        "name": "Integer Ladders",
        "difficulty": "50"
    },
    "501": {
        "name": "Eight Divisors",
        "difficulty": "40"
    },
    "431": {
        "name": "Square Space Silo",
        "difficulty": "40"
    },
    "86": {
        "name": "Cuboid route",
        "num": "86",
        "difficulty": "35",
        "hrdifficulty": "Hard"
    },
    "472": {
        "name": "Comfortable Distance II",
        "difficulty": "60"
    },
    "448": {
        "name": "Average least common multiple",
        "difficulty": "80"
    },
    "497": {
        "name": "Drunken Tower of Hanoi",
        "difficulty": "40"
    },
    "201": {
        "name": "Subsets with a unique sum",
        "difficulty": "65",
        "hrdifficulty": "Easy"
    },
    "66": {
        "name": "Diophantine equation",
        "num": "66",
        "difficulty": "25",
        "hrdifficulty": "Hard"
    },
    "414": {
        "name": "Kaprekar constant",
        "difficulty": "60"
    },
    "346": {
        "name": "Strong Repunits",
        "difficulty": "15"
    },
    "222": {
        "name": "Sphere Packing",
        "difficulty": "60"
    },
    "480": {
        "name": "The Last Question",
        "difficulty": "45"
    },
    "523": {
        "name": "First Sort I",
        "difficulty": "30"
    },
    "595": {
        "name": "Incremental Random Sort",
        "difficulty": "35"
    },
    "58": {
        "name": "Spiral primes",
        "num": "58",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "136": {
        "name": "Singleton difference",
        "difficulty": "50",
        "hrdifficulty": "Hard"
    },
    "5": {
        "name": "Smallest multiple",
        "empty": "3",
        "comments": "2",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n\n<span class=\"c1\"># Sieve of Eratosthenes</span>\n<span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\t<span class=\"k\">return</span> <span class=\"n\">primes</span>\n\n<span class=\"c1\"># Implement eq. (1)</span>\n<span class=\"k\">def</span> <span class=\"nf\">min_mult</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">ans</span> <span class=\"o\">*=</span> <span class=\"n\">p</span><span class=\"o\">**</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">))</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ans</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_mult</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "5",
        "runtime": "12",
        "path": "5-Smallest-Multiple",
        "difficulty": "5",
        "memory": "8794",
        "hrdifficulty": "Medium"
    },
    "6": {
        "name": "Sum square difference",
        "empty": "0",
        "comments": "0",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">N</span><span class=\"o\">**</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">N</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">N</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "6",
        "runtime": "12",
        "path": "6-Sum-Square-Difference",
        "difficulty": "5",
        "memory": "8754",
        "hrdifficulty": "Easy"
    },
    "478": {
        "name": "Mixtures",
        "difficulty": "100"
    },
    "235": {
        "name": "An Arithmetic Geometric sequence",
        "difficulty": "40"
    },
    "510": {
        "name": "Tangent Circles",
        "difficulty": "30"
    },
    "372": {
        "name": "Pencils of rays",
        "difficulty": "60"
    },
    "502": {
        "name": "Counting Castles",
        "difficulty": "100"
    },
    "81": {
        "name": "Path sum: two ways",
        "num": "81",
        "difficulty": "10",
        "hrdifficulty": "Easy"
    },
    "456": {
        "name": "Triangles containing the origin II",
        "difficulty": "50"
    },
    "339": {
        "name": "Peredur fab Efrawg",
        "difficulty": "70"
    },
    "405": {
        "name": "A rectangular tiling",
        "difficulty": "40"
    },
    "509": {
        "name": "Divisor Nim",
        "difficulty": "40"
    },
    "592": {
        "name": "Factorial trailing digits 2",
        "difficulty": "60"
    },
    "197": {
        "name": "Investigating the behaviour of a recursively defined sequence",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "256": {
        "name": "Tatami-Free Rooms",
        "difficulty": "80"
    },
    "550": {
        "name": "Divisor game",
        "difficulty": "55"
    },
    "192": {
        "name": "Best Approximations",
        "difficulty": "75",
        "hrdifficulty": "Hard"
    },
    "411": {
        "name": "Uphill paths",
        "difficulty": "45"
    },
    "477": {
        "name": "Number Sequence Game",
        "difficulty": "65"
    },
    "288": {
        "name": "An enormous factorial",
        "difficulty": "35"
    },
    "150": {
        "name": "Searching a triangular array for a sub-triangle having minimum-sum",
        "difficulty": "55",
        "hrdifficulty": "Easy"
    },
    "265": {
        "name": "Binary Circles",
        "difficulty": "40"
    },
    "293": {
        "name": "Pseudo-Fortunate Numbers",
        "difficulty": "30"
    },
    "224": {
        "name": "Almost right-angled triangles II",
        "difficulty": "75"
    },
    "234": {
        "name": "Semidivisible numbers",
        "difficulty": "50"
    },
    "177": {
        "name": "Integer angled Quadrilaterals",
        "difficulty": "80",
        "hrdifficulty": "Hard"
    },
    "489": {
        "name": "Common factors between two sequences",
        "difficulty": "100"
    },
    "341": {
        "name": "Golomb's self-describing sequence",
        "difficulty": "45"
    },
    "575": {
        "name": "Wandering Robots",
        "difficulty": "35"
    },
    "32": {
        "name": "Pandigital products",
        "empty": "2",
        "comments": "6",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">permutations</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Get all pandigital numbers</span>\n<span class=\"n\">PANDIGITAL</span> <span class=\"o\">=</span> <span class=\"n\">permutations</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))))</span>\n<span class=\"c1\"># Use set to avoid duplicates</span>\n<span class=\"n\">PROD</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">perm</span> <span class=\"ow\">in</span> <span class=\"n\">PANDIGITAL</span><span class=\"p\">:</span>\n\t<span class=\"c1\"># Split into 3 parts</span>\n\t<span class=\"c1\"># Make sure end of second part is after beginning</span>\n\t<span class=\"c1\"># j &gt; i</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">):</span>\n\t\t\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">perm</span><span class=\"p\">)</span>\n\t\t\t<span class=\"c1\"># Check if three parts in order are valid</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">:]):</span>\n\t\t\t\t<span class=\"n\">PROD</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">:]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">PROD</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "32",
        "runtime": "8495",
        "path": "32-Pandigital-Products",
        "difficulty": "5",
        "memory": "8810",
        "hrdifficulty": "Easy"
    },
    "241": {
        "name": "Perfection Quotients",
        "difficulty": "80"
    },
    "328": {
        "name": "Lowest-cost Search",
        "difficulty": "95"
    },
    "52": {
        "name": "Permuted multiples",
        "num": "52",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "204": {
        "name": "Generalised Hamming Numbers",
        "difficulty": "30",
        "hrdifficulty": "Medium"
    },
    "229": {
        "name": "Four Representations using Squares",
        "difficulty": "70"
    },
    "325": {
        "name": "Stone Game II",
        "difficulty": "80"
    },
    "462": {
        "name": "Permutation of 3-smooth numbers",
        "difficulty": "60"
    },
    "553": {
        "name": "Power sets of power sets",
        "difficulty": "80"
    },
    "547": {
        "name": "Distance of random points within hollow square laminae",
        "difficulty": "70"
    },
    "407": {
        "name": "Idempotents",
        "difficulty": "20"
    },
    "425": {
        "name": "Prime connection",
        "difficulty": "25"
    },
    "552": {
        "name": "Chinese leftovers II",
        "difficulty": "40"
    },
    "112": {
        "name": "Bouncy numbers",
        "difficulty": "15",
        "hrdifficulty": "Advanced"
    },
    "563": {
        "name": "Robot Welders",
        "difficulty": "45"
    },
    "427": {
        "name": "n-sequences",
        "difficulty": "95"
    },
    "606": {
        "name": "Gozinta Chains II",
        "difficulty": "50"
    },
    "476": {
        "name": "Circle Packing II",
        "difficulty": "45"
    },
    "399": {
        "name": "Squarefree Fibonacci Numbers",
        "difficulty": "45"
    },
    "261": {
        "name": "Pivotal Square Sums",
        "difficulty": "85"
    },
    "415": {
        "name": "Titanic sets",
        "difficulty": "100"
    },
    "578": {
        "name": "Integers with decreasing prime powers",
        "difficulty": "80"
    },
    "190": {
        "name": "Maximising a weighted product",
        "difficulty": "50",
        "hrdifficulty": "Hard"
    },
    "113": {
        "name": "Non-bouncy numbers",
        "difficulty": "30",
        "hrdifficulty": "Easy"
    },
    "159": {
        "name": "Digital root sums of factorisations",
        "difficulty": "60",
        "hrdifficulty": "Medium"
    },
    "260": {
        "name": "Stone Game",
        "difficulty": "70"
    },
    "360": {
        "name": "Scary Sphere",
        "difficulty": "50"
    },
    "623": {
        "name": "Lambda Count"
    },
    "401": {
        "name": "Sum of squares of divisors",
        "difficulty": "25"
    },
    "363": {
        "name": "B√©zier Curves",
        "difficulty": "35"
    },
    "457": {
        "name": "A polynomial modulo the square of a prime",
        "difficulty": "35"
    },
    "51": {
        "name": "Prime digit replacements",
        "num": "51",
        "difficulty": "15",
        "hrdifficulty": "Advanced"
    },
    "357": {
        "name": "Prime generating integers",
        "difficulty": "10"
    },
    "272": {
        "name": "Modular Cubes, part 2",
        "difficulty": "80"
    },
    "465": {
        "name": "Polar polygons",
        "difficulty": "85"
    },
    "496": {
        "name": "Incenter and circumcenter of triangle",
        "difficulty": "50"
    },
    "625": {
        "name": "Gcd sum"
    },
    "389": {
        "name": "Platonic Dice",
        "difficulty": "30"
    },
    "170": {
        "name": "Find the largest 0 to 9 pandigital that can be formed by concatenating products",
        "difficulty": "70",
        "hrdifficulty": "Easy"
    },
    "620": {
        "name": "Planetary Gears"
    },
    "381": {
        "name": "(prime-k) factorial",
        "difficulty": "15"
    },
    "191": {
        "name": "Prize Strings",
        "difficulty": "35",
        "hrdifficulty": "Easy"
    },
    "418": {
        "name": "Factorisation triples",
        "difficulty": "40"
    },
    "128": {
        "name": "Hexagonal tile differences",
        "difficulty": "55",
        "hrdifficulty": "Hard"
    },
    "424": {
        "name": "Kakuro",
        "difficulty": "60"
    },
    "588": {
        "name": "Quintinomial coefficients",
        "difficulty": "35"
    },
    "532": {
        "name": "Nanobots on Geodesics",
        "difficulty": "55"
    },
    "392": {
        "name": "Enmeshed unit circle",
        "difficulty": "35"
    },
    "70": {
        "name": "Totient permutation",
        "num": "70",
        "difficulty": "20",
        "hrdifficulty": "Easy"
    },
    "42": {
        "name": "Coded triangle numbers",
        "num": "42",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "449": {
        "name": "Chocolate covered candy",
        "difficulty": "35"
    },
    "348": {
        "name": "Sum of a square and a cube",
        "difficulty": "25"
    },
    "527": {
        "name": "Randomized Binary Search",
        "difficulty": "30"
    },
    "377": {
        "name": "Sum of digits, experience 13",
        "difficulty": "45"
    },
    "301": {
        "name": "Nim",
        "difficulty": "15"
    },
    "409": {
        "name": "Nim Extreme",
        "difficulty": "55"
    },
    "271": {
        "name": "Modular Cubes, part 1",
        "difficulty": "60"
    },
    "107": {
        "name": "Minimal network",
        "difficulty": "35",
        "hrdifficulty": "Easy"
    },
    "218": {
        "name": "Perfect right-angled triangles",
        "difficulty": "55"
    },
    "163": {
        "name": "Cross-hatched triangles",
        "difficulty": "70",
        "hrdifficulty": "Easy"
    },
    "221": {
        "name": "Alexandrian Integers",
        "difficulty": "65"
    },
    "508": {
        "name": "Integers in base i-1",
        "difficulty": "85"
    },
    "127": {
        "name": "abc-hits",
        "difficulty": "50",
        "hrdifficulty": "Advanced"
    },
    "362": {
        "name": "Squarefree factors",
        "difficulty": "70"
    },
    "535": {
        "name": "Fractal Sequence",
        "difficulty": "55"
    },
    "232": {
        "name": "The Race",
        "difficulty": "65"
    },
    "19": {
        "name": "Counting Sundays",
        "num": "19",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "46": {
        "name": "Goldbach's other conjecture",
        "num": "46",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "68": {
        "name": "Magic 5-gon ring",
        "num": "68",
        "difficulty": "25",
        "hrdifficulty": "Hard"
    },
    "38": {
        "name": "Pandigital multiples",
        "num": "38",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "64": {
        "name": "Odd period square roots",
        "num": "64",
        "difficulty": "20",
        "hrdifficulty": "Easy"
    },
    "59": {
        "name": "XOR decryption",
        "num": "59",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "188": {
        "name": "The hyperexponentiation of a number",
        "difficulty": "35",
        "hrdifficulty": "Expert"
    },
    "48": {
        "name": "Self powers",
        "num": "48",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "464": {
        "name": "M√∂bius function and intervals",
        "difficulty": "60"
    },
    "356": {
        "name": "Largest roots of cubic polynomials",
        "difficulty": "60"
    },
    "137": {
        "name": "Fibonacci golden nuggets",
        "difficulty": "50",
        "hrdifficulty": "Easy"
    },
    "173": {
        "name": "Using up to one million tiles how many different \"hollow\" square laminae can be formed?",
        "difficulty": "30",
        "hrdifficulty": "Medium"
    },
    "76": {
        "name": "Counting summations",
        "num": "76",
        "difficulty": "10",
        "hrdifficulty": "Easy"
    },
    "258": {
        "name": "A lagged Fibonacci sequence",
        "difficulty": "70"
    },
    "538": {
        "name": "Maximum quadrilaterals",
        "difficulty": "40"
    },
    "18": {
        "name": "Maximum path sum I",
        "empty": "2",
        "comments": "6",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Get indices of adjacent entries to (i,j) in row above</span>\n<span class=\"k\">def</span> <span class=\"nf\">parents</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">):</span>\n\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_sum</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># The previous rows max_sums</span>\n\t<span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t<span class=\"c1\"># Handle the case where there are no parents</span>\n\t\t\t<span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"c1\"># Get the higher parent sum and add the current entry</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">elem</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">elem</span> <span class=\"o\">+</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">parents</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">)]))</span>\n\t\t<span class=\"c1\"># We&#39;re done with the row</span>\n\t\t<span class=\"c1\"># So move it into memory for the next row</span>\n\t\t<span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">curr</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()))</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">max_sum</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">)</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "18",
        "runtime": "10",
        "path": "18-Maximum-Path-Sum-I",
        "difficulty": "5",
        "memory": "8792",
        "hrdifficulty": "Easy"
    },
    "307": {
        "name": "Chip Defects",
        "difficulty": "35"
    },
    "560": {
        "name": "Coprime Nim",
        "difficulty": "70"
    },
    "408": {
        "name": "Admissible paths through a grid",
        "difficulty": "50"
    },
    "249": {
        "name": "Prime Subset Sums",
        "difficulty": "60"
    },
    "452": {
        "name": "Long Products",
        "difficulty": "45"
    },
    "580": {
        "name": "Squarefree Hilbert numbers",
        "difficulty": "70"
    },
    "23": {
        "name": "Non-abundant sums",
        "empty": "4",
        "comments": "4",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">sqrt</span>\n\n<span class=\"c1\"># Find sum of divisors of n</span>\n<span class=\"k\">def</span> <span class=\"nf\">divisor_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">i</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">n</span><span class=\"o\">//</span><span class=\"n\">i</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">n</span><span class=\"o\">//</span><span class=\"n\">i</span>\n\t<span class=\"k\">return</span> <span class=\"n\">s</span> <span class=\"o\">-</span> <span class=\"n\">n</span>\n\n<span class=\"c1\"># We don&#39;t need to go past this</span>\n<span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">28123</span>\n<span class=\"n\">ABUNDANT</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">MAX</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">divisor_sum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">ABUNDANT</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">abundant_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">28123</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"bp\">True</span>\n\t<span class=\"c1\"># Find all the differences</span>\n\t<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ABUNDANT</span><span class=\"p\">)</span>\n\t<span class=\"c1\"># Check if any of these differences are abundant</span>\n\t<span class=\"k\">if</span> <span class=\"n\">diff</span> <span class=\"o\">&amp;</span> <span class=\"n\">ABUNDANT</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"bp\">True</span>\n\t<span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">if</span> <span class=\"n\">abundant_sum</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;YES&quot;</span><span class=\"p\">)</span>\n\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;NO&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "23",
        "runtime": "2980",
        "path": "23-Non-Abundant-Sums",
        "difficulty": "5",
        "memory": "10268",
        "hrdifficulty": "Easy"
    },
    "211": {
        "name": "Divisor Square Sum",
        "difficulty": "50",
        "hrdifficulty": "Hard"
    },
    "461": {
        "name": "Almost Pi",
        "difficulty": "30"
    },
    "355": {
        "name": "Maximal coprime subset",
        "difficulty": "70"
    },
    "438": {
        "name": "Integer part of polynomial equation's solutions",
        "difficulty": "95"
    },
    "443": {
        "name": "GCD sequence",
        "difficulty": "30"
    },
    "557": {
        "name": "Cutting triangles",
        "difficulty": "55"
    },
    "233": {
        "name": "Lattice points on a circle",
        "difficulty": "70"
    },
    "203": {
        "name": "Squarefree Binomial Coefficients",
        "difficulty": "25",
        "hrdifficulty": "Medium"
    },
    "317": {
        "name": "Firecracker",
        "difficulty": "35"
    },
    "169": {
        "name": "Exploring the number of different ways a number can be expressed as a sum of powers of 2",
        "difficulty": "50",
        "hrdifficulty": "Easy"
    },
    "416": {
        "name": "A frog's trip",
        "difficulty": "80"
    },
    "403": {
        "name": "Lattice points enclosed by parabola and line",
        "difficulty": "55"
    },
    "184": {
        "name": "Triangles containing the origin",
        "difficulty": "75",
        "hrdifficulty": "Hard"
    },
    "156": {
        "name": "Counting Digits",
        "difficulty": "70",
        "hrdifficulty": "Medium"
    },
    "242": {
        "name": "Odd Triplets",
        "difficulty": "75"
    },
    "165": {
        "name": "Intersections",
        "difficulty": "65",
        "hrdifficulty": "Easy"
    },
    "335": {
        "name": "Gathering the beans",
        "difficulty": "65"
    },
    "597": {
        "name": "Torpids",
        "difficulty": "100"
    },
    "83": {
        "name": "Path sum: four ways",
        "num": "83",
        "difficulty": "25",
        "hrdifficulty": "Hard"
    },
    "100": {
        "name": "Arranged probability",
        "num": "100",
        "difficulty": "30",
        "hrdifficulty": "Advanced"
    },
    "486": {
        "name": "Palindrome-containing strings",
        "difficulty": "70"
    },
    "176": {
        "name": "Right-angled triangles that share a cathetus",
        "difficulty": "70",
        "hrdifficulty": "Medium"
    },
    "300": {
        "name": "Protein folding",
        "difficulty": "50"
    },
    "115": {
        "name": "Counting block combinations II",
        "difficulty": "35",
        "hrdifficulty": "Medium"
    },
    "75": {
        "name": "Singular integer right triangles",
        "num": "75",
        "difficulty": "25",
        "hrdifficulty": "Easy"
    },
    "228": {
        "name": "Minkowski Sums",
        "difficulty": "70"
    },
    "359": {
        "name": "Hilbert's New Hotel",
        "difficulty": "25"
    },
    "269": {
        "name": "Polynomials with at least one integer root",
        "difficulty": "80"
    },
    "385": {
        "name": "Ellipses inside triangles",
        "difficulty": "70"
    },
    "238": {
        "name": "Infinite string tour",
        "difficulty": "75"
    },
    "49": {
        "name": "Prime permutations",
        "num": "49",
        "difficulty": "5",
        "hrdifficulty": "Hard"
    },
    "92": {
        "name": "Square digit chains",
        "num": "92",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "556": {
        "name": "Squarefree Gaussian Integers",
        "difficulty": "80"
    },
    "77": {
        "name": "Prime summations",
        "num": "77",
        "difficulty": "25",
        "hrdifficulty": "Easy"
    },
    "373": {
        "name": "Circumscribed Circles",
        "difficulty": "75"
    },
    "324": {
        "name": "Building a tower",
        "difficulty": "50"
    },
    "305": {
        "name": "Reflexive Position",
        "difficulty": "60"
    },
    "453": {
        "name": "Lattice Quadrilaterals",
        "difficulty": "95"
    },
    "15": {
        "name": "Lattice paths",
        "empty": "3",
        "comments": "3",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span>\n\n<span class=\"c1\"># Modular inverse</span>\n<span class=\"c1\"># Fermat&#39;s Little Theorem</span>\n<span class=\"k\">def</span> <span class=\"nf\">inv</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">choose</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\t<span class=\"c1\"># Recurrence in eq. (2)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">P</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"n\">P</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ans</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span><span class=\"p\">,</span><span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">choose</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">+</span><span class=\"n\">M</span><span class=\"p\">,</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"n\">M</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></table>",
        "num": "15",
        "runtime": "12",
        "path": "15-Lattice-Paths",
        "difficulty": "5",
        "memory": "8828",
        "hrdifficulty": "Easy"
    },
    "398": {
        "name": "Cutting rope",
        "difficulty": "55"
    },
    "454": {
        "name": "Diophantine reciprocals III",
        "difficulty": "50"
    },
    "175": {
        "name": "Fractions involving the number of different ways a number can be expressed as a sum of powers of 2",
        "difficulty": "70",
        "hrdifficulty": "Medium"
    },
    "428": {
        "name": "Necklace of circles",
        "difficulty": "90"
    },
    "236": {
        "name": "Luxury Hampers",
        "difficulty": "80"
    },
    "605": {
        "name": "Pairwise Coin-Tossing Game",
        "difficulty": "25"
    },
    "105": {
        "name": "Special subset sums: testing",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "279": {
        "name": "Triangles with integral sides and an integral angle",
        "difficulty": "60"
    },
    "322": {
        "name": "Binomial coefficients divisible by 10",
        "difficulty": "70"
    },
    "616": {
        "name": "Creative numbers",
        "difficulty": "40"
    },
    "134": {
        "name": "Prime pair connection",
        "difficulty": "45",
        "hrdifficulty": "Medium"
    },
    "152": {
        "name": "Writing 1/2 as a sum of inverse squares",
        "difficulty": "65",
        "hrdifficulty": "Advanced"
    },
    "31": {
        "name": "Coin sums",
        "empty": "1",
        "comments": "3",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">coins</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Initialize dp array</span>\n\t<span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n\t<span class=\"c1\"># There is only one way to make nothing</span>\n\t<span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">for</span> <span class=\"n\">coin</span> <span class=\"ow\">in</span> <span class=\"n\">coins</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">coin</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t\t<span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"o\">-</span><span class=\"n\">coin</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"mi\">1000000007</span>\n\t<span class=\"k\">return</span> <span class=\"n\">dp</span>\n\n<span class=\"n\">COINS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">]</span>\n<span class=\"c1\"># N &lt;= 10^5</span>\n<span class=\"n\">COUNT</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">COINS</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">1e5</span><span class=\"p\">))</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">COUNT</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></table>",
        "num": "31",
        "runtime": "152",
        "path": "31-Coin-Sums",
        "difficulty": "5",
        "memory": "12531",
        "hrdifficulty": "Easy"
    },
    "161": {
        "name": "Triominoes",
        "difficulty": "70",
        "hrdifficulty": "Hard"
    },
    "554": {
        "name": "Centaurs on a chess board",
        "difficulty": "75"
    },
    "314": {
        "name": "The Mouse on the Moon",
        "difficulty": "80"
    },
    "559": {
        "name": "Permuted Matrices",
        "difficulty": "95"
    },
    "130": {
        "name": "Composites with prime repunit property",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "434": {
        "name": "Rigid graphs",
        "difficulty": "75"
    },
    "599": {
        "name": "Distinct Colourings of a Rubik's Cube",
        "difficulty": "60"
    },
    "379": {
        "name": "Least common multiple count",
        "difficulty": "70"
    },
    "447": {
        "name": "Retractions C",
        "difficulty": "95"
    },
    "507": {
        "name": "Shortest Lattice Vector",
        "difficulty": "90"
    },
    "244": {
        "name": "Sliders",
        "difficulty": "70"
    },
    "558": {
        "name": "Irrational base",
        "difficulty": "60"
    },
    "618": {
        "name": "Numbers with a given prime factor sum",
        "difficulty": "20"
    },
    "380": {
        "name": "Amazing Mazes!",
        "difficulty": "60"
    },
    "349": {
        "name": "Langton's ant",
        "difficulty": "35"
    },
    "422": {
        "name": "Sequence of points on a hyperbola",
        "difficulty": "75"
    },
    "366": {
        "name": "Stone Game III",
        "difficulty": "40"
    },
    "334": {
        "name": "Spilling the beans",
        "difficulty": "65"
    },
    "125": {
        "name": "Palindromic sums",
        "difficulty": "25",
        "hrdifficulty": "Easy"
    },
    "481": {
        "name": "Chef Showdown",
        "difficulty": "70"
    },
    "268": {
        "name": "Counting numbers with at least four distinct prime factors less than 100",
        "difficulty": "70"
    },
    "319": {
        "name": "Bounded Sequences",
        "difficulty": "90"
    },
    "611": {
        "name": "Hallway of square steps",
        "difficulty": "55"
    },
    "71": {
        "name": "Ordered fractions",
        "num": "71",
        "difficulty": "10",
        "hrdifficulty": "Medium"
    },
    "220": {
        "name": "Heighway Dragon",
        "difficulty": "55"
    },
    "506": {
        "name": "Clock sequence",
        "difficulty": "30"
    },
    "247": {
        "name": "Squares under a hyperbola",
        "difficulty": "65"
    },
    "302": {
        "name": "Strong Achilles Numbers",
        "difficulty": "60"
    },
    "282": {
        "name": "The Ackermann function",
        "difficulty": "70"
    },
    "308": {
        "name": "An amazing Prime-generating Automaton",
        "difficulty": "60"
    },
    "526": {
        "name": "Largest prime factors of consecutive numbers",
        "difficulty": "60"
    },
    "102": {
        "name": "Triangle containment",
        "difficulty": "15",
        "hrdifficulty": "Easy"
    },
    "374": {
        "name": "Maximum Integer Partition Product",
        "difficulty": "40"
    },
    "435": {
        "name": "Polynomials of Fibonacci numbers",
        "difficulty": "30"
    },
    "206": {
        "name": "Concealed Square",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "63": {
        "name": "Powerful digit counts",
        "num": "63",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "370": {
        "name": "Geometric triangles",
        "difficulty": "65"
    },
    "217": {
        "name": "Balanced Numbers",
        "difficulty": "70"
    },
    "483": {
        "name": "Repeated permutation",
        "difficulty": "100"
    },
    "561": {
        "name": "Divisor Pairs",
        "difficulty": "30"
    },
    "613": {
        "name": "Pythagorean Ant",
        "difficulty": "20"
    },
    "26": {
        "name": "Reciprocal cycles",
        "num": "26",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "180": {
        "name": "Rational zeros of a function of three variables",
        "difficulty": "75",
        "hrdifficulty": "Medium"
    },
    "207": {
        "name": "Integer partition equations",
        "difficulty": "40",
        "hrdifficulty": "Easy"
    },
    "78": {
        "name": "Coin partitions",
        "num": "78",
        "difficulty": "30",
        "hrdifficulty": "Medium"
    },
    "581": {
        "name": "47-smooth triangular numbers",
        "difficulty": "30"
    },
    "183": {
        "name": "Maximum product of parts",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "186": {
        "name": "Connectedness of a network",
        "difficulty": "60",
        "hrdifficulty": "Easy"
    },
    "484": {
        "name": "Arithmetic Derivative",
        "difficulty": "100"
    },
    "61": {
        "name": "Cyclical figurate numbers",
        "num": "61",
        "difficulty": "20",
        "hrdifficulty": "Easy"
    },
    "353": {
        "name": "Risky moon",
        "difficulty": "50"
    },
    "214": {
        "name": "Totient Chains",
        "difficulty": "40",
        "hrdifficulty": "Hard"
    },
    "519": {
        "name": "Tricolored Coin Fountains",
        "difficulty": "50"
    },
    "144": {
        "name": "Investigating multiple reflections of a laser beam",
        "difficulty": "50",
        "hrdifficulty": "Medium"
    },
    "124": {
        "name": "Ordered radicals",
        "difficulty": "25",
        "hrdifficulty": "Advanced"
    },
    "512": {
        "name": "Sums of totients of powers",
        "difficulty": "25"
    },
    "55": {
        "name": "Lychrel numbers",
        "num": "55",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "289": {
        "name": "Eulerian Cycles",
        "difficulty": "90"
    },
    "604": {
        "name": "Convex path in square",
        "difficulty": "40"
    },
    "104": {
        "name": "Pandigital Fibonacci ends",
        "difficulty": "25",
        "hrdifficulty": "Easy"
    },
    "24": {
        "name": "Lexicographic permutations",
        "empty": "2",
        "comments": "6",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">factorial</span>\n\n<span class=\"c1\"># Returns the n-th lexicographic permutation of s</span>\n<span class=\"k\">def</span> <span class=\"nf\">lex_perm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Write s in &#39;factorial base&#39;</span>\n\t<span class=\"n\">n</span> <span class=\"o\">%=</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n\t<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"c1\"># Start with big factorials and subtract</span>\n\t<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">elem</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">indices</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">n</span> <span class=\"o\">-=</span> <span class=\"n\">elem</span> <span class=\"o\">*</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">indices</span><span class=\"p\">:</span>\n\t\t<span class=\"c1\"># Remove the i-th remaining element</span>\n\t\t<span class=\"c1\"># i is the coeffcient in the</span>\n\t\t<span class=\"c1\"># factorial base expansion of n</span>\n\t\t<span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t<span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;abcdefghijklm&quot;</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lex_perm</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"n\">S</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "24",
        "runtime": "11",
        "path": "24-Lexicographic-Permutations",
        "difficulty": "5",
        "memory": "8797",
        "hrdifficulty": "Easy"
    },
    "394": {
        "name": "Eating pie",
        "difficulty": "55"
    },
    "181": {
        "name": "Investigating in how many ways objects of two different colours can be grouped",
        "difficulty": "70",
        "hrdifficulty": "Easy"
    },
    "182": {
        "name": "RSA encryption",
        "difficulty": "60",
        "hrdifficulty": "Expert"
    },
    "252": {
        "name": "Convex Holes",
        "difficulty": "80"
    },
    "84": {
        "name": "Monopoly odds",
        "num": "84",
        "difficulty": "35",
        "hrdifficulty": "Hard"
    },
    "225": {
        "name": "Tribonacci non-divisors",
        "difficulty": "45"
    },
    "85": {
        "name": "Counting rectangles",
        "num": "85",
        "difficulty": "15",
        "hrdifficulty": "Medium"
    },
    "91": {
        "name": "Right triangles with integer coordinates",
        "num": "91",
        "difficulty": "25",
        "hrdifficulty": "Medium"
    },
    "50": {
        "name": "Consecutive prime sum",
        "num": "50",
        "difficulty": "5",
        "hrdifficulty": "Hard"
    },
    "521": {
        "name": "Smallest prime factor",
        "difficulty": "45"
    },
    "549": {
        "name": "Divisibility of factorials",
        "difficulty": "10"
    },
    "69": {
        "name": "Totient maximum",
        "num": "69",
        "difficulty": "10",
        "hrdifficulty": "Easy"
    },
    "455": {
        "name": "Powers With Trailing Digits",
        "difficulty": "40"
    },
    "567": {
        "name": "Reciprocal games I",
        "difficulty": "50"
    },
    "16": {
        "name": "Power digit sum",
        "empty": "1",
        "comments": "0",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">digit_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"k\">while</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">10</span>\n\t\t<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"o\">%</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">10</span>\n\t<span class=\"k\">return</span> <span class=\"n\">s</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">digit_sum</span><span class=\"p\">(</span><span class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></table>",
        "num": "16",
        "runtime": "11",
        "path": "16-Power-Digit-Sum",
        "difficulty": "5",
        "memory": "8779",
        "hrdifficulty": "Easy"
    },
    "426": {
        "name": "Box-ball system",
        "difficulty": "75"
    },
    "237": {
        "name": "Tours on a 4 x n playing board",
        "difficulty": "70"
    },
    "313": {
        "name": "Sliding game",
        "difficulty": "30"
    },
    "202": {
        "name": "Laserbeam",
        "difficulty": "60",
        "hrdifficulty": "Hard"
    },
    "216": {
        "name": "Investigating the primality of numbers of the form 2n2-1",
        "difficulty": "45"
    },
    "475": {
        "name": "Music festival",
        "difficulty": "50"
    },
    "90": {
        "name": "Cube digit pairs",
        "num": "90",
        "difficulty": "40",
        "hrdifficulty": "Easy"
    },
    "354": {
        "name": "Distances in a bee's honeycomb",
        "difficulty": "65"
    },
    "122": {
        "name": "Efficient exponentiation",
        "difficulty": "40",
        "hrdifficulty": "Easy"
    },
    "210": {
        "name": "Obtuse Angled Triangles",
        "difficulty": "70",
        "hrdifficulty": "Medium"
    },
    "419": {
        "name": "Look and say sequence",
        "difficulty": "50"
    },
    "9": {
        "name": "Special Pythagorean triplet",
        "empty": "0",
        "comments": "3",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\t<span class=\"c1\"># a can&#39;t be more than a third the perimeter</span>\n\t<span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"o\">//</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span>\n\t\t<span class=\"c1\"># Check that Pythagorean identity holds</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">c</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">:</span>\n\t\t\t<span class=\"c1\"># Keep maximal product</span>\n\t\t\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">))</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "9",
        "runtime": "32",
        "path": "9-Special-Pythagorean-Triplet",
        "difficulty": "5",
        "memory": "8746",
        "hrdifficulty": "Easy"
    },
    "151": {
        "name": "Paper sheets of standard sizes: an expected-value problem",
        "difficulty": "50",
        "hrdifficulty": "Medium"
    },
    "395": {
        "name": "Pythagorean tree",
        "difficulty": "40"
    },
    "624": {
        "name": "Two heads are better than one"
    },
    "149": {
        "name": "Searching for a maximum-sum subsequence",
        "difficulty": "50",
        "hrdifficulty": "Hard"
    },
    "111": {
        "name": "Primes with runs",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "276": {
        "name": "Primitive Triangles",
        "difficulty": "75"
    },
    "371": {
        "name": "Licence plates",
        "difficulty": "30"
    },
    "326": {
        "name": "Modulo Summations",
        "difficulty": "55"
    },
    "95": {
        "name": "Amicable chains",
        "num": "95",
        "difficulty": "30",
        "hrdifficulty": "Medium"
    },
    "40": {
        "name": "Champernowne's constant",
        "num": "40",
        "difficulty": "5",
        "hrdifficulty": "Medium"
    },
    "444": {
        "name": "The Roundtable Lottery",
        "difficulty": "60"
    },
    "619": {
        "name": "Square subsets"
    },
    "315": {
        "name": "Digital root clocks",
        "difficulty": "20"
    },
    "88": {
        "name": "Product-sum numbers",
        "num": "88",
        "difficulty": "40",
        "hrdifficulty": "Easy"
    },
    "62": {
        "name": "Cubic permutations",
        "num": "62",
        "difficulty": "15",
        "hrdifficulty": "Easy"
    },
    "612": {
        "name": "Friend numbers",
        "difficulty": "30"
    },
    "164": {
        "name": "Numbers for which no three consecutive digits have a sum greater than a given value",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "110": {
        "name": "Diophantine reciprocals II",
        "difficulty": "40",
        "hrdifficulty": "Easy"
    },
    "621": {
        "name": "Expressing an integer as the sum of triangular numbers"
    },
    "572": {
        "name": "Idempotent matrices",
        "difficulty": "50"
    },
    "412": {
        "name": "Gnomon numbering",
        "difficulty": "50"
    },
    "281": {
        "name": "Pizza Toppings",
        "difficulty": "55"
    },
    "155": {
        "name": "Counting Capacitor Circuits",
        "difficulty": "60",
        "hrdifficulty": "Easy"
    },
    "574": {
        "name": "Verifying Primes",
        "difficulty": "50"
    },
    "539": {
        "name": "Odd elimination",
        "difficulty": "30"
    },
    "67": {
        "name": "Maximum path sum II",
        "num": "67",
        "difficulty": "5",
        "hrdifficulty": "Medium"
    },
    "12": {
        "name": "Highly divisible triangular number",
        "empty": "4",
        "comments": "5",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Sieve of Eratosthenes</span>\n<span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\t<span class=\"k\">return</span> <span class=\"n\">primes</span>\n\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">)</span>\n<span class=\"c1\"># Returns the prime factorization of n</span>\n<span class=\"k\">def</span> <span class=\"nf\">prime_factors</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">factors</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">factors</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t\t\t<span class=\"k\">while</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"n\">n</span> <span class=\"o\">//=</span> <span class=\"n\">p</span>\n\t\t\t\t<span class=\"n\">factors</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">return</span> <span class=\"n\">factors</span>\n\n<span class=\"c1\"># Memoize the latest num_of_factors</span>\n<span class=\"n\">LATEST</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># Computes the number of factors of n</span>\n<span class=\"k\">def</span> <span class=\"nf\">num_of_factors</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"k\">global</span> <span class=\"n\">LATEST</span>\n\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">LATEST</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">LATEST</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\t<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">prime_factors</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">ans</span> <span class=\"o\">*=</span> <span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t<span class=\"n\">LATEST</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">ans</span><span class=\"p\">]</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ans</span>\n\n<span class=\"c1\"># Get the no. of factors of T_n</span>\n<span class=\"k\">def</span> <span class=\"nf\">triangle_factors</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">prime_factors</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\t<span class=\"k\">return</span> <span class=\"n\">num_of_factors</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">num_of_factors</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">//</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">while</span> <span class=\"n\">triangle_factors</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "12",
        "runtime": "106",
        "path": "12-Highly-Divisible-Triangular-Number",
        "difficulty": "5",
        "memory": "8871",
        "hrdifficulty": "Easy"
    },
    "515": {
        "name": "Dissonant Numbers",
        "difficulty": "40"
    },
    "576": {
        "name": "Irrational jumps",
        "difficulty": "55"
    },
    "610": {
        "name": "Roman Numerals II",
        "difficulty": "35"
    },
    "378": {
        "name": "Triangle Triples",
        "difficulty": "35"
    },
    "57": {
        "name": "Square root convergents",
        "num": "57",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "47": {
        "name": "Distinct primes factors",
        "num": "47",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "474": {
        "name": "Last digits of divisors",
        "difficulty": "50"
    },
    "546": {
        "name": "The Floor's Revenge",
        "difficulty": "80"
    },
    "22": {
        "name": "Names scores",
        "empty": "3",
        "comments": "7",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"c1\"># We use this to speed up reading stdin</span>\n<span class=\"c1\"># Because we have a lot of names to read</span>\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">readline</span>\n\n<span class=\"c1\"># Reference alphabet</span>\n<span class=\"n\">ALPH</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># index starts at 0</span>\n\t<span class=\"c1\"># So score is the sum of (index + 1) for each letter</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">ALPH</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)])</span>\n<span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Remove any possible whitespace</span>\n\t<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\t<span class=\"c1\"># Index starts at 0</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "22",
        "runtime": "254",
        "path": "22-Names-Scores",
        "difficulty": "5",
        "memory": "9288",
        "hrdifficulty": "Easy"
    },
    "614": {
        "name": "Special partitions 2",
        "difficulty": "55"
    },
    "430": {
        "name": "Range flips",
        "difficulty": "35"
    },
    "329": {
        "name": "Prime Frog",
        "difficulty": "25"
    },
    "275": {
        "name": "Balanced Sculptures",
        "difficulty": "85"
    },
    "493": {
        "name": "Under The Rainbow",
        "difficulty": "10"
    },
    "318": {
        "name": "2011 nines",
        "difficulty": "50"
    },
    "253": {
        "name": "Tidying up",
        "difficulty": "75"
    },
    "387": {
        "name": "Harshad Numbers",
        "difficulty": "10"
    },
    "290": {
        "name": "Digital Signature",
        "difficulty": "50"
    },
    "542": {
        "name": "Geometric Progression with Maximum Sum",
        "difficulty": "65"
    },
    "270": {
        "name": "Cutting Squares",
        "difficulty": "80"
    },
    "109": {
        "name": "Darts",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "14": {
        "name": "Longest Collatz sequence",
        "empty": "4",
        "comments": "6",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">bs</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">while</span> <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span>\n\t\t<span class=\"k\">elif</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Initialize the memoization list</span>\n<span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">5e6</span><span class=\"p\">)</span>\n<span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">MAX</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">memo</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># List of indices at which there is a new maximum</span>\n<span class=\"n\">max_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">collatz</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Store chain length of small n in memory</span>\n\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"n\">MAX</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">memo</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"c1\"># Use bitshift by 1 for speed</span>\n\t\t\t\t<span class=\"n\">memo</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">collatz</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">&gt;&gt;</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"n\">memo</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">collatz</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n\t<span class=\"c1\"># Otherwise compute on the fly</span>\n\t<span class=\"k\">elif</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">collatz</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">&gt;&gt;</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">return</span> <span class=\"n\">collatz</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">MAX</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t<span class=\"n\">collatz</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t<span class=\"c1\"># Track right-maximal indices</span>\n\t<span class=\"k\">if</span> <span class=\"n\">memo</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">memo</span><span class=\"p\">[</span><span class=\"n\">max_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]:</span>\n\t\t<span class=\"n\">max_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bs</span><span class=\"p\">(</span><span class=\"n\">max_list</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">max_list</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "14",
        "runtime": "1022",
        "path": "14-Longest-Collatz-Sequence",
        "difficulty": "5",
        "memory": "17037",
        "hrdifficulty": "Easy"
    },
    "30": {
        "name": "Digit fifth powers",
        "empty": "2",
        "comments": "6",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">combinations_with_replacement</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\n<span class=\"n\">DIGITS</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"c1\"># Correspondence from x^N -&gt; x</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n\t<span class=\"n\">DIGITS</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"n\">N</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"c1\"># No answer has more than 6 digits</span>\n<span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Choose k elements from {0^N,...9^N} with replacement</span>\n\t<span class=\"k\">for</span> <span class=\"n\">candidate</span> <span class=\"ow\">in</span> <span class=\"n\">combinations_with_replacement</span><span class=\"p\">(</span><span class=\"n\">DIGITS</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">):</span>\n\t\t<span class=\"c1\"># Get multiset of N-th roots of elements of combination</span>\n\t\t<span class=\"n\">digits_used</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">DIGITS</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span><span class=\"n\">candidate</span><span class=\"p\">))</span>\n\t\t<span class=\"c1\"># Candidate sum</span>\n\t\t<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">))</span>\n\t\t<span class=\"c1\"># Get multiset of digits of candidate sum</span>\n\t\t<span class=\"n\">powers_used</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"n\">S</span><span class=\"p\">))</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">digits_used</span> <span class=\"o\">==</span> <span class=\"n\">powers_used</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "30",
        "runtime": "92",
        "path": "30-Digit-Fifth-Powers",
        "difficulty": "5",
        "memory": "9082",
        "hrdifficulty": "Easy"
    },
    "4": {
        "name": "Largest palindrome product",
        "empty": "2",
        "comments": "3",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">bs</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">while</span> <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n\t\t<span class=\"c1\"># Is N in the array?</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n\t\t\t<span class=\"c1\"># The answer must be less than N</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\t\t<span class=\"k\">elif</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span>\n\n<span class=\"n\">pals</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n\t\t<span class=\"c1\"># Test if palindrome</span>\n\t\t<span class=\"k\">if</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">j</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"n\">pals</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">j</span><span class=\"p\">)</span>\n<span class=\"n\">pals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pals</span><span class=\"p\">))</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">bs</span><span class=\"p\">(</span><span class=\"n\">pals</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pals</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">)</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "4",
        "runtime": "557",
        "path": "4-Largest-Palindrome-Product",
        "difficulty": "5",
        "memory": "8790",
        "hrdifficulty": "Medium"
    },
    "205": {
        "name": "Dice Game",
        "difficulty": "15",
        "hrdifficulty": "Hard"
    },
    "8": {
        "name": "Largest product in a series",
        "empty": "2",
        "comments": "3",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Substrings of s of length k</span>\n<span class=\"k\">def</span> <span class=\"nf\">substrings</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">k</span><span class=\"p\">])</span>\n\t<span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># Multiplies the digits in a string int</span>\n<span class=\"k\">def</span> <span class=\"nf\">string_prod</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">ans</span> <span class=\"o\">*=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ans</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span><span class=\"p\">,</span><span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n\t<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\t<span class=\"c1\"># Brute force each substring</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"n\">string_prod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">substrings</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">K</span><span class=\"p\">)])</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "8",
        "runtime": "39",
        "path": "8-Largest-Product-in-a-Series",
        "difficulty": "5",
        "memory": "8801",
        "hrdifficulty": "Easy"
    },
    "29": {
        "name": "Distinct powers",
        "num": "29",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "230": {
        "name": "Fibonacci Words",
        "difficulty": "50"
    },
    "119": {
        "name": "Digit power sum",
        "difficulty": "30",
        "hrdifficulty": "Easy"
    },
    "492": {
        "name": "Exploding sequence",
        "difficulty": "60"
    },
    "432": {
        "name": "Totient sum",
        "difficulty": "70"
    },
    "304": {
        "name": "Primonacci",
        "difficulty": "35"
    },
    "7": {
        "name": "10001st prime",
        "empty": "3",
        "comments": "2",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n\n<span class=\"c1\"># Sieve of Eratosthenes</span>\n<span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\t<span class=\"k\">return</span> <span class=\"n\">primes</span>\n\n<span class=\"c1\"># Use eq. (1) to generate more than n primes</span>\n<span class=\"k\">def</span> <span class=\"nf\">n_primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)))</span>\n\t<span class=\"k\">return</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"n\">upper</span><span class=\"p\">)</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">n_primes</span><span class=\"p\">(</span><span class=\"mi\">10001</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></table>",
        "num": "7",
        "runtime": "41",
        "path": "7-10001-Prime",
        "difficulty": "5",
        "memory": "9966",
        "hrdifficulty": "Easy"
    },
    "80": {
        "name": "Square root digital expansion",
        "num": "80",
        "difficulty": "20",
        "hrdifficulty": "Easy"
    },
    "569": {
        "name": "Prime Mountain Range",
        "difficulty": "45"
    },
    "20": {
        "name": "Factorial digit sum",
        "empty": "2",
        "comments": "0",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">factorial</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">digit_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)])</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">digit_sum</span><span class=\"p\">(</span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></table>",
        "num": "20",
        "runtime": "10",
        "path": "20-Factorial-Digit-Sum",
        "difficulty": "5",
        "memory": "8803",
        "hrdifficulty": "Easy"
    },
    "174": {
        "name": "Counting the number of \"hollow\" square laminae that can form one, two, three, ... distinct arrangements",
        "difficulty": "40",
        "hrdifficulty": "Easy"
    },
    "28": {
        "name": "Number spiral diagonals",
        "empty": "3",
        "comments": "3",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span>\n\n<span class=\"c1\"># Modular inverse</span>\n<span class=\"c1\"># Fermat&#39;s Little Theorem</span>\n<span class=\"k\">def</span> <span class=\"nf\">inv</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Implement eq. (4)</span>\n<span class=\"k\">def</span> <span class=\"nf\">diag_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"n\">P</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">P</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"o\">*</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"n\">P</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"n\">P</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">diag_sum</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "28",
        "runtime": "10",
        "path": "28-Number-Spiral-Diagonals",
        "difficulty": "5",
        "memory": "8806",
        "hrdifficulty": "Easy"
    },
    "350": {
        "name": "Constraining the least greatest and the greatest least",
        "difficulty": "60"
    },
    "460": {
        "name": "An ant on the move",
        "difficulty": "55"
    },
    "342": {
        "name": "The totient of a square is a cube",
        "difficulty": "50"
    },
    "132": {
        "name": "Large repunit factors",
        "difficulty": "45",
        "hrdifficulty": "Advanced"
    },
    "280": {
        "name": "Ant and seeds",
        "difficulty": "65"
    },
    "500": {
        "name": "Problem 500!!!",
        "difficulty": "15"
    },
    "98": {
        "name": "Anagramic squares",
        "num": "98",
        "difficulty": "35",
        "hrdifficulty": "Easy"
    },
    "468": {
        "name": "Smooth divisors of binomial coefficients",
        "difficulty": "70"
    },
    "364": {
        "name": "Comfortable distance",
        "difficulty": "50"
    },
    "291": {
        "name": "Panaitopol Primes",
        "difficulty": "45"
    },
    "511": {
        "name": "Sequences with nice divisibility properties",
        "difficulty": "55"
    },
    "303": {
        "name": "Multiples with small digits",
        "difficulty": "35"
    },
    "25": {
        "name": "1000-digit Fibonacci number",
        "empty": "2",
        "comments": "3",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">ceil</span><span class=\"p\">,</span><span class=\"n\">log</span>\n<span class=\"n\">PHI</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n\n<span class=\"c1\"># First Fibonacci number with n numbers</span>\n<span class=\"c1\"># Implementing eq. (6)</span>\n<span class=\"k\">def</span> <span class=\"nf\">fib_dig</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Handle the one place our approximation fails</span>\n\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ceil</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">PHI</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fib_dig</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "25",
        "runtime": "10",
        "path": "25-1000-Digit-Fibonacci-Number",
        "difficulty": "5",
        "memory": "8770",
        "hrdifficulty": "Easy"
    },
    "518": {
        "name": "Prime triples and geometric sequences",
        "difficulty": "20"
    },
    "564": {
        "name": "Maximal polygons",
        "difficulty": "55"
    },
    "140": {
        "name": "Modified Fibonacci golden nuggets",
        "difficulty": "55",
        "hrdifficulty": "Easy"
    },
    "590": {
        "name": "Sets with a given Least Common Multiple",
        "difficulty": "60"
    },
    "320": {
        "name": "Factorials divisible by a huge integer",
        "difficulty": "50"
    },
    "199": {
        "name": "Iterative Circle Packing",
        "difficulty": "70",
        "hrdifficulty": "Easy"
    },
    "333": {
        "name": "Special partitions",
        "difficulty": "35"
    },
    "65": {
        "name": "Convergents of e",
        "num": "65",
        "difficulty": "15",
        "hrdifficulty": "Easy"
    },
    "72": {
        "name": "Counting fractions",
        "num": "72",
        "difficulty": "20",
        "hrdifficulty": "Easy"
    },
    "609": {
        "name": "œÄ sequences",
        "difficulty": "20"
    },
    "17": {
        "name": "Number letter counts",
        "empty": "3",
        "comments": "13",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Special names</span>\n<span class=\"n\">NUMS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"s2\">&quot;zero&quot;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"s2\">&quot;one&quot;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"s2\">&quot;two&quot;</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"s2\">&quot;three&quot;</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"s2\">&quot;four&quot;</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"s2\">&quot;five&quot;</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"s2\">&quot;six&quot;</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"s2\">&quot;seven&quot;</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"s2\">&quot;eight&quot;</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">:</span><span class=\"s2\">&quot;nine&quot;</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"s2\">&quot;ten&quot;</span><span class=\"p\">,</span>\n\t\t<span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"s2\">&quot;eleven&quot;</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"s2\">&quot;twelve&quot;</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">:</span><span class=\"s2\">&quot;thirteen&quot;</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"s2\">&quot;fourteen&quot;</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">:</span><span class=\"s2\">&quot;fifteen&quot;</span><span class=\"p\">,</span><span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"s2\">&quot;sixteen&quot;</span><span class=\"p\">,</span><span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"s2\">&quot;seventeen&quot;</span><span class=\"p\">,</span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"s2\">&quot;eighteen&quot;</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"p\">:</span><span class=\"s2\">&quot;nineteen&quot;</span><span class=\"p\">,</span>\n\t\t<span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"s2\">&quot;twenty&quot;</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">:</span><span class=\"s2\">&quot;thirty&quot;</span><span class=\"p\">,</span><span class=\"mi\">40</span><span class=\"p\">:</span><span class=\"s2\">&quot;forty&quot;</span><span class=\"p\">,</span><span class=\"mi\">50</span><span class=\"p\">:</span><span class=\"s2\">&quot;fifty&quot;</span><span class=\"p\">,</span><span class=\"mi\">60</span><span class=\"p\">:</span><span class=\"s2\">&quot;sixty&quot;</span><span class=\"p\">,</span><span class=\"mi\">70</span><span class=\"p\">:</span><span class=\"s2\">&quot;seventy&quot;</span><span class=\"p\">,</span><span class=\"mi\">80</span><span class=\"p\">:</span><span class=\"s2\">&quot;eighty&quot;</span><span class=\"p\">,</span><span class=\"mi\">90</span><span class=\"p\">:</span><span class=\"s2\">&quot;ninety&quot;</span><span class=\"p\">}</span>\n<span class=\"n\">TEN_POW</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;one&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;ten&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;hundred&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;thousand&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;million&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;billion&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;trillion&quot;</span><span class=\"p\">]</span>\n<span class=\"n\">UPPERCASE</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">three_dig_name</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">NUMS</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t<span class=\"c1\"># Start building name</span>\n\t\t<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t\t<span class=\"c1\"># Check if hundreds digit exists</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"mi\">100</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t<span class=\"c1\"># 342 -&gt; &quot;three hundred&quot;</span>\n\t\t\t<span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">100</span><span class=\"p\">])</span>\n\t\t\t<span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">TEN_POW</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n\t\t<span class=\"c1\"># Check if we know this number</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">100</span> <span class=\"ow\">in</span> <span class=\"n\">NUMS</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">%</span><span class=\"mi\">100</span><span class=\"p\">])</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"c1\"># The tens digit</span>\n\t\t\t<span class=\"c1\"># 342 -&gt; 42 - 2</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">[(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">)])</span>\n\t\t\t<span class=\"c1\"># Ones digit</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">10</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">])</span>\n\t\t<span class=\"k\">return</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">num_name</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Split up into 5 blocks of 3 digits</span>\n\t<span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"mi\">1000</span><span class=\"o\">**</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">1000</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)]</span>\n\t<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"c1\"># Start from largest block (it goes first in the name)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">block</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">blocks</span><span class=\"p\">)):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">block</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t<span class=\"c1\"># Get the three digit name</span>\n\t\t\t<span class=\"n\">block_name</span> <span class=\"o\">=</span> <span class=\"n\">three_dig_name</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">block_name</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"c1\"># When i = 4, this is the smallest block</span>\n\t\t\t\t<span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">TEN_POW</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\t<span class=\"k\">return</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">num_name</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"n\">UPPERCASE</span><span class=\"p\">:</span>\n\t\t<span class=\"c1\"># Capitalize first letters</span>\n\t\t<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">()</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "17",
        "runtime": "22",
        "path": "17-Number-Letter-Counts",
        "difficulty": "5",
        "memory": "8916",
        "hrdifficulty": "Easy"
    },
    "277": {
        "name": "A Modified Collatz sequence",
        "difficulty": "35"
    },
    "219": {
        "name": "Skew-cost coding",
        "difficulty": "70"
    },
    "21": {
        "name": "Amicable numbers",
        "empty": "3",
        "comments": "4",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">sqrt</span>\n\n<span class=\"c1\"># Compute the sum of divisors</span>\n<span class=\"k\">def</span> <span class=\"nf\">divisor_sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">i</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">n</span><span class=\"o\">//</span><span class=\"n\">i</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">n</span><span class=\"o\">//</span><span class=\"n\">i</span>\n\t<span class=\"k\">return</span> <span class=\"n\">s</span> <span class=\"o\">-</span> <span class=\"n\">n</span>\n\n<span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">1e5</span><span class=\"p\">)</span>\n<span class=\"c1\"># Precompute all amicable numbers</span>\n<span class=\"n\">AMICABLE</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">MAX</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t<span class=\"n\">friend</span> <span class=\"o\">=</span> <span class=\"n\">divisor_sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"c1\"># Check if x = d(d(x)) and x != d(x)</span>\n\t<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">divisor_sum</span><span class=\"p\">(</span><span class=\"n\">friend</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">friend</span><span class=\"p\">:</span>\n\t\t<span class=\"c1\"># Avoid duplicates</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">AMICABLE</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">AMICABLE</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">AMICABLE</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">])</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "21",
        "runtime": "2038",
        "path": "21-Amicable-Numbers",
        "difficulty": "5",
        "memory": "8801",
        "hrdifficulty": "Easy"
    },
    "56": {
        "name": "Powerful digit sum",
        "num": "56",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "551": {
        "name": "Sum of digits sequence",
        "difficulty": "50"
    },
    "10": {
        "name": "Summation of primes",
        "empty": "3",
        "comments": "2",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">bs</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">while</span> <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">mid</span>\n\t\t<span class=\"k\">elif</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">return</span> <span class=\"n\">r</span>\n\n<span class=\"c1\"># Sieve of Eratosthenes</span>\n<span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\t<span class=\"k\">return</span> <span class=\"n\">primes</span>\n\n<span class=\"n\">PRIMES</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">2e6</span><span class=\"p\">))</span>\n<span class=\"c1\"># Construct the prefix sum array</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">PRIMES</span><span class=\"p\">:</span>\n\t<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"n\">p</span>\n\t<span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"k\">del</span> <span class=\"n\">P</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">bs</span><span class=\"p\">(</span><span class=\"n\">PRIMES</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">PRIMES</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">)</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></table>",
        "num": "10",
        "runtime": "479",
        "path": "10-Summation-of-Primes",
        "difficulty": "5",
        "memory": "29890",
        "hrdifficulty": "Medium"
    },
    "451": {
        "name": "Modular inverses",
        "difficulty": "30"
    },
    "142": {
        "name": "Perfect Square Collection",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "35": {
        "name": "Circular primes",
        "empty": "2",
        "comments": "9",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Sieve of Eratosthenes</span>\n<span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\t<span class=\"k\">return</span> <span class=\"n\">primes</span>\n\n<span class=\"c1\"># Get all the rotated versions of integer x</span>\n<span class=\"k\">def</span> <span class=\"nf\">rotations</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)):</span>\n\t\t<span class=\"c1\"># Move last char in x to front</span>\n\t\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\t\t<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\t<span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">1e6</span><span class=\"p\">))</span>\n<span class=\"n\">CIRCULAR</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n<span class=\"c1\"># Make sure we don&#39;t exceed upper bound</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">P</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">]:</span>\n\t<span class=\"c1\"># Exclude primes with even digits or 5; they can&#39;t be circular</span>\n\t<span class=\"c1\"># Except when x = 2 or x = 5; include those, because they are circular</span>\n\t<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"s2\">&quot;024568&quot;</span><span class=\"p\">]):</span>\n\t\t<span class=\"c1\"># Avoid duplicates</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">CIRCULAR</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">ROT</span> <span class=\"o\">=</span> <span class=\"n\">rotations</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t\t\t<span class=\"c1\"># Make sure all of the rotations are prime</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"n\">rot</span> <span class=\"ow\">in</span> <span class=\"n\">P</span> <span class=\"k\">for</span> <span class=\"n\">rot</span> <span class=\"ow\">in</span> <span class=\"n\">ROT</span><span class=\"p\">]):</span>\n\t\t\t\t<span class=\"k\">for</span> <span class=\"n\">rot</span> <span class=\"ow\">in</span> <span class=\"n\">ROT</span><span class=\"p\">:</span>\n\t\t\t\t\t<span class=\"c1\"># Add the rotations that are less than N</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"n\">rot</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">:</span>\n\t\t\t\t\t\t<span class=\"n\">CIRCULAR</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">CIRCULAR</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "35",
        "runtime": "4753",
        "path": "35-Circular-Primes",
        "difficulty": "5",
        "memory": "19478",
        "hrdifficulty": "Easy"
    },
    "487": {
        "name": "Sums of power sums",
        "difficulty": "40"
    },
    "97": {
        "name": "Large non-Mersenne prime",
        "num": "97",
        "difficulty": "5",
        "hrdifficulty": "Hard"
    },
    "103": {
        "name": "Special subset sums: optimum",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "458": {
        "name": "Permutations of Project",
        "difficulty": "30"
    },
    "586": {
        "name": "Binary Quadratic Form",
        "difficulty": "70"
    },
    "396": {
        "name": "Weak Goodstein sequence",
        "difficulty": "40"
    },
    "441": {
        "name": "The inverse summation of coprime couples",
        "difficulty": "65"
    },
    "106": {
        "name": "Special subset sums: meta-testing",
        "difficulty": "50",
        "hrdifficulty": "Easy"
    },
    "479": {
        "name": "Roots on the Rise",
        "difficulty": "25"
    },
    "529": {
        "name": "10-substrings",
        "difficulty": "80"
    },
    "171": {
        "name": "Finding numbers for which the sum of the squares of the digits is a square",
        "difficulty": "65",
        "hrdifficulty": "Medium"
    },
    "423": {
        "name": "Consecutive die throws",
        "difficulty": "45"
    },
    "533": {
        "name": "Minimum values of the Carmichael function",
        "difficulty": "50"
    },
    "117": {
        "name": "Red, green, and blue tiles",
        "difficulty": "35",
        "hrdifficulty": "Easy"
    },
    "482": {
        "name": "The incenter of a triangle",
        "difficulty": "85"
    },
    "160": {
        "name": "Factorial trailing digits",
        "difficulty": "60",
        "hrdifficulty": "Advanced"
    },
    "44": {
        "name": "Pentagon numbers",
        "num": "44",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "96": {
        "name": "Su Doku",
        "num": "96",
        "difficulty": "25",
        "hrdifficulty": "Hard"
    },
    "513": {
        "name": "Integral median",
        "difficulty": "60"
    },
    "361": {
        "name": "Subsequence of Thue-Morse sequence",
        "difficulty": "90"
    },
    "420": {
        "name": "2x2 positive integer matrix",
        "difficulty": "60"
    },
    "187": {
        "name": "Semiprimes",
        "difficulty": "25",
        "hrdifficulty": "Medium"
    },
    "239": {
        "name": "Twenty-two Foolish Primes",
        "difficulty": "65"
    },
    "243": {
        "name": "Resilience",
        "difficulty": "35"
    },
    "332": {
        "name": "Spherical triangles",
        "difficulty": "50"
    },
    "338": {
        "name": "Cutting Rectangular Grid Paper",
        "difficulty": "95"
    },
    "587": {
        "name": "Concave triangle",
        "difficulty": "20"
    },
    "369": {
        "name": "Badugi",
        "difficulty": "60"
    },
    "459": {
        "name": "Flipping game",
        "difficulty": "100"
    },
    "3": {
        "name": "Largest prime factor",
        "empty": "2",
        "comments": "5",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Sieve of Eratosthenes</span>\n\t<span class=\"c1\"># Finds the primes up to n</span>\n\t<span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\t\t\t<span class=\"c1\"># Cross out all multiples of p</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\t<span class=\"k\">return</span> <span class=\"n\">primes</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">prime_factors</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Finds the prime factors of n</span>\n\t<span class=\"n\">factors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">))</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">factors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\t\t\t<span class=\"c1\"># Divide out all factors of p</span>\n\t\t\t<span class=\"k\">while</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t\t<span class=\"n\">n</span> <span class=\"o\">//=</span> <span class=\"n\">p</span>\n\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">factors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\t<span class=\"k\">return</span> <span class=\"n\">factors</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">prime_factors</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table>",
        "num": "3",
        "runtime": "163",
        "path": "3-Largest-Prime-Factor",
        "difficulty": "5",
        "memory": "17120",
        "hrdifficulty": "Easy"
    },
    "352": {
        "name": "Blood tests",
        "difficulty": "55"
    },
    "589": {
        "name": "Poohsticks Marathon",
        "difficulty": "90"
    },
    "200": {
        "name": "Find the 200th prime-proof sqube containing the contiguous sub-string \"200\"",
        "difficulty": "65",
        "hrdifficulty": "Medium"
    },
    "600": {
        "name": "Integer sided equiangular hexagons",
        "difficulty": "35"
    },
    "223": {
        "name": "Almost right-angled triangles I",
        "difficulty": "70"
    },
    "463": {
        "name": "A weird recurrence relation",
        "difficulty": "35"
    },
    "27": {
        "name": "Quadratic primes",
        "empty": "3",
        "comments": "11",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">sqrt</span>\n\n<span class=\"c1\"># Sieve of Eratosthenes</span>\n<span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"n\">primes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\t<span class=\"k\">return</span> <span class=\"n\">primes</span>\n\n<span class=\"c1\"># Use trial division to test if n is prime</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_prime</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># We don&#39;t want negative primes</span>\n\t<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"bp\">False</span>\n\t<span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">n</span><span class=\"o\">%</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)])</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"c1\"># The maximal no. of primes generated so far</span>\n<span class=\"n\">COUNT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"c1\"># The coefficients that generate COUNT primes</span>\n<span class=\"n\">COEFF</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n\t<span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span class=\"p\">:</span>\n\t\t<span class=\"c1\"># Iterate over +/- a,b</span>\n\t\t<span class=\"k\">for</span> <span class=\"n\">sgna</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">sgnb</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n\t\t\t\t<span class=\"c1\"># No. of primes given by a,b</span>\n\t\t\t\t<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t\t\t\t<span class=\"c1\"># The quadratic given by a,b</span>\n\t\t\t\t<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">sgna</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">sgnb</span><span class=\"o\">*</span><span class=\"n\">b</span>\n\t\t\t\t<span class=\"c1\"># Keep going until f(x) is not prime</span>\n\t\t\t\t<span class=\"k\">while</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">is_prime</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)):</span>\n\t\t\t\t\t<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\t\t\t\t<span class=\"c1\"># Only keep the maximum so far</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"n\">COUNT</span><span class=\"p\">:</span>\n\t\t\t\t\t<span class=\"n\">COUNT</span> <span class=\"o\">=</span> <span class=\"n\">count</span>\n\t\t\t\t\t<span class=\"c1\"># Update coefficients</span>\n\t\t\t\t\t<span class=\"n\">COEFF</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sgna</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">sgnb</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;{} {}&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">COEFF</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">COEFF</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></table>",
        "num": "27",
        "runtime": "1170",
        "path": "27-Quadratic-Primes",
        "difficulty": "5",
        "memory": "8848",
        "hrdifficulty": "Easy"
    },
    "393": {
        "name": "Migrating ants",
        "difficulty": "50"
    },
    "417": {
        "name": "Reciprocal cycles II",
        "difficulty": "35"
    },
    "273": {
        "name": "Sum of Squares",
        "difficulty": "70"
    },
    "255": {
        "name": "Rounded Square Roots",
        "difficulty": "75"
    },
    "397": {
        "name": "Triangle on parabola",
        "difficulty": "70"
    },
    "608": {
        "name": "Divisor Sums",
        "difficulty": "80"
    },
    "311": {
        "name": "Biclinic Integral Quadrilaterals",
        "difficulty": "70"
    },
    "306": {
        "name": "Paper-strip Game",
        "difficulty": "55"
    },
    "36": {
        "name": "Double-base palindromes",
        "empty": "3",
        "comments": "17",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n\n<span class=\"c1\"># Convert decimal n to base b string</span>\n<span class=\"k\">def</span> <span class=\"nf\">base</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>\n\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\t<span class=\"c1\"># The maximal place of the first digit</span>\n\t<span class=\"n\">max_exponent</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">))</span>\n\t<span class=\"c1\"># Starting from the rightmost place ^</span>\n\t<span class=\"k\">for</span> <span class=\"n\">exp</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">max_exponent</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t<span class=\"c1\"># See how many times b**exp goes into n</span>\n\t\t<span class=\"c1\"># Subtract it off and keep going</span>\n\t\t<span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"n\">b</span><span class=\"o\">**</span><span class=\"n\">exp</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">n</span> <span class=\"o\">%=</span> <span class=\"n\">b</span><span class=\"o\">**</span><span class=\"n\">exp</span>\n\t<span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># Generate all base-10 palindromes with at most n digits</span>\n<span class=\"c1\"># Return only those less than upper bound m</span>\n<span class=\"k\">def</span> <span class=\"nf\">pals</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Initialize with one digit palindromes</span>\n\t<span class=\"c1\"># Note: 0 is not natural in this problem</span>\n\t<span class=\"n\">PALS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n\t<span class=\"c1\"># Get all numbers with at most n/2 digits</span>\n\t<span class=\"n\">first_half</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n\t<span class=\"c1\"># This will be the &#39;middle of the sandwich&#39;</span>\n\t<span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0123456789&quot;</span>\n\t<span class=\"c1\"># Odd-length palindromes</span>\n\t<span class=\"c1\"># Add the first half, sandwich in the middle, reverse the first half</span>\n\t<span class=\"n\">PALS</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">first_half</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">first_half</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">mid</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">first_half</span><span class=\"p\">))]</span>\n\t<span class=\"c1\"># Even length palindromes</span>\n\t<span class=\"c1\"># Same as above, but without middle</span>\n\t<span class=\"n\">PALS</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">first_half</span><span class=\"p\">]</span>\n\t<span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">PALS</span> <span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">]</span>\n\n<span class=\"n\">N</span><span class=\"p\">,</span><span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n<span class=\"c1\"># 10-palindromes with as many digits as N less than N</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">pals</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)),</span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"c1\"># Check if 10-palindrome is also k-palindromic</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">P</span> <span class=\"k\">if</span> <span class=\"n\">base</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">K</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">base</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">K</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]))</span>\n</pre></div>\n</td></tr></table>",
        "num": "36",
        "runtime": "70",
        "path": "36-Double-Base-Palindromes",
        "difficulty": "5",
        "memory": "9550",
        "hrdifficulty": "Easy"
    },
    "121": {
        "name": "Disc game prize fund",
        "difficulty": "35",
        "hrdifficulty": "Easy"
    },
    "145": {
        "name": "How many reversible numbers are there below one-billion?",
        "difficulty": "20",
        "hrdifficulty": "Hard"
    },
    "555": {
        "name": "McCarthy 91 function",
        "difficulty": "30"
    },
    "562": {
        "name": "Maximal perimeter",
        "difficulty": "75"
    },
    "193": {
        "name": "Squarefree Numbers",
        "difficulty": "55",
        "hrdifficulty": "Medium"
    },
    "73": {
        "name": "Counting fractions in a range",
        "num": "73",
        "difficulty": "15",
        "hrdifficulty": "Easy"
    },
    "358": {
        "name": "Cyclic numbers",
        "difficulty": "25"
    },
    "446": {
        "name": "Retractions B",
        "difficulty": "60"
    },
    "259": {
        "name": "Reachable Numbers",
        "difficulty": "70"
    },
    "466": {
        "name": "Distinct terms in a multiplication table",
        "difficulty": "65"
    },
    "499": {
        "name": "St. Petersburg Lottery",
        "difficulty": "100"
    },
    "316": {
        "name": "Numbers in decimal expansions",
        "difficulty": "55"
    },
    "429": {
        "name": "Sum of squares of unitary divisors",
        "difficulty": "20"
    },
    "138": {
        "name": "Special isosceles triangles",
        "difficulty": "45",
        "hrdifficulty": "Easy"
    },
    "525": {
        "name": "Rolling Ellipse",
        "difficulty": "45"
    },
    "579": {
        "name": "Lattice points in lattice cubes",
        "difficulty": "100"
    },
    "445": {
        "name": "Retractions A",
        "difficulty": "50"
    },
    "495": {
        "name": "Writing n as the product of k distinct positive integers",
        "difficulty": "100"
    },
    "278": {
        "name": "Linear Combinations of Semiprimes",
        "difficulty": "50"
    },
    "344": {
        "name": "Silver dollar game",
        "difficulty": "100"
    },
    "386": {
        "name": "Maximum length of an antichain",
        "difficulty": "40"
    },
    "213": {
        "name": "Flea Circus",
        "difficulty": "60",
        "hrdifficulty": "Medium"
    },
    "384": {
        "name": "Rudin-Shapiro sequence",
        "difficulty": "65"
    },
    "545": {
        "name": "Faulhaber's Formulas",
        "difficulty": "35"
    },
    "607": {
        "name": "Marsh Crossing",
        "difficulty": "20"
    },
    "251": {
        "name": "Cardano Triplets",
        "difficulty": "70"
    },
    "471": {
        "name": "Triangle inscribed in ellipse",
        "difficulty": "75"
    },
    "340": {
        "name": "Crazy Function",
        "difficulty": "30"
    },
    "45": {
        "name": "Triangular, pentagonal, and hexagonal",
        "num": "45",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "516": {
        "name": "5-smooth totients",
        "difficulty": "20"
    },
    "391": {
        "name": "Hopping Game",
        "difficulty": "75"
    },
    "376": {
        "name": "Nontransitive sets of dice",
        "difficulty": "70"
    },
    "153": {
        "name": "Investigating Gaussian Integers",
        "difficulty": "65",
        "hrdifficulty": "Hard"
    },
    "565": {
        "name": "Divisibility of sum of divisors",
        "difficulty": "35"
    },
    "227": {
        "name": "The Chase",
        "difficulty": "65"
    },
    "494": {
        "name": "Collatz prefix families",
        "difficulty": "100"
    },
    "208": {
        "name": "Robot Walks",
        "difficulty": "70",
        "hrdifficulty": "Expert"
    },
    "528": {
        "name": "Constrained Sums",
        "difficulty": "55"
    },
    "87": {
        "name": "Prime power triples",
        "num": "87",
        "difficulty": "20",
        "hrdifficulty": "Easy"
    },
    "33": {
        "name": "Digit cancelling fractions",
        "num": "33",
        "difficulty": "5",
        "hrdifficulty": "Hard"
    },
    "568": {
        "name": "Reciprocal games II",
        "difficulty": "55"
    },
    "410": {
        "name": "Circle and tangent line",
        "difficulty": "70"
    },
    "368": {
        "name": "A Kempner-like series",
        "difficulty": "45"
    },
    "168": {
        "name": "Number Rotations",
        "difficulty": "65",
        "hrdifficulty": "Easy"
    },
    "383": {
        "name": "Divisibility comparison between factorials",
        "difficulty": "50"
    },
    "520": {
        "name": "Simbers",
        "difficulty": "45"
    },
    "345": {
        "name": "Matrix Sum",
        "difficulty": "15"
    },
    "436": {
        "name": "Unfair wager",
        "difficulty": "55"
    },
    "390": {
        "name": "Triangles with non rational sides and integral area",
        "difficulty": "60"
    },
    "13": {
        "name": "Large sum",
        "empty": "0",
        "comments": "0",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">()))]))[:</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></table>",
        "num": "13",
        "runtime": "11",
        "path": "13-Large-Sum",
        "difficulty": "5",
        "memory": "8792",
        "hrdifficulty": "Easy"
    },
    "99": {
        "name": "Largest exponential",
        "num": "99",
        "difficulty": "10",
        "hrdifficulty": "Medium"
    },
    "226": {
        "name": "A Scoop of Blancmange",
        "difficulty": "65"
    },
    "41": {
        "name": "Pandigital prime",
        "num": "41",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "601": {
        "name": "Divisibility streaks",
        "difficulty": "20"
    },
    "433": {
        "name": "Steps in Euclid's algorithm",
        "difficulty": "65"
    },
    "343": {
        "name": "Fractional Sequences",
        "difficulty": "35"
    },
    "283": {
        "name": "Integer sided triangles for which the  area/perimeter ratio is integral",
        "difficulty": "75"
    },
    "60": {
        "name": "Prime pair sets",
        "num": "60",
        "difficulty": "20",
        "hrdifficulty": "Hard"
    },
    "321": {
        "name": "Swapping Counters",
        "difficulty": "30"
    },
    "89": {
        "name": "Roman numerals",
        "num": "89",
        "difficulty": "20",
        "hrdifficulty": "Easy"
    },
    "209": {
        "name": "Circular Logic",
        "difficulty": "60",
        "hrdifficulty": "Hard"
    },
    "148": {
        "name": "Exploring Pascal's triangle",
        "difficulty": "50",
        "hrdifficulty": "Hard"
    },
    "548": {
        "name": "Gozinta Chains",
        "difficulty": "35"
    },
    "287": {
        "name": "Quadtree encoding (a simple compression algorithm)",
        "difficulty": "40"
    },
    "323": {
        "name": "Bitwise-OR operations on random integers",
        "difficulty": "20"
    },
    "584": {
        "name": "Birthday Problem Revisited",
        "difficulty": "95"
    },
    "167": {
        "name": "Investigating Ulam sequences",
        "difficulty": "75",
        "hrdifficulty": "Easy"
    },
    "198": {
        "name": "Ambiguous Numbers",
        "difficulty": "80",
        "hrdifficulty": "Expert"
    },
    "297": {
        "name": "Zeckendorf Representation",
        "difficulty": "35"
    },
    "524": {
        "name": "First Sort II",
        "difficulty": "70"
    },
    "485": {
        "name": "Maximum number of divisors",
        "difficulty": "30"
    },
    "330": {
        "name": "Euler's Number",
        "difficulty": "70"
    },
    "196": {
        "name": "Prime triplets",
        "difficulty": "65",
        "hrdifficulty": "Medium"
    },
    "123": {
        "name": "Prime square remainders",
        "difficulty": "30",
        "hrdifficulty": "Easy"
    },
    "286": {
        "name": "Scoring probabilities",
        "difficulty": "50"
    },
    "517": {
        "name": "A real recursion",
        "difficulty": "45"
    },
    "185": {
        "name": "Number Mind",
        "difficulty": "55",
        "hrdifficulty": "Medium"
    },
    "39": {
        "name": "Integer right triangles",
        "empty": "6",
        "comments": "12",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">sqrt</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>\n\t<span class=\"k\">while</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">%</span><span class=\"n\">b</span>\n\t<span class=\"k\">return</span> <span class=\"n\">a</span>\n\n<span class=\"c1\"># Binary search</span>\n<span class=\"k\">def</span> <span class=\"nf\">bs</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">while</span> <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span>\n\t\t<span class=\"k\">elif</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span>\n\n<span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">5e6</span><span class=\"p\">)</span>\n<span class=\"n\">maxm</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">MAX</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># pythag[p] = no. of sols for perimeter p</span>\n<span class=\"n\">pythag</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">MAX</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># Don&#39;t need to search m = 0 or n = 0</span>\n<span class=\"c1\"># ^ Isoceles right triangle with hypotenuse = k*sqrt(2)</span>\n<span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">maxm</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Make sure m &gt; n</span>\n\t<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">m</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\t\t<span class=\"c1\"># Check three conditions for primitive pythag trip</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"o\">&lt;=</span> <span class=\"n\">MAX</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n\t\t\t<span class=\"c1\"># For each multiple of the PPT, count one more sol</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">MAX</span><span class=\"o\">//</span><span class=\"n\">P</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\t\t\t\t<span class=\"n\">pythag</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">P</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># Compile indices of strictly right maximal vals of pythag</span>\n<span class=\"c1\"># Initialize with placeholder for comparisons</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pythag</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># Only store if stricly greater than max val so far</span>\n\t<span class=\"c1\"># This makes sure the minimal answer is stored</span>\n\t<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"n\">pythag</span><span class=\"p\">[</span><span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]:</span>\n\t\t<span class=\"n\">freq</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"c1\"># Delete placeholder</span>\n<span class=\"k\">del</span> <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bs</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "39",
        "runtime": "10",
        "path": "39-Integer-Right-Triangles",
        "difficulty": "5",
        "memory": "8840",
        "hrdifficulty": "Easy"
    },
    "596": {
        "name": "Number of lattice points in a hyperball",
        "difficulty": "50"
    },
    "263": {
        "name": "An engineers' dream come true",
        "difficulty": "75"
    },
    "93": {
        "name": "Arithmetic expressions",
        "num": "93",
        "difficulty": "35",
        "hrdifficulty": "Medium"
    },
    "406": {
        "name": "Guessing Game",
        "difficulty": "50"
    },
    "154": {
        "name": "Exploring Pascal's pyramid",
        "difficulty": "65",
        "hrdifficulty": "Hard"
    },
    "146": {
        "name": "Investigating a Prime Pattern",
        "difficulty": "50",
        "hrdifficulty": "Easy"
    },
    "442": {
        "name": "Eleven-free integers",
        "difficulty": "60"
    },
    "570": {
        "name": "Snowflakes",
        "difficulty": "50"
    },
    "158": {
        "name": "Exploring strings for which only one character comes lexicographically after its neighbour to the left",
        "difficulty": "55",
        "hrdifficulty": "Medium"
    },
    "101": {
        "name": "Optimum polynomial",
        "difficulty": "35",
        "hrdifficulty": "Medium"
    },
    "254": {
        "name": "Sums of Digit Factorials",
        "difficulty": "75"
    },
    "504": {
        "name": "Square on the Inside",
        "difficulty": "15"
    },
    "488": {
        "name": "Unbalanced Nim",
        "difficulty": "80"
    },
    "544": {
        "name": "Chromatic Conundrum",
        "difficulty": "85"
    },
    "141": {
        "name": "Investigating progressive numbers, n, which are also square",
        "difficulty": "60",
        "hrdifficulty": "Hard"
    },
    "162": {
        "name": "Hexadecimal numbers",
        "difficulty": "45",
        "hrdifficulty": "Medium"
    },
    "194": {
        "name": "Coloured Configurations",
        "difficulty": "75",
        "hrdifficulty": "Expert"
    },
    "179": {
        "name": "Consecutive positive divisors",
        "difficulty": "25",
        "hrdifficulty": "Easy"
    },
    "54": {
        "name": "Poker hands",
        "num": "54",
        "difficulty": "10",
        "hrdifficulty": "Easy"
    },
    "413": {
        "name": "One-child Numbers",
        "difficulty": "75"
    },
    "295": {
        "name": "Lenticular holes",
        "difficulty": "75"
    },
    "245": {
        "name": "Coresilience",
        "difficulty": "80"
    },
    "503": {
        "name": "Compromise or persist",
        "difficulty": "60"
    },
    "402": {
        "name": "Integer-valued polynomials",
        "difficulty": "55"
    },
    "534": {
        "name": "Weak Queens",
        "difficulty": "55"
    },
    "421": {
        "name": "Prime factors of n15+1",
        "difficulty": "50"
    },
    "246": {
        "name": "Tangents to an ellipse",
        "difficulty": "80"
    },
    "212": {
        "name": "Combined Volume of Cuboids",
        "difficulty": "70",
        "hrdifficulty": "Expert"
    },
    "388": {
        "name": "Distinct Lines",
        "difficulty": "50"
    },
    "231": {
        "name": "The prime factorisation of binomial coefficients",
        "difficulty": "40"
    },
    "267": {
        "name": "Billionaire",
        "difficulty": "50"
    },
    "108": {
        "name": "Diophantine reciprocals I",
        "difficulty": "30",
        "hrdifficulty": "Easy"
    },
    "530": {
        "name": "GCD of Divisors",
        "difficulty": "55"
    },
    "310": {
        "name": "Nim Square",
        "difficulty": "40"
    },
    "292": {
        "name": "Pythagorean Polygons",
        "difficulty": "65"
    },
    "79": {
        "name": "Passcode derivation",
        "num": "79",
        "difficulty": "5",
        "hrdifficulty": "Hard"
    },
    "571": {
        "name": "Super Pandigital Numbers",
        "difficulty": "25"
    },
    "114": {
        "name": "Counting block combinations I",
        "difficulty": "35",
        "hrdifficulty": "Medium"
    },
    "94": {
        "name": "Almost equilateral triangles",
        "num": "94",
        "difficulty": "35",
        "hrdifficulty": "Hard"
    },
    "1": {
        "name": "Multiples of 3 and 5",
        "empty": "3",
        "comments": "2",
        "code": "<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Implement eq. (1)</span>\n<span class=\"k\">def</span> <span class=\"nf\">triangular</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># These are the terms in eq. (3)</span>\n<span class=\"k\">def</span> <span class=\"nf\">sum_under</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"n\">m</span><span class=\"o\">*</span><span class=\"n\">triangular</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"n\">m</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">):</span>\n\t<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_under</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">sum_under</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">sum_under</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></table>",
        "num": "1",
        "runtime": "10",
        "path": "1-Multiples-of-3-and-5",
        "difficulty": "5",
        "memory": "8716",
        "hrdifficulty": "Easy"
    },
    "439": {
        "name": "Sum of sum of divisors",
        "difficulty": "100"
    },
    "262": {
        "name": "Mountain Range",
        "difficulty": "80"
    },
    "116": {
        "name": "Red, green or blue tiles",
        "difficulty": "30",
        "hrdifficulty": "Easy"
    },
    "133": {
        "name": "Repunit nonfactors",
        "difficulty": "50",
        "hrdifficulty": "Medium"
    },
    "166": {
        "name": "Criss Cross",
        "difficulty": "50",
        "hrdifficulty": "Easy"
    },
    "331": {
        "name": "Cross flips",
        "difficulty": "100"
    },
    "347": {
        "name": "Largest integer divisible by two primes",
        "difficulty": "15"
    },
    "582": {
        "name": "Nearly isosceles 120 degree triangles",
        "difficulty": "45"
    },
    "522": {
        "name": "Hilbert's Blackout",
        "difficulty": "85"
    },
    "43": {
        "name": "Sub-string divisibility",
        "num": "43",
        "difficulty": "5",
        "hrdifficulty": "Easy"
    },
    "327": {
        "name": "Rooms of Doom",
        "difficulty": "40"
    },
    "382": {
        "name": "Generating polygons",
        "difficulty": "60"
    },
    "147": {
        "name": "Rectangles in cross-hatched grids",
        "difficulty": "65",
        "hrdifficulty": "Hard"
    },
    "126": {
        "name": "Cuboid layers",
        "difficulty": "55",
        "hrdifficulty": "Advanced"
    },
    "536": {
        "name": "Modulo power identity",
        "difficulty": "55"
    },
    "498": {
        "name": "Remainder of polynomial division",
        "difficulty": "40"
    },
    "467": {
        "name": "Superinteger",
        "difficulty": "50"
    },
    "541": {
        "name": "Divisibility of Harmonic Number Denominators",
        "difficulty": "90"
    },
    "336": {
        "name": "Maximix Arrangements",
        "difficulty": "25"
    },
    "351": {
        "name": "Hexagonal orchards",
        "difficulty": "25"
    },
    "274": {
        "name": "Divisibility Multipliers",
        "difficulty": "65"
    },
    "531": {
        "name": "Chinese leftovers",
        "difficulty": "25"
    },
    "437": {
        "name": "Fibonacci primitive roots",
        "difficulty": "35"
    },
    "583": {
        "name": "Heron Envelopes",
        "difficulty": "45"
    },
    "505": {
        "name": "Bidirectional Recurrence",
        "difficulty": "90"
    },
    "257": {
        "name": "Angular Bisectors",
        "difficulty": "85"
    },
    "573": {
        "name": "Unfair race",
        "difficulty": "80"
    },
    "593": {
        "name": "Fleeting Medians",
        "difficulty": "35"
    },
    "240": {
        "name": "Top Dice",
        "difficulty": "60"
    },
    "74": {
        "name": "Digit factorial chains",
        "num": "74",
        "difficulty": "15",
        "hrdifficulty": "Easy"
    },
    "473": {
        "name": "Phigital number base",
        "difficulty": "35"
    }
}